
test_ver2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002e78  08002e78  00012e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e98  08002e98  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08002e98  08002e98  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e98  08002e98  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e98  08002e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e9c  08002e9c  00012e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08002ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000044  08002ee4  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002ee4  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009234  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a84  00000000  00000000  000292a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002ad28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002b7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c6b  00000000  00000000  0002c178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b929  00000000  00000000  00042de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082207  00000000  00000000  0004e70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0913  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a5c  00000000  00000000  000d0968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000044 	.word	0x20000044
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e60 	.word	0x08002e60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000048 	.word	0x20000048
 8000148:	08002e60 	.word	0x08002e60

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2iz>:
 80004d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30f      	bcc.n	80004fa <__aeabi_f2iz+0x2a>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d90d      	bls.n	8000500 <__aeabi_f2iz+0x30>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80004f0:	fa23 f002 	lsr.w	r0, r3, r2
 80004f4:	bf18      	it	ne
 80004f6:	4240      	negne	r0, r0
 80004f8:	4770      	bx	lr
 80004fa:	f04f 0000 	mov.w	r0, #0
 80004fe:	4770      	bx	lr
 8000500:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000504:	d101      	bne.n	800050a <__aeabi_f2iz+0x3a>
 8000506:	0242      	lsls	r2, r0, #9
 8000508:	d105      	bne.n	8000516 <__aeabi_f2iz+0x46>
 800050a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800050e:	bf08      	it	eq
 8000510:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000514:	4770      	bx	lr
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	4770      	bx	lr

0800051c <subKeyProcess1>:
int KeyReg10 = NORMAL_STATE;
int KeyReg11 = NORMAL_STATE;

int TimeForKeyPress = 200;

void subKeyProcess1(){
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
	button1_flag = 1;
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <subKeyProcess1+0x14>)
 8000522:	2201      	movs	r2, #1
 8000524:	601a      	str	r2, [r3, #0]
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000060 	.word	0x20000060

08000534 <isButton1PRESS>:
int isButton1PRESS(){
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <isButton1PRESS+0x20>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d104      	bne.n	800054a <isButton1PRESS+0x16>
		button1_flag = 0;
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <isButton1PRESS+0x20>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
		return 1;
 8000546:	2301      	movs	r3, #1
 8000548:	e000      	b.n	800054c <isButton1PRESS+0x18>
	}
	return 0;
 800054a:	2300      	movs	r3, #0
}
 800054c:	4618      	mov	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	20000060 	.word	0x20000060

08000558 <subKeyProcess2>:

void subKeyProcess2(){
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
	button2_flag = 1;
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <subKeyProcess2+0x14>)
 800055e:	2201      	movs	r2, #1
 8000560:	601a      	str	r2, [r3, #0]
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20000064 	.word	0x20000064

08000570 <isButton2PRESS>:

int isButton2PRESS(){
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <isButton2PRESS+0x20>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d104      	bne.n	8000586 <isButton2PRESS+0x16>
		button2_flag = 0;
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <isButton2PRESS+0x20>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
		return 1;
 8000582:	2301      	movs	r3, #1
 8000584:	e000      	b.n	8000588 <isButton2PRESS+0x18>
	}
	return 0;
 8000586:	2300      	movs	r3, #0
}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	20000064 	.word	0x20000064

08000594 <subKeyProcess3>:

void subKeyProcess3(){
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	button3_flag = 1;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <subKeyProcess3+0x14>)
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000068 	.word	0x20000068

080005ac <isButton3PRESS>:

int isButton3PRESS(){
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <isButton3PRESS+0x20>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d104      	bne.n	80005c2 <isButton3PRESS+0x16>
		button3_flag = 0;
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <isButton3PRESS+0x20>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
		return 1;
 80005be:	2301      	movs	r3, #1
 80005c0:	e000      	b.n	80005c4 <isButton3PRESS+0x18>
	}
	return 0;
 80005c2:	2300      	movs	r3, #0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	20000068 	.word	0x20000068

080005d0 <getKeyInput>:


void getKeyInput(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	//BUTTON1
	KeyReg0 = KeyReg1;
 80005d4:	4b5c      	ldr	r3, [pc, #368]	; (8000748 <getKeyInput+0x178>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a5c      	ldr	r2, [pc, #368]	; (800074c <getKeyInput+0x17c>)
 80005da:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 80005dc:	4b5c      	ldr	r3, [pc, #368]	; (8000750 <getKeyInput+0x180>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a59      	ldr	r2, [pc, #356]	; (8000748 <getKeyInput+0x178>)
 80005e2:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80005e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e8:	485a      	ldr	r0, [pc, #360]	; (8000754 <getKeyInput+0x184>)
 80005ea:	f001 fc11 	bl	8001e10 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b57      	ldr	r3, [pc, #348]	; (8000750 <getKeyInput+0x180>)
 80005f4:	601a      	str	r2, [r3, #0]
	if((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
 80005f6:	4b55      	ldr	r3, [pc, #340]	; (800074c <getKeyInput+0x17c>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4b53      	ldr	r3, [pc, #332]	; (8000748 <getKeyInput+0x178>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d125      	bne.n	800064e <getKeyInput+0x7e>
 8000602:	4b51      	ldr	r3, [pc, #324]	; (8000748 <getKeyInput+0x178>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	4b52      	ldr	r3, [pc, #328]	; (8000750 <getKeyInput+0x180>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	429a      	cmp	r2, r3
 800060c:	d11f      	bne.n	800064e <getKeyInput+0x7e>
		if(KeyReg3 != KeyReg2){
 800060e:	4b52      	ldr	r3, [pc, #328]	; (8000758 <getKeyInput+0x188>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	4b4f      	ldr	r3, [pc, #316]	; (8000750 <getKeyInput+0x180>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	429a      	cmp	r2, r3
 8000618:	d00d      	beq.n	8000636 <getKeyInput+0x66>
			KeyReg3 = KeyReg2;
 800061a:	4b4d      	ldr	r3, [pc, #308]	; (8000750 <getKeyInput+0x180>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a4e      	ldr	r2, [pc, #312]	; (8000758 <getKeyInput+0x188>)
 8000620:	6013      	str	r3, [r2, #0]
			if(KeyReg2 == PRESS_STATE){
 8000622:	4b4b      	ldr	r3, [pc, #300]	; (8000750 <getKeyInput+0x180>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d111      	bne.n	800064e <getKeyInput+0x7e>
				//TODO
				subKeyProcess1();
 800062a:	f7ff ff77 	bl	800051c <subKeyProcess1>
				TimeForKeyPress = 200;
 800062e:	4b4b      	ldr	r3, [pc, #300]	; (800075c <getKeyInput+0x18c>)
 8000630:	22c8      	movs	r2, #200	; 0xc8
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	e00b      	b.n	800064e <getKeyInput+0x7e>
			}
		}else{
				TimeForKeyPress --;
 8000636:	4b49      	ldr	r3, [pc, #292]	; (800075c <getKeyInput+0x18c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3b01      	subs	r3, #1
 800063c:	4a47      	ldr	r2, [pc, #284]	; (800075c <getKeyInput+0x18c>)
 800063e:	6013      	str	r3, [r2, #0]
				if(TimeForKeyPress == 0){
 8000640:	4b46      	ldr	r3, [pc, #280]	; (800075c <getKeyInput+0x18c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d102      	bne.n	800064e <getKeyInput+0x7e>
					KeyReg3 = NORMAL_STATE;
 8000648:	4b43      	ldr	r3, [pc, #268]	; (8000758 <getKeyInput+0x188>)
 800064a:	2201      	movs	r2, #1
 800064c:	601a      	str	r2, [r3, #0]
				}
		}
	}
	//BUTTON2
	KeyReg4 = KeyReg5;
 800064e:	4b44      	ldr	r3, [pc, #272]	; (8000760 <getKeyInput+0x190>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a44      	ldr	r2, [pc, #272]	; (8000764 <getKeyInput+0x194>)
 8000654:	6013      	str	r3, [r2, #0]
	KeyReg5 = KeyReg6;
 8000656:	4b44      	ldr	r3, [pc, #272]	; (8000768 <getKeyInput+0x198>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a41      	ldr	r2, [pc, #260]	; (8000760 <getKeyInput+0x190>)
 800065c:	6013      	str	r3, [r2, #0]
	KeyReg6 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800065e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000662:	483c      	ldr	r0, [pc, #240]	; (8000754 <getKeyInput+0x184>)
 8000664:	f001 fbd4 	bl	8001e10 <HAL_GPIO_ReadPin>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	4b3e      	ldr	r3, [pc, #248]	; (8000768 <getKeyInput+0x198>)
 800066e:	601a      	str	r2, [r3, #0]
	if((KeyReg4 == KeyReg5) && (KeyReg5 == KeyReg6)){
 8000670:	4b3c      	ldr	r3, [pc, #240]	; (8000764 <getKeyInput+0x194>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b3a      	ldr	r3, [pc, #232]	; (8000760 <getKeyInput+0x190>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	429a      	cmp	r2, r3
 800067a:	d125      	bne.n	80006c8 <getKeyInput+0xf8>
 800067c:	4b38      	ldr	r3, [pc, #224]	; (8000760 <getKeyInput+0x190>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b39      	ldr	r3, [pc, #228]	; (8000768 <getKeyInput+0x198>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	429a      	cmp	r2, r3
 8000686:	d11f      	bne.n	80006c8 <getKeyInput+0xf8>
		if(KeyReg7 != KeyReg6){
 8000688:	4b38      	ldr	r3, [pc, #224]	; (800076c <getKeyInput+0x19c>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b36      	ldr	r3, [pc, #216]	; (8000768 <getKeyInput+0x198>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	429a      	cmp	r2, r3
 8000692:	d00d      	beq.n	80006b0 <getKeyInput+0xe0>
			KeyReg7 = KeyReg6;
 8000694:	4b34      	ldr	r3, [pc, #208]	; (8000768 <getKeyInput+0x198>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a34      	ldr	r2, [pc, #208]	; (800076c <getKeyInput+0x19c>)
 800069a:	6013      	str	r3, [r2, #0]
			if(KeyReg6 == PRESS_STATE){
 800069c:	4b32      	ldr	r3, [pc, #200]	; (8000768 <getKeyInput+0x198>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d111      	bne.n	80006c8 <getKeyInput+0xf8>
				//TODO
				subKeyProcess2();
 80006a4:	f7ff ff58 	bl	8000558 <subKeyProcess2>
				TimeForKeyPress = 200;
 80006a8:	4b2c      	ldr	r3, [pc, #176]	; (800075c <getKeyInput+0x18c>)
 80006aa:	22c8      	movs	r2, #200	; 0xc8
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	e00b      	b.n	80006c8 <getKeyInput+0xf8>
			}
		}else{
				TimeForKeyPress --;
 80006b0:	4b2a      	ldr	r3, [pc, #168]	; (800075c <getKeyInput+0x18c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3b01      	subs	r3, #1
 80006b6:	4a29      	ldr	r2, [pc, #164]	; (800075c <getKeyInput+0x18c>)
 80006b8:	6013      	str	r3, [r2, #0]
				if(TimeForKeyPress == 0){
 80006ba:	4b28      	ldr	r3, [pc, #160]	; (800075c <getKeyInput+0x18c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d102      	bne.n	80006c8 <getKeyInput+0xf8>
					KeyReg7 = NORMAL_STATE;
 80006c2:	4b2a      	ldr	r3, [pc, #168]	; (800076c <getKeyInput+0x19c>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
				}
		}
	}
	// BUTTON3
	KeyReg8 = KeyReg9;
 80006c8:	4b29      	ldr	r3, [pc, #164]	; (8000770 <getKeyInput+0x1a0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a29      	ldr	r2, [pc, #164]	; (8000774 <getKeyInput+0x1a4>)
 80006ce:	6013      	str	r3, [r2, #0]
	KeyReg9 = KeyReg10;
 80006d0:	4b29      	ldr	r3, [pc, #164]	; (8000778 <getKeyInput+0x1a8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a26      	ldr	r2, [pc, #152]	; (8000770 <getKeyInput+0x1a0>)
 80006d6:	6013      	str	r3, [r2, #0]
	KeyReg10 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80006d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006dc:	481d      	ldr	r0, [pc, #116]	; (8000754 <getKeyInput+0x184>)
 80006de:	f001 fb97 	bl	8001e10 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b24      	ldr	r3, [pc, #144]	; (8000778 <getKeyInput+0x1a8>)
 80006e8:	601a      	str	r2, [r3, #0]
	if((KeyReg8 == KeyReg9) && (KeyReg10 == KeyReg9)){
 80006ea:	4b22      	ldr	r3, [pc, #136]	; (8000774 <getKeyInput+0x1a4>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <getKeyInput+0x1a0>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d125      	bne.n	8000742 <getKeyInput+0x172>
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <getKeyInput+0x1a8>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <getKeyInput+0x1a0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d11f      	bne.n	8000742 <getKeyInput+0x172>
		if(KeyReg11 != KeyReg10){
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <getKeyInput+0x1ac>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <getKeyInput+0x1a8>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	429a      	cmp	r2, r3
 800070c:	d00d      	beq.n	800072a <getKeyInput+0x15a>
			KeyReg11 = KeyReg10;
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <getKeyInput+0x1a8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a1a      	ldr	r2, [pc, #104]	; (800077c <getKeyInput+0x1ac>)
 8000714:	6013      	str	r3, [r2, #0]
			if(KeyReg10 == PRESS_STATE){
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <getKeyInput+0x1a8>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d111      	bne.n	8000742 <getKeyInput+0x172>
				//TODO
				subKeyProcess3();
 800071e:	f7ff ff39 	bl	8000594 <subKeyProcess3>
				TimeForKeyPress = 200;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <getKeyInput+0x18c>)
 8000724:	22c8      	movs	r2, #200	; 0xc8
 8000726:	601a      	str	r2, [r3, #0]
				if(TimeForKeyPress == 0){
					KeyReg11 = NORMAL_STATE;
				}
		}
	}
}
 8000728:	e00b      	b.n	8000742 <getKeyInput+0x172>
				TimeForKeyPress --;
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <getKeyInput+0x18c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	3b01      	subs	r3, #1
 8000730:	4a0a      	ldr	r2, [pc, #40]	; (800075c <getKeyInput+0x18c>)
 8000732:	6013      	str	r3, [r2, #0]
				if(TimeForKeyPress == 0){
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <getKeyInput+0x18c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d102      	bne.n	8000742 <getKeyInput+0x172>
					KeyReg11 = NORMAL_STATE;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <getKeyInput+0x1ac>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000004 	.word	0x20000004
 800074c:	20000000 	.word	0x20000000
 8000750:	20000008 	.word	0x20000008
 8000754:	40010c00 	.word	0x40010c00
 8000758:	2000000c 	.word	0x2000000c
 800075c:	20000030 	.word	0x20000030
 8000760:	20000014 	.word	0x20000014
 8000764:	20000010 	.word	0x20000010
 8000768:	20000018 	.word	0x20000018
 800076c:	2000001c 	.word	0x2000001c
 8000770:	20000024 	.word	0x20000024
 8000774:	20000020 	.word	0x20000020
 8000778:	20000028 	.word	0x20000028
 800077c:	2000002c 	.word	0x2000002c

08000780 <ledOFF>:

#include "display.h"
#include "main.h"
#define MAX_LED  4
int led_buffer [MAX_LED];
void ledOFF(){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port,LED_RED_X_Pin, SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2102      	movs	r1, #2
 8000788:	480e      	ldr	r0, [pc, #56]	; (80007c4 <ledOFF+0x44>)
 800078a:	f001 fb58 	bl	8001e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port,LED_YELLOW_X_Pin, SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2104      	movs	r1, #4
 8000792:	480c      	ldr	r0, [pc, #48]	; (80007c4 <ledOFF+0x44>)
 8000794:	f001 fb53 	bl	8001e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port,LED_GREEN_X_Pin, SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2108      	movs	r1, #8
 800079c:	4809      	ldr	r0, [pc, #36]	; (80007c4 <ledOFF+0x44>)
 800079e:	f001 fb4e 	bl	8001e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port,LED_RED_Y_Pin, SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	2110      	movs	r1, #16
 80007a6:	4807      	ldr	r0, [pc, #28]	; (80007c4 <ledOFF+0x44>)
 80007a8:	f001 fb49 	bl	8001e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port,LED_YELLOW_Y_Pin, SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2120      	movs	r1, #32
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <ledOFF+0x44>)
 80007b2:	f001 fb44 	bl	8001e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port,LED_GREEN_Y_Pin, SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2140      	movs	r1, #64	; 0x40
 80007ba:	4802      	ldr	r0, [pc, #8]	; (80007c4 <ledOFF+0x44>)
 80007bc:	f001 fb3f 	bl	8001e3e <HAL_GPIO_WritePin>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40010800 	.word	0x40010800

080007c8 <ledON>:
void ledON(){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port,LED_RED_X_Pin, RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2102      	movs	r1, #2
 80007d0:	480e      	ldr	r0, [pc, #56]	; (800080c <ledON+0x44>)
 80007d2:	f001 fb34 	bl	8001e3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port,LED_YELLOW_X_Pin, RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2104      	movs	r1, #4
 80007da:	480c      	ldr	r0, [pc, #48]	; (800080c <ledON+0x44>)
 80007dc:	f001 fb2f 	bl	8001e3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port,LED_GREEN_X_Pin, RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2108      	movs	r1, #8
 80007e4:	4809      	ldr	r0, [pc, #36]	; (800080c <ledON+0x44>)
 80007e6:	f001 fb2a 	bl	8001e3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port,LED_RED_Y_Pin, RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2110      	movs	r1, #16
 80007ee:	4807      	ldr	r0, [pc, #28]	; (800080c <ledON+0x44>)
 80007f0:	f001 fb25 	bl	8001e3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port,LED_YELLOW_Y_Pin, RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2120      	movs	r1, #32
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <ledON+0x44>)
 80007fa:	f001 fb20 	bl	8001e3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port,LED_GREEN_Y_Pin, RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2140      	movs	r1, #64	; 0x40
 8000802:	4802      	ldr	r0, [pc, #8]	; (800080c <ledON+0x44>)
 8000804:	f001 fb1b 	bl	8001e3e <HAL_GPIO_WritePin>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40010800 	.word	0x40010800

08000810 <ledredON_x>:
void ledredON_x(){
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port,LED_RED_X_Pin, RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	2102      	movs	r1, #2
 8000818:	4807      	ldr	r0, [pc, #28]	; (8000838 <ledredON_x+0x28>)
 800081a:	f001 fb10 	bl	8001e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port,LED_YELLOW_X_Pin, SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2104      	movs	r1, #4
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <ledredON_x+0x28>)
 8000824:	f001 fb0b 	bl	8001e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port,LED_GREEN_X_Pin, SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2108      	movs	r1, #8
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <ledredON_x+0x28>)
 800082e:	f001 fb06 	bl	8001e3e <HAL_GPIO_WritePin>
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40010800 	.word	0x40010800

0800083c <ledgreenON_x>:
void ledgreenON_x(){
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port,LED_RED_X_Pin, SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2102      	movs	r1, #2
 8000844:	4807      	ldr	r0, [pc, #28]	; (8000864 <ledgreenON_x+0x28>)
 8000846:	f001 fafa 	bl	8001e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port,LED_YELLOW_X_Pin, SET);
 800084a:	2201      	movs	r2, #1
 800084c:	2104      	movs	r1, #4
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <ledgreenON_x+0x28>)
 8000850:	f001 faf5 	bl	8001e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port,LED_GREEN_X_Pin, RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2108      	movs	r1, #8
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <ledgreenON_x+0x28>)
 800085a:	f001 faf0 	bl	8001e3e <HAL_GPIO_WritePin>
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40010800 	.word	0x40010800

08000868 <ledyellowON_x>:
void ledyellowON_x(){
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port,LED_RED_X_Pin, SET);
 800086c:	2201      	movs	r2, #1
 800086e:	2102      	movs	r1, #2
 8000870:	4807      	ldr	r0, [pc, #28]	; (8000890 <ledyellowON_x+0x28>)
 8000872:	f001 fae4 	bl	8001e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port,LED_YELLOW_X_Pin, RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2104      	movs	r1, #4
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <ledyellowON_x+0x28>)
 800087c:	f001 fadf 	bl	8001e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port,LED_GREEN_X_Pin, SET);
 8000880:	2201      	movs	r2, #1
 8000882:	2108      	movs	r1, #8
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <ledyellowON_x+0x28>)
 8000886:	f001 fada 	bl	8001e3e <HAL_GPIO_WritePin>
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40010800 	.word	0x40010800

08000894 <ledredON_y>:
void ledredON_y(){
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port,LED_RED_Y_Pin, RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2110      	movs	r1, #16
 800089c:	4807      	ldr	r0, [pc, #28]	; (80008bc <ledredON_y+0x28>)
 800089e:	f001 face 	bl	8001e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port,LED_YELLOW_Y_Pin, SET);
 80008a2:	2201      	movs	r2, #1
 80008a4:	2120      	movs	r1, #32
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <ledredON_y+0x28>)
 80008a8:	f001 fac9 	bl	8001e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port,LED_GREEN_Y_Pin, SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2140      	movs	r1, #64	; 0x40
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <ledredON_y+0x28>)
 80008b2:	f001 fac4 	bl	8001e3e <HAL_GPIO_WritePin>
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40010800 	.word	0x40010800

080008c0 <ledgreenON_y>:
void ledgreenON_y(){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port,LED_RED_Y_Pin, SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2110      	movs	r1, #16
 80008c8:	4807      	ldr	r0, [pc, #28]	; (80008e8 <ledgreenON_y+0x28>)
 80008ca:	f001 fab8 	bl	8001e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port,LED_YELLOW_Y_Pin, SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2120      	movs	r1, #32
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <ledgreenON_y+0x28>)
 80008d4:	f001 fab3 	bl	8001e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port,LED_GREEN_Y_Pin, RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <ledgreenON_y+0x28>)
 80008de:	f001 faae 	bl	8001e3e <HAL_GPIO_WritePin>
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40010800 	.word	0x40010800

080008ec <ledyellowON_y>:
void ledyellowON_y(){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port,LED_RED_Y_Pin, SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2110      	movs	r1, #16
 80008f4:	4807      	ldr	r0, [pc, #28]	; (8000914 <ledyellowON_y+0x28>)
 80008f6:	f001 faa2 	bl	8001e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port,LED_YELLOW_Y_Pin, RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2120      	movs	r1, #32
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <ledyellowON_y+0x28>)
 8000900:	f001 fa9d 	bl	8001e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port,LED_GREEN_Y_Pin, SET);
 8000904:	2201      	movs	r2, #1
 8000906:	2140      	movs	r1, #64	; 0x40
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <ledyellowON_y+0x28>)
 800090a:	f001 fa98 	bl	8001e3e <HAL_GPIO_WritePin>
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40010800 	.word	0x40010800

08000918 <ledredON>:
void ledredON(){
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	ledredON_x();
 800091c:	f7ff ff78 	bl	8000810 <ledredON_x>
	ledredON_y();
 8000920:	f7ff ffb8 	bl	8000894 <ledredON_y>
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <ledgreenON>:
void ledgreenON(){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	ledgreenON_x();
 800092c:	f7ff ff86 	bl	800083c <ledgreenON_x>
	ledgreenON_y();
 8000930:	f7ff ffc6 	bl	80008c0 <ledgreenON_y>
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}

08000938 <ledyellowON>:
void ledyellowON(){
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	ledyellowON_x();
 800093c:	f7ff ff94 	bl	8000868 <ledyellowON_x>
	ledyellowON_y();
 8000940:	f7ff ffd4 	bl	80008ec <ledyellowON_y>
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}

08000948 <update7SEG>:
void update7SEG ( int index ) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d852      	bhi.n	80009fc <update7SEG+0xb4>
 8000956:	a201      	add	r2, pc, #4	; (adr r2, 800095c <update7SEG+0x14>)
 8000958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095c:	0800096d 	.word	0x0800096d
 8000960:	08000991 	.word	0x08000991
 8000964:	080009b5 	.word	0x080009b5
 8000968:	080009d9 	.word	0x080009d9
	switch ( index ) {
		case 0:
			// Display the first 7 SEG with led_buffer [0]
			display7SEG(led_buffer[0]);
 800096c:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <update7SEG+0xc0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f000 f85f 	bl	8000a34 <display7SEG>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097c:	4823      	ldr	r0, [pc, #140]	; (8000a0c <update7SEG+0xc4>)
 800097e:	f001 fa5e 	bl	8001e3e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 8000982:	2201      	movs	r2, #1
 8000984:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000988:	4820      	ldr	r0, [pc, #128]	; (8000a0c <update7SEG+0xc4>)
 800098a:	f001 fa58 	bl	8001e3e <HAL_GPIO_WritePin>
			break ;
 800098e:	e036      	b.n	80009fe <update7SEG+0xb6>
		case 1:
			// Display the second 7 SEG with led_buffer [1]
			display7SEG(led_buffer[1]);
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <update7SEG+0xc0>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f84d 	bl	8000a34 <display7SEG>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a0:	481a      	ldr	r0, [pc, #104]	; (8000a0c <update7SEG+0xc4>)
 80009a2:	f001 fa4c 	bl	8001e3e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ac:	4817      	ldr	r0, [pc, #92]	; (8000a0c <update7SEG+0xc4>)
 80009ae:	f001 fa46 	bl	8001e3e <HAL_GPIO_WritePin>
			break ;
 80009b2:	e024      	b.n	80009fe <update7SEG+0xb6>
		 case 2:
			// Display the third 7 SEG with led_buffer [2]
			display7SEG(led_buffer[2]);
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <update7SEG+0xc0>)
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 f83b 	bl	8000a34 <display7SEG>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c4:	4811      	ldr	r0, [pc, #68]	; (8000a0c <update7SEG+0xc4>)
 80009c6:	f001 fa3a 	bl	8001e3e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d0:	480e      	ldr	r0, [pc, #56]	; (8000a0c <update7SEG+0xc4>)
 80009d2:	f001 fa34 	bl	8001e3e <HAL_GPIO_WritePin>
			break ;
 80009d6:	e012      	b.n	80009fe <update7SEG+0xb6>
		case 3:
			// Display the forth 7 SEG with led_buffer [3]
			display7SEG(led_buffer[3]);
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <update7SEG+0xc0>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 f829 	bl	8000a34 <display7SEG>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e8:	4808      	ldr	r0, [pc, #32]	; (8000a0c <update7SEG+0xc4>)
 80009ea:	f001 fa28 	bl	8001e3e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,  SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <update7SEG+0xc4>)
 80009f6:	f001 fa22 	bl	8001e3e <HAL_GPIO_WritePin>
			break ;
 80009fa:	e000      	b.n	80009fe <update7SEG+0xb6>
		default :
			break;
 80009fc:	bf00      	nop
 }
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000094 	.word	0x20000094
 8000a0c:	40010800 	.word	0x40010800

08000a10 <updateClockBuffer>:

void updateClockBuffer (int index, int value)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
	led_buffer[index] = value;
 8000a1a:	4905      	ldr	r1, [pc, #20]	; (8000a30 <updateClockBuffer+0x20>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

};
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000094 	.word	0x20000094

08000a34 <display7SEG>:

void display7SEG(int num){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b09      	cmp	r3, #9
 8000a40:	f200 8180 	bhi.w	8000d44 <display7SEG+0x310>
 8000a44:	a201      	add	r2, pc, #4	; (adr r2, 8000a4c <display7SEG+0x18>)
 8000a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4a:	bf00      	nop
 8000a4c:	08000a75 	.word	0x08000a75
 8000a50:	08000abd 	.word	0x08000abd
 8000a54:	08000b05 	.word	0x08000b05
 8000a58:	08000b4d 	.word	0x08000b4d
 8000a5c:	08000b95 	.word	0x08000b95
 8000a60:	08000bdd 	.word	0x08000bdd
 8000a64:	08000c25 	.word	0x08000c25
 8000a68:	08000c6d 	.word	0x08000c6d
 8000a6c:	08000cb5 	.word	0x08000cb5
 8000a70:	08000cfd 	.word	0x08000cfd
	switch(num) {
	  case 0:
		  HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin ,RESET) ;
 8000a74:	2200      	movs	r2, #0
 8000a76:	2101      	movs	r1, #1
 8000a78:	48b5      	ldr	r0, [pc, #724]	; (8000d50 <display7SEG+0x31c>)
 8000a7a:	f001 f9e0 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin ,RESET );
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2102      	movs	r1, #2
 8000a82:	48b3      	ldr	r0, [pc, #716]	; (8000d50 <display7SEG+0x31c>)
 8000a84:	f001 f9db 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin ,RESET) ;
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	48b0      	ldr	r0, [pc, #704]	; (8000d50 <display7SEG+0x31c>)
 8000a8e:	f001 f9d6 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin ,RESET );
 8000a92:	2200      	movs	r2, #0
 8000a94:	2108      	movs	r1, #8
 8000a96:	48ae      	ldr	r0, [pc, #696]	; (8000d50 <display7SEG+0x31c>)
 8000a98:	f001 f9d1 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin ,RESET) ;
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2110      	movs	r1, #16
 8000aa0:	48ab      	ldr	r0, [pc, #684]	; (8000d50 <display7SEG+0x31c>)
 8000aa2:	f001 f9cc 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin ,RESET );
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2120      	movs	r1, #32
 8000aaa:	48a9      	ldr	r0, [pc, #676]	; (8000d50 <display7SEG+0x31c>)
 8000aac:	f001 f9c7 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin ,SET) ;
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2140      	movs	r1, #64	; 0x40
 8000ab4:	48a6      	ldr	r0, [pc, #664]	; (8000d50 <display7SEG+0x31c>)
 8000ab6:	f001 f9c2 	bl	8001e3e <HAL_GPIO_WritePin>
	    break;
 8000aba:	e144      	b.n	8000d46 <display7SEG+0x312>
	  case 1:
		  HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin ,SET) ;
 8000abc:	2201      	movs	r2, #1
 8000abe:	2101      	movs	r1, #1
 8000ac0:	48a3      	ldr	r0, [pc, #652]	; (8000d50 <display7SEG+0x31c>)
 8000ac2:	f001 f9bc 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin ,RESET );
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2102      	movs	r1, #2
 8000aca:	48a1      	ldr	r0, [pc, #644]	; (8000d50 <display7SEG+0x31c>)
 8000acc:	f001 f9b7 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin ,RESET) ;
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	489e      	ldr	r0, [pc, #632]	; (8000d50 <display7SEG+0x31c>)
 8000ad6:	f001 f9b2 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin ,SET );
 8000ada:	2201      	movs	r2, #1
 8000adc:	2108      	movs	r1, #8
 8000ade:	489c      	ldr	r0, [pc, #624]	; (8000d50 <display7SEG+0x31c>)
 8000ae0:	f001 f9ad 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin ,SET) ;
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2110      	movs	r1, #16
 8000ae8:	4899      	ldr	r0, [pc, #612]	; (8000d50 <display7SEG+0x31c>)
 8000aea:	f001 f9a8 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin ,SET );
 8000aee:	2201      	movs	r2, #1
 8000af0:	2120      	movs	r1, #32
 8000af2:	4897      	ldr	r0, [pc, #604]	; (8000d50 <display7SEG+0x31c>)
 8000af4:	f001 f9a3 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin ,SET) ;
 8000af8:	2201      	movs	r2, #1
 8000afa:	2140      	movs	r1, #64	; 0x40
 8000afc:	4894      	ldr	r0, [pc, #592]	; (8000d50 <display7SEG+0x31c>)
 8000afe:	f001 f99e 	bl	8001e3e <HAL_GPIO_WritePin>
	    break;
 8000b02:	e120      	b.n	8000d46 <display7SEG+0x312>
	  case 2:
		  HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin ,RESET) ;
 8000b04:	2200      	movs	r2, #0
 8000b06:	2101      	movs	r1, #1
 8000b08:	4891      	ldr	r0, [pc, #580]	; (8000d50 <display7SEG+0x31c>)
 8000b0a:	f001 f998 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin ,RESET );
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2102      	movs	r1, #2
 8000b12:	488f      	ldr	r0, [pc, #572]	; (8000d50 <display7SEG+0x31c>)
 8000b14:	f001 f993 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin ,SET) ;
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	488c      	ldr	r0, [pc, #560]	; (8000d50 <display7SEG+0x31c>)
 8000b1e:	f001 f98e 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin ,RESET );
 8000b22:	2200      	movs	r2, #0
 8000b24:	2108      	movs	r1, #8
 8000b26:	488a      	ldr	r0, [pc, #552]	; (8000d50 <display7SEG+0x31c>)
 8000b28:	f001 f989 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin ,RESET) ;
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2110      	movs	r1, #16
 8000b30:	4887      	ldr	r0, [pc, #540]	; (8000d50 <display7SEG+0x31c>)
 8000b32:	f001 f984 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin ,SET );
 8000b36:	2201      	movs	r2, #1
 8000b38:	2120      	movs	r1, #32
 8000b3a:	4885      	ldr	r0, [pc, #532]	; (8000d50 <display7SEG+0x31c>)
 8000b3c:	f001 f97f 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin ,RESET) ;
 8000b40:	2200      	movs	r2, #0
 8000b42:	2140      	movs	r1, #64	; 0x40
 8000b44:	4882      	ldr	r0, [pc, #520]	; (8000d50 <display7SEG+0x31c>)
 8000b46:	f001 f97a 	bl	8001e3e <HAL_GPIO_WritePin>
	    break;
 8000b4a:	e0fc      	b.n	8000d46 <display7SEG+0x312>
	  case 3:
		  HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin ,RESET) ;
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2101      	movs	r1, #1
 8000b50:	487f      	ldr	r0, [pc, #508]	; (8000d50 <display7SEG+0x31c>)
 8000b52:	f001 f974 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin ,RESET );
 8000b56:	2200      	movs	r2, #0
 8000b58:	2102      	movs	r1, #2
 8000b5a:	487d      	ldr	r0, [pc, #500]	; (8000d50 <display7SEG+0x31c>)
 8000b5c:	f001 f96f 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin ,RESET) ;
 8000b60:	2200      	movs	r2, #0
 8000b62:	2104      	movs	r1, #4
 8000b64:	487a      	ldr	r0, [pc, #488]	; (8000d50 <display7SEG+0x31c>)
 8000b66:	f001 f96a 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin ,RESET );
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2108      	movs	r1, #8
 8000b6e:	4878      	ldr	r0, [pc, #480]	; (8000d50 <display7SEG+0x31c>)
 8000b70:	f001 f965 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin ,SET) ;
 8000b74:	2201      	movs	r2, #1
 8000b76:	2110      	movs	r1, #16
 8000b78:	4875      	ldr	r0, [pc, #468]	; (8000d50 <display7SEG+0x31c>)
 8000b7a:	f001 f960 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin ,SET );
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2120      	movs	r1, #32
 8000b82:	4873      	ldr	r0, [pc, #460]	; (8000d50 <display7SEG+0x31c>)
 8000b84:	f001 f95b 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin ,RESET) ;
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2140      	movs	r1, #64	; 0x40
 8000b8c:	4870      	ldr	r0, [pc, #448]	; (8000d50 <display7SEG+0x31c>)
 8000b8e:	f001 f956 	bl	8001e3e <HAL_GPIO_WritePin>
	    break;
 8000b92:	e0d8      	b.n	8000d46 <display7SEG+0x312>
	  case 4:
		  HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin ,SET) ;
 8000b94:	2201      	movs	r2, #1
 8000b96:	2101      	movs	r1, #1
 8000b98:	486d      	ldr	r0, [pc, #436]	; (8000d50 <display7SEG+0x31c>)
 8000b9a:	f001 f950 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin ,RESET );
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	486b      	ldr	r0, [pc, #428]	; (8000d50 <display7SEG+0x31c>)
 8000ba4:	f001 f94b 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin ,RESET) ;
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2104      	movs	r1, #4
 8000bac:	4868      	ldr	r0, [pc, #416]	; (8000d50 <display7SEG+0x31c>)
 8000bae:	f001 f946 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin ,SET );
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2108      	movs	r1, #8
 8000bb6:	4866      	ldr	r0, [pc, #408]	; (8000d50 <display7SEG+0x31c>)
 8000bb8:	f001 f941 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin ,SET) ;
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2110      	movs	r1, #16
 8000bc0:	4863      	ldr	r0, [pc, #396]	; (8000d50 <display7SEG+0x31c>)
 8000bc2:	f001 f93c 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin ,RESET );
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2120      	movs	r1, #32
 8000bca:	4861      	ldr	r0, [pc, #388]	; (8000d50 <display7SEG+0x31c>)
 8000bcc:	f001 f937 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin ,RESET) ;
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2140      	movs	r1, #64	; 0x40
 8000bd4:	485e      	ldr	r0, [pc, #376]	; (8000d50 <display7SEG+0x31c>)
 8000bd6:	f001 f932 	bl	8001e3e <HAL_GPIO_WritePin>
	  	break;
 8000bda:	e0b4      	b.n	8000d46 <display7SEG+0x312>
	  case 5:
		  HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin ,RESET) ;
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2101      	movs	r1, #1
 8000be0:	485b      	ldr	r0, [pc, #364]	; (8000d50 <display7SEG+0x31c>)
 8000be2:	f001 f92c 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin ,SET );
 8000be6:	2201      	movs	r2, #1
 8000be8:	2102      	movs	r1, #2
 8000bea:	4859      	ldr	r0, [pc, #356]	; (8000d50 <display7SEG+0x31c>)
 8000bec:	f001 f927 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin ,RESET) ;
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2104      	movs	r1, #4
 8000bf4:	4856      	ldr	r0, [pc, #344]	; (8000d50 <display7SEG+0x31c>)
 8000bf6:	f001 f922 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin ,RESET );
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2108      	movs	r1, #8
 8000bfe:	4854      	ldr	r0, [pc, #336]	; (8000d50 <display7SEG+0x31c>)
 8000c00:	f001 f91d 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin ,SET) ;
 8000c04:	2201      	movs	r2, #1
 8000c06:	2110      	movs	r1, #16
 8000c08:	4851      	ldr	r0, [pc, #324]	; (8000d50 <display7SEG+0x31c>)
 8000c0a:	f001 f918 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin ,RESET );
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2120      	movs	r1, #32
 8000c12:	484f      	ldr	r0, [pc, #316]	; (8000d50 <display7SEG+0x31c>)
 8000c14:	f001 f913 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin ,RESET) ;
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2140      	movs	r1, #64	; 0x40
 8000c1c:	484c      	ldr	r0, [pc, #304]	; (8000d50 <display7SEG+0x31c>)
 8000c1e:	f001 f90e 	bl	8001e3e <HAL_GPIO_WritePin>
	    break;
 8000c22:	e090      	b.n	8000d46 <display7SEG+0x312>
	  case 6:
		  HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin ,RESET) ;
 8000c24:	2200      	movs	r2, #0
 8000c26:	2101      	movs	r1, #1
 8000c28:	4849      	ldr	r0, [pc, #292]	; (8000d50 <display7SEG+0x31c>)
 8000c2a:	f001 f908 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin ,SET );
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2102      	movs	r1, #2
 8000c32:	4847      	ldr	r0, [pc, #284]	; (8000d50 <display7SEG+0x31c>)
 8000c34:	f001 f903 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin ,RESET) ;
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2104      	movs	r1, #4
 8000c3c:	4844      	ldr	r0, [pc, #272]	; (8000d50 <display7SEG+0x31c>)
 8000c3e:	f001 f8fe 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin ,RESET );
 8000c42:	2200      	movs	r2, #0
 8000c44:	2108      	movs	r1, #8
 8000c46:	4842      	ldr	r0, [pc, #264]	; (8000d50 <display7SEG+0x31c>)
 8000c48:	f001 f8f9 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin ,RESET) ;
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2110      	movs	r1, #16
 8000c50:	483f      	ldr	r0, [pc, #252]	; (8000d50 <display7SEG+0x31c>)
 8000c52:	f001 f8f4 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin ,RESET );
 8000c56:	2200      	movs	r2, #0
 8000c58:	2120      	movs	r1, #32
 8000c5a:	483d      	ldr	r0, [pc, #244]	; (8000d50 <display7SEG+0x31c>)
 8000c5c:	f001 f8ef 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin ,RESET) ;
 8000c60:	2200      	movs	r2, #0
 8000c62:	2140      	movs	r1, #64	; 0x40
 8000c64:	483a      	ldr	r0, [pc, #232]	; (8000d50 <display7SEG+0x31c>)
 8000c66:	f001 f8ea 	bl	8001e3e <HAL_GPIO_WritePin>
	    break;
 8000c6a:	e06c      	b.n	8000d46 <display7SEG+0x312>
	  case 7:
		  HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin ,RESET) ;
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2101      	movs	r1, #1
 8000c70:	4837      	ldr	r0, [pc, #220]	; (8000d50 <display7SEG+0x31c>)
 8000c72:	f001 f8e4 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin ,RESET );
 8000c76:	2200      	movs	r2, #0
 8000c78:	2102      	movs	r1, #2
 8000c7a:	4835      	ldr	r0, [pc, #212]	; (8000d50 <display7SEG+0x31c>)
 8000c7c:	f001 f8df 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin ,RESET) ;
 8000c80:	2200      	movs	r2, #0
 8000c82:	2104      	movs	r1, #4
 8000c84:	4832      	ldr	r0, [pc, #200]	; (8000d50 <display7SEG+0x31c>)
 8000c86:	f001 f8da 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin ,SET );
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2108      	movs	r1, #8
 8000c8e:	4830      	ldr	r0, [pc, #192]	; (8000d50 <display7SEG+0x31c>)
 8000c90:	f001 f8d5 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin ,SET) ;
 8000c94:	2201      	movs	r2, #1
 8000c96:	2110      	movs	r1, #16
 8000c98:	482d      	ldr	r0, [pc, #180]	; (8000d50 <display7SEG+0x31c>)
 8000c9a:	f001 f8d0 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin ,SET );
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2120      	movs	r1, #32
 8000ca2:	482b      	ldr	r0, [pc, #172]	; (8000d50 <display7SEG+0x31c>)
 8000ca4:	f001 f8cb 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin ,SET) ;
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2140      	movs	r1, #64	; 0x40
 8000cac:	4828      	ldr	r0, [pc, #160]	; (8000d50 <display7SEG+0x31c>)
 8000cae:	f001 f8c6 	bl	8001e3e <HAL_GPIO_WritePin>
	    break;
 8000cb2:	e048      	b.n	8000d46 <display7SEG+0x312>
	  case 8:
		  HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin ,RESET) ;
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4825      	ldr	r0, [pc, #148]	; (8000d50 <display7SEG+0x31c>)
 8000cba:	f001 f8c0 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin ,RESET );
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	4823      	ldr	r0, [pc, #140]	; (8000d50 <display7SEG+0x31c>)
 8000cc4:	f001 f8bb 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin ,RESET) ;
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2104      	movs	r1, #4
 8000ccc:	4820      	ldr	r0, [pc, #128]	; (8000d50 <display7SEG+0x31c>)
 8000cce:	f001 f8b6 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin ,RESET );
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2108      	movs	r1, #8
 8000cd6:	481e      	ldr	r0, [pc, #120]	; (8000d50 <display7SEG+0x31c>)
 8000cd8:	f001 f8b1 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin ,RESET) ;
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2110      	movs	r1, #16
 8000ce0:	481b      	ldr	r0, [pc, #108]	; (8000d50 <display7SEG+0x31c>)
 8000ce2:	f001 f8ac 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin ,RESET );
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2120      	movs	r1, #32
 8000cea:	4819      	ldr	r0, [pc, #100]	; (8000d50 <display7SEG+0x31c>)
 8000cec:	f001 f8a7 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin ,RESET) ;
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2140      	movs	r1, #64	; 0x40
 8000cf4:	4816      	ldr	r0, [pc, #88]	; (8000d50 <display7SEG+0x31c>)
 8000cf6:	f001 f8a2 	bl	8001e3e <HAL_GPIO_WritePin>
	    break;
 8000cfa:	e024      	b.n	8000d46 <display7SEG+0x312>
	  case 9:
		  HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin ,RESET) ;
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2101      	movs	r1, #1
 8000d00:	4813      	ldr	r0, [pc, #76]	; (8000d50 <display7SEG+0x31c>)
 8000d02:	f001 f89c 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin ,RESET );
 8000d06:	2200      	movs	r2, #0
 8000d08:	2102      	movs	r1, #2
 8000d0a:	4811      	ldr	r0, [pc, #68]	; (8000d50 <display7SEG+0x31c>)
 8000d0c:	f001 f897 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin ,RESET) ;
 8000d10:	2200      	movs	r2, #0
 8000d12:	2104      	movs	r1, #4
 8000d14:	480e      	ldr	r0, [pc, #56]	; (8000d50 <display7SEG+0x31c>)
 8000d16:	f001 f892 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin ,RESET );
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2108      	movs	r1, #8
 8000d1e:	480c      	ldr	r0, [pc, #48]	; (8000d50 <display7SEG+0x31c>)
 8000d20:	f001 f88d 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin ,SET) ;
 8000d24:	2201      	movs	r2, #1
 8000d26:	2110      	movs	r1, #16
 8000d28:	4809      	ldr	r0, [pc, #36]	; (8000d50 <display7SEG+0x31c>)
 8000d2a:	f001 f888 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin ,RESET );
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2120      	movs	r1, #32
 8000d32:	4807      	ldr	r0, [pc, #28]	; (8000d50 <display7SEG+0x31c>)
 8000d34:	f001 f883 	bl	8001e3e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin ,RESET) ;
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2140      	movs	r1, #64	; 0x40
 8000d3c:	4804      	ldr	r0, [pc, #16]	; (8000d50 <display7SEG+0x31c>)
 8000d3e:	f001 f87e 	bl	8001e3e <HAL_GPIO_WritePin>
	    break;
 8000d42:	e000      	b.n	8000d46 <display7SEG+0x312>
	  default:
		break;
 8000d44:	bf00      	nop

	}
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40010c00 	.word	0x40010c00

08000d54 <fsm_automatic_run>:
 *      Author: ntdat
 */

#include "fsm_automatic.h"

void fsm_automatic_run(){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	switch(status){
 8000d58:	4b67      	ldr	r3, [pc, #412]	; (8000ef8 <fsm_automatic_run+0x1a4>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	f200 80be 	bhi.w	8000ede <fsm_automatic_run+0x18a>
 8000d62:	a201      	add	r2, pc, #4	; (adr r2, 8000d68 <fsm_automatic_run+0x14>)
 8000d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d68:	08000d7d 	.word	0x08000d7d
 8000d6c:	08000de5 	.word	0x08000de5
 8000d70:	08000e21 	.word	0x08000e21
 8000d74:	08000e5d 	.word	0x08000e5d
 8000d78:	08000e99 	.word	0x08000e99
		case INIT:
					ledON();
 8000d7c:	f7ff fd24 	bl	80007c8 <ledON>
					updateClockBuffer(0, 8);
 8000d80:	2108      	movs	r1, #8
 8000d82:	2000      	movs	r0, #0
 8000d84:	f7ff fe44 	bl	8000a10 <updateClockBuffer>
					updateClockBuffer(1, 8);
 8000d88:	2108      	movs	r1, #8
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff fe40 	bl	8000a10 <updateClockBuffer>
					updateClockBuffer(2, 8);
 8000d90:	2108      	movs	r1, #8
 8000d92:	2002      	movs	r0, #2
 8000d94:	f7ff fe3c 	bl	8000a10 <updateClockBuffer>
					updateClockBuffer(3, 8);
 8000d98:	2108      	movs	r1, #8
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	f7ff fe38 	bl	8000a10 <updateClockBuffer>
					if(isButton1PRESS() == 1){
 8000da0:	f7ff fbc8 	bl	8000534 <isButton1PRESS>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	f040 809b 	bne.w	8000ee2 <fsm_automatic_run+0x18e>
						state_MODE1_x = 1;
 8000dac:	4b53      	ldr	r3, [pc, #332]	; (8000efc <fsm_automatic_run+0x1a8>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	601a      	str	r2, [r3, #0]
						state_MODE1_y = 2;
 8000db2:	4b53      	ldr	r3, [pc, #332]	; (8000f00 <fsm_automatic_run+0x1ac>)
 8000db4:	2202      	movs	r2, #2
 8000db6:	601a      	str	r2, [r3, #0]
						counter_x = 5;
 8000db8:	4b52      	ldr	r3, [pc, #328]	; (8000f04 <fsm_automatic_run+0x1b0>)
 8000dba:	2205      	movs	r2, #5
 8000dbc:	601a      	str	r2, [r3, #0]
						counter_y = 3;
 8000dbe:	4b52      	ldr	r3, [pc, #328]	; (8000f08 <fsm_automatic_run+0x1b4>)
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	601a      	str	r2, [r3, #0]
						updateClockBuffer(0, 0);
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f7ff fe22 	bl	8000a10 <updateClockBuffer>
						updateClockBuffer(1, 1);
 8000dcc:	2101      	movs	r1, #1
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f7ff fe1e 	bl	8000a10 <updateClockBuffer>
						setTimer1(1000);
 8000dd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dd8:	f000 f9e4 	bl	80011a4 <setTimer1>
						status = MODE_1;
 8000ddc:	4b46      	ldr	r3, [pc, #280]	; (8000ef8 <fsm_automatic_run+0x1a4>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
					}
					break;
 8000de2:	e07e      	b.n	8000ee2 <fsm_automatic_run+0x18e>
		case MODE_1:
					todoMODE1();
 8000de4:	f000 faf2 	bl	80013cc <todoMODE1>
					if(isButton1PRESS() == 1){
 8000de8:	f7ff fba4 	bl	8000534 <isButton1PRESS>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d179      	bne.n	8000ee6 <fsm_automatic_run+0x192>
						status = MODE_2;
 8000df2:	4b41      	ldr	r3, [pc, #260]	; (8000ef8 <fsm_automatic_run+0x1a4>)
 8000df4:	2202      	movs	r2, #2
 8000df6:	601a      	str	r2, [r3, #0]
						value = 0.5;
 8000df8:	4b44      	ldr	r3, [pc, #272]	; (8000f0c <fsm_automatic_run+0x1b8>)
 8000dfa:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000dfe:	601a      	str	r2, [r3, #0]
						temp = 0;
 8000e00:	4b43      	ldr	r3, [pc, #268]	; (8000f10 <fsm_automatic_run+0x1bc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
					    setTimer1(500);
 8000e06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e0a:	f000 f9cb 	bl	80011a4 <setTimer1>
						updateClockBuffer(0, 0);
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2000      	movs	r0, #0
 8000e12:	f7ff fdfd 	bl	8000a10 <updateClockBuffer>
					    updateClockBuffer(1, 2);
 8000e16:	2102      	movs	r1, #2
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f7ff fdf9 	bl	8000a10 <updateClockBuffer>
					}
					break;
 8000e1e:	e062      	b.n	8000ee6 <fsm_automatic_run+0x192>
		case MODE_2:
					todoMODE2();
 8000e20:	f000 fbae 	bl	8001580 <todoMODE2>
					if(isButton1PRESS() == 1){
 8000e24:	f7ff fb86 	bl	8000534 <isButton1PRESS>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d15d      	bne.n	8000eea <fsm_automatic_run+0x196>
						status = MODE_3;
 8000e2e:	4b32      	ldr	r3, [pc, #200]	; (8000ef8 <fsm_automatic_run+0x1a4>)
 8000e30:	2203      	movs	r2, #3
 8000e32:	601a      	str	r2, [r3, #0]
						value = 0.5;
 8000e34:	4b35      	ldr	r3, [pc, #212]	; (8000f0c <fsm_automatic_run+0x1b8>)
 8000e36:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000e3a:	601a      	str	r2, [r3, #0]
						temp = 0;
 8000e3c:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <fsm_automatic_run+0x1bc>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
					    setTimer1(500);
 8000e42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e46:	f000 f9ad 	bl	80011a4 <setTimer1>
						updateClockBuffer(0, 0);
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f7ff fddf 	bl	8000a10 <updateClockBuffer>
						updateClockBuffer(1, 3);
 8000e52:	2103      	movs	r1, #3
 8000e54:	2001      	movs	r0, #1
 8000e56:	f7ff fddb 	bl	8000a10 <updateClockBuffer>
					}
					break;
 8000e5a:	e046      	b.n	8000eea <fsm_automatic_run+0x196>
		case MODE_3:
					todoMODE3();
 8000e5c:	f000 fbf8 	bl	8001650 <todoMODE3>
					if(isButton1PRESS() == 1){
 8000e60:	f7ff fb68 	bl	8000534 <isButton1PRESS>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d141      	bne.n	8000eee <fsm_automatic_run+0x19a>
						status = MODE_4;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <fsm_automatic_run+0x1a4>)
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	601a      	str	r2, [r3, #0]
						value = 0.5;
 8000e70:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <fsm_automatic_run+0x1b8>)
 8000e72:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000e76:	601a      	str	r2, [r3, #0]
						temp = 0;
 8000e78:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <fsm_automatic_run+0x1bc>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
					    setTimer1(500);
 8000e7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e82:	f000 f98f 	bl	80011a4 <setTimer1>
						updateClockBuffer(0, 0);
 8000e86:	2100      	movs	r1, #0
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff fdc1 	bl	8000a10 <updateClockBuffer>
						updateClockBuffer(1, 4);
 8000e8e:	2104      	movs	r1, #4
 8000e90:	2001      	movs	r0, #1
 8000e92:	f7ff fdbd 	bl	8000a10 <updateClockBuffer>
					}
					break;
 8000e96:	e02a      	b.n	8000eee <fsm_automatic_run+0x19a>
		case MODE_4:
					todoMODE4();
 8000e98:	f000 fc42 	bl	8001720 <todoMODE4>
					if(isButton1PRESS() == 1){
 8000e9c:	f7ff fb4a 	bl	8000534 <isButton1PRESS>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d125      	bne.n	8000ef2 <fsm_automatic_run+0x19e>
						state_MODE1_x = 1;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <fsm_automatic_run+0x1a8>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]
						state_MODE1_y = 2;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <fsm_automatic_run+0x1ac>)
 8000eae:	2202      	movs	r2, #2
 8000eb0:	601a      	str	r2, [r3, #0]
						counter_x = 5;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <fsm_automatic_run+0x1b0>)
 8000eb4:	2205      	movs	r2, #5
 8000eb6:	601a      	str	r2, [r3, #0]
						counter_y = 3;
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <fsm_automatic_run+0x1b4>)
 8000eba:	2203      	movs	r2, #3
 8000ebc:	601a      	str	r2, [r3, #0]
						updateClockBuffer(0, 0);
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff fda5 	bl	8000a10 <updateClockBuffer>
						updateClockBuffer(1, 1);
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f7ff fda1 	bl	8000a10 <updateClockBuffer>
						setTimer1(1000);
 8000ece:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed2:	f000 f967 	bl	80011a4 <setTimer1>
						status = MODE_1;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <fsm_automatic_run+0x1a4>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	601a      	str	r2, [r3, #0]
					}
					break;
 8000edc:	e009      	b.n	8000ef2 <fsm_automatic_run+0x19e>
		default:
					break;
 8000ede:	bf00      	nop
 8000ee0:	e008      	b.n	8000ef4 <fsm_automatic_run+0x1a0>
					break;
 8000ee2:	bf00      	nop
 8000ee4:	e006      	b.n	8000ef4 <fsm_automatic_run+0x1a0>
					break;
 8000ee6:	bf00      	nop
 8000ee8:	e004      	b.n	8000ef4 <fsm_automatic_run+0x1a0>
					break;
 8000eea:	bf00      	nop
 8000eec:	e002      	b.n	8000ef4 <fsm_automatic_run+0x1a0>
					break;
 8000eee:	bf00      	nop
 8000ef0:	e000      	b.n	8000ef4 <fsm_automatic_run+0x1a0>
					break;
 8000ef2:	bf00      	nop
	}
};
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000006c 	.word	0x2000006c
 8000efc:	2000008c 	.word	0x2000008c
 8000f00:	20000090 	.word	0x20000090
 8000f04:	200000ec 	.word	0x200000ec
 8000f08:	200000f0 	.word	0x200000f0
 8000f0c:	20000038 	.word	0x20000038
 8000f10:	20000088 	.word	0x20000088

08000f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1a:	f000 fc8f 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1e:	f000 f845 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f22:	f000 f8cb 	bl	80010bc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f26:	f000 f87d 	bl	8001024 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000f2a:	481c      	ldr	r0, [pc, #112]	; (8000f9c <main+0x88>)
 8000f2c:	f001 fbd8 	bl	80026e0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000f30:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <main+0x8c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
  setTimer3(50);
 8000f36:	2032      	movs	r0, #50	; 0x32
 8000f38:	f000 f964 	bl	8001204 <setTimer3>
  int index = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f46:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <main+0x90>)
 8000f48:	f000 ff79 	bl	8001e3e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f52:	4814      	ldr	r0, [pc, #80]	; (8000fa4 <main+0x90>)
 8000f54:	f000 ff73 	bl	8001e3e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5e:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <main+0x90>)
 8000f60:	f000 ff6d 	bl	8001e3e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f6a:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <main+0x90>)
 8000f6c:	f000 ff67 	bl	8001e3e <HAL_GPIO_WritePin>
  while (1)
  {
	  fsm_automatic_run();
 8000f70:	f7ff fef0 	bl	8000d54 <fsm_automatic_run>
	  if(timer3_flag == 1){
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <main+0x94>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d1f9      	bne.n	8000f70 <main+0x5c>
		  update7SEG(index++);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fce0 	bl	8000948 <update7SEG>
		  if(index >= 4){
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	dd01      	ble.n	8000f92 <main+0x7e>
			  index = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
		  }
		  setTimer3(50);
 8000f92:	2032      	movs	r0, #50	; 0x32
 8000f94:	f000 f936 	bl	8001204 <setTimer3>
	  fsm_automatic_run();
 8000f98:	e7ea      	b.n	8000f70 <main+0x5c>
 8000f9a:	bf00      	nop
 8000f9c:	200000a4 	.word	0x200000a4
 8000fa0:	2000006c 	.word	0x2000006c
 8000fa4:	40010800 	.word	0x40010800
 8000fa8:	20000080 	.word	0x20000080

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b090      	sub	sp, #64	; 0x40
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0318 	add.w	r3, r7, #24
 8000fb6:	2228      	movs	r2, #40	; 0x28
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 ff48 	bl	8002e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd6:	2310      	movs	r3, #16
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fde:	f107 0318 	add.w	r3, r7, #24
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 ff44 	bl	8001e70 <HAL_RCC_OscConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fee:	f000 f8d3 	bl	8001198 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f001 f9b0 	bl	8002370 <HAL_RCC_ClockConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001016:	f000 f8bf 	bl	8001198 <Error_Handler>
  }
}
 800101a:	bf00      	nop
 800101c:	3740      	adds	r7, #64	; 0x40
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	463b      	mov	r3, r7
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001042:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001046:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <MX_TIM2_Init+0x94>)
 800104a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800104e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001058:	220a      	movs	r2, #10
 800105a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_TIM2_Init+0x94>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001068:	4813      	ldr	r0, [pc, #76]	; (80010b8 <MX_TIM2_Init+0x94>)
 800106a:	f001 fae9 	bl	8002640 <HAL_TIM_Base_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001074:	f000 f890 	bl	8001198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	4619      	mov	r1, r3
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001086:	f001 fc7f 	bl	8002988 <HAL_TIM_ConfigClockSource>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001090:	f000 f882 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_TIM2_Init+0x94>)
 80010a2:	f001 fe47 	bl	8002d34 <HAL_TIMEx_MasterConfigSynchronization>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010ac:	f000 f874 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200000a4 	.word	0x200000a4

080010bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b28      	ldr	r3, [pc, #160]	; (8001174 <MX_GPIO_Init+0xb8>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a27      	ldr	r2, [pc, #156]	; (8001174 <MX_GPIO_Init+0xb8>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b25      	ldr	r3, [pc, #148]	; (8001174 <MX_GPIO_Init+0xb8>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <MX_GPIO_Init+0xb8>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a21      	ldr	r2, [pc, #132]	; (8001174 <MX_GPIO_Init+0xb8>)
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <MX_GPIO_Init+0xb8>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_X_Pin|LED_YELLOW_X_Pin|LED_GREEN_X_Pin|LED_RED_Y_Pin
 8001100:	2200      	movs	r2, #0
 8001102:	f640 717e 	movw	r1, #3966	; 0xf7e
 8001106:	481c      	ldr	r0, [pc, #112]	; (8001178 <MX_GPIO_Init+0xbc>)
 8001108:	f000 fe99 	bl	8001e3e <HAL_GPIO_WritePin>
                          |LED_YELLOW_Y_Pin|LED_GREEN_Y_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|D_Pin
 800110c:	2200      	movs	r2, #0
 800110e:	217f      	movs	r1, #127	; 0x7f
 8001110:	481a      	ldr	r0, [pc, #104]	; (800117c <MX_GPIO_Init+0xc0>)
 8001112:	f000 fe94 	bl	8001e3e <HAL_GPIO_WritePin>
                          |E_Pin|F_Pin|G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_X_Pin LED_YELLOW_X_Pin LED_GREEN_X_Pin LED_RED_Y_Pin
                           LED_YELLOW_Y_Pin LED_GREEN_Y_Pin EN1_Pin EN2_Pin
                           EN3_Pin EN4_Pin */
  GPIO_InitStruct.Pin = LED_RED_X_Pin|LED_YELLOW_X_Pin|LED_GREEN_X_Pin|LED_RED_Y_Pin
 8001116:	f640 737e 	movw	r3, #3966	; 0xf7e
 800111a:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_Y_Pin|LED_GREEN_Y_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111c:	2301      	movs	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2302      	movs	r3, #2
 8001126:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	4619      	mov	r1, r3
 800112e:	4812      	ldr	r0, [pc, #72]	; (8001178 <MX_GPIO_Init+0xbc>)
 8001130:	f000 fcf4 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D_Pin
                           E_Pin F_Pin G_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D_Pin
 8001134:	237f      	movs	r3, #127	; 0x7f
 8001136:	60bb      	str	r3, [r7, #8]
                          |E_Pin|F_Pin|G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2302      	movs	r3, #2
 8001142:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001144:	f107 0308 	add.w	r3, r7, #8
 8001148:	4619      	mov	r1, r3
 800114a:	480c      	ldr	r0, [pc, #48]	; (800117c <MX_GPIO_Init+0xc0>)
 800114c:	f000 fce6 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8001150:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001154:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115a:	2301      	movs	r3, #1
 800115c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_GPIO_Init+0xc0>)
 8001166:	f000 fcd9 	bl	8001b1c <HAL_GPIO_Init>

}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000
 8001178:	40010800 	.word	0x40010800
 800117c:	40010c00 	.word	0x40010c00

08001180 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	timerRun();
 8001188:	f000 f850 	bl	800122c <timerRun>
	getKeyInput();
 800118c:	f7ff fa20 	bl	80005d0 <getKeyInput>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <Error_Handler+0x8>
	...

080011a4 <setTimer1>:
int timer2_counter = 0;
int timer3_flag = 0;
int timer3_counter = 0;


void setTimer1(int duration){
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	timer1_flag = 0;
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <setTimer1+0x2c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
	timer1_counter = duration /TICK;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <setTimer1+0x30>)
 80011b6:	fb82 1203 	smull	r1, r2, r2, r3
 80011ba:	1092      	asrs	r2, r2, #2
 80011bc:	17db      	asrs	r3, r3, #31
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <setTimer1+0x34>)
 80011c2:	6013      	str	r3, [r2, #0]
};
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000070 	.word	0x20000070
 80011d4:	66666667 	.word	0x66666667
 80011d8:	20000074 	.word	0x20000074

080011dc <setTimer2>:

void setTimer2(int duration){
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	timer2_flag = 0;
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <setTimer2+0x20>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
	timer2_counter = duration;
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <setTimer2+0x24>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6013      	str	r3, [r2, #0]
};
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000078 	.word	0x20000078
 8001200:	2000007c 	.word	0x2000007c

08001204 <setTimer3>:

void setTimer3(int duration){
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	timer3_flag = 0;
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <setTimer3+0x20>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
	timer3_counter = duration;
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <setTimer3+0x24>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6013      	str	r3, [r2, #0]
};
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000080 	.word	0x20000080
 8001228:	20000084 	.word	0x20000084

0800122c <timerRun>:

void timerRun(){
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <timerRun+0x6c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	dd0b      	ble.n	8001250 <timerRun+0x24>
		timer1_counter --;
 8001238:	4b17      	ldr	r3, [pc, #92]	; (8001298 <timerRun+0x6c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	3b01      	subs	r3, #1
 800123e:	4a16      	ldr	r2, [pc, #88]	; (8001298 <timerRun+0x6c>)
 8001240:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <timerRun+0x6c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	dc02      	bgt.n	8001250 <timerRun+0x24>
			timer1_flag = 1;
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <timerRun+0x70>)
 800124c:	2201      	movs	r2, #1
 800124e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <timerRun+0x74>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	dd0b      	ble.n	8001270 <timerRun+0x44>
			timer2_counter --;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <timerRun+0x74>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3b01      	subs	r3, #1
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <timerRun+0x74>)
 8001260:	6013      	str	r3, [r2, #0]
			if(timer2_counter <= 0){
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <timerRun+0x74>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	dc02      	bgt.n	8001270 <timerRun+0x44>
				timer2_flag = 1;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <timerRun+0x78>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]
			}
	}
	if(timer3_counter > 0){
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <timerRun+0x7c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	dd0b      	ble.n	8001290 <timerRun+0x64>
				timer3_counter --;
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <timerRun+0x7c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3b01      	subs	r3, #1
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <timerRun+0x7c>)
 8001280:	6013      	str	r3, [r2, #0]
				if(timer3_counter <= 0){
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <timerRun+0x7c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	dc02      	bgt.n	8001290 <timerRun+0x64>
					timer3_flag = 1;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <timerRun+0x80>)
 800128c:	2201      	movs	r2, #1
 800128e:	601a      	str	r2, [r3, #0]
				}
	}
};
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	20000074 	.word	0x20000074
 800129c:	20000070 	.word	0x20000070
 80012a0:	2000007c 	.word	0x2000007c
 80012a4:	20000078 	.word	0x20000078
 80012a8:	20000084 	.word	0x20000084
 80012ac:	20000080 	.word	0x20000080

080012b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_MspInit+0x5c>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	4a14      	ldr	r2, [pc, #80]	; (800130c <HAL_MspInit+0x5c>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6193      	str	r3, [r2, #24]
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_MspInit+0x5c>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <HAL_MspInit+0x5c>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <HAL_MspInit+0x5c>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d8:	61d3      	str	r3, [r2, #28]
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <HAL_MspInit+0x5c>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_MspInit+0x60>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	4a04      	ldr	r2, [pc, #16]	; (8001310 <HAL_MspInit+0x60>)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	40021000 	.word	0x40021000
 8001310:	40010000 	.word	0x40010000

08001314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001324:	d113      	bne.n	800134e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_TIM_Base_MspInit+0x44>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <HAL_TIM_Base_MspInit+0x44>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	61d3      	str	r3, [r2, #28]
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_TIM_Base_MspInit+0x44>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	201c      	movs	r0, #28
 8001344:	f000 fbb3 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001348:	201c      	movs	r0, #28
 800134a:	f000 fbcc 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <NMI_Handler+0x4>

08001362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <MemManage_Handler+0x4>

0800136e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <UsageFault_Handler+0x4>

0800137a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr

08001386 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr

08001392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a2:	f000 fa91 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <TIM2_IRQHandler+0x10>)
 80013b2:	f001 f9e1 	bl	8002778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200000a4 	.word	0x200000a4

080013c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <todoMODE1>:
int state_MODE2 = 0;
int state_MODE3 = 0;
int state_MODE4 = 0;
int counter_x;
int counter_y;
void todoMODE1(){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	if(timer1_flag == 1){
 80013d0:	4b66      	ldr	r3, [pc, #408]	; (800156c <todoMODE1+0x1a0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d10d      	bne.n	80013f4 <todoMODE1+0x28>
		counter_x--;
 80013d8:	4b65      	ldr	r3, [pc, #404]	; (8001570 <todoMODE1+0x1a4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3b01      	subs	r3, #1
 80013de:	4a64      	ldr	r2, [pc, #400]	; (8001570 <todoMODE1+0x1a4>)
 80013e0:	6013      	str	r3, [r2, #0]
		counter_y--;
 80013e2:	4b64      	ldr	r3, [pc, #400]	; (8001574 <todoMODE1+0x1a8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	4a62      	ldr	r2, [pc, #392]	; (8001574 <todoMODE1+0x1a8>)
 80013ea:	6013      	str	r3, [r2, #0]
		setTimer1(1000);
 80013ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013f0:	f7ff fed8 	bl	80011a4 <setTimer1>
	}
	switch (state_MODE1_x){
 80013f4:	4b60      	ldr	r3, [pc, #384]	; (8001578 <todoMODE1+0x1ac>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d84f      	bhi.n	800149c <todoMODE1+0xd0>
 80013fc:	a201      	add	r2, pc, #4	; (adr r2, 8001404 <todoMODE1+0x38>)
 80013fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001402:	bf00      	nop
 8001404:	08001415 	.word	0x08001415
 8001408:	0800142b 	.word	0x0800142b
 800140c:	08001451 	.word	0x08001451
 8001410:	08001477 	.word	0x08001477
		case 0 :
			if(timer1_flag == 1){
 8001414:	4b55      	ldr	r3, [pc, #340]	; (800156c <todoMODE1+0x1a0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d141      	bne.n	80014a0 <todoMODE1+0xd4>
				counter_x = 5;
 800141c:	4b54      	ldr	r3, [pc, #336]	; (8001570 <todoMODE1+0x1a4>)
 800141e:	2205      	movs	r2, #5
 8001420:	601a      	str	r2, [r3, #0]
				state_MODE1_x = 1;
 8001422:	4b55      	ldr	r3, [pc, #340]	; (8001578 <todoMODE1+0x1ac>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]
			}
			break;
 8001428:	e03a      	b.n	80014a0 <todoMODE1+0xd4>
		case 1:
			ledredON_x();
 800142a:	f7ff f9f1 	bl	8000810 <ledredON_x>
			updateClockBuffer(2, counter_x);
 800142e:	4b50      	ldr	r3, [pc, #320]	; (8001570 <todoMODE1+0x1a4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	2002      	movs	r0, #2
 8001436:	f7ff faeb 	bl	8000a10 <updateClockBuffer>
			if(counter_x == 0){
 800143a:	4b4d      	ldr	r3, [pc, #308]	; (8001570 <todoMODE1+0x1a4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d130      	bne.n	80014a4 <todoMODE1+0xd8>
				counter_x = 3;
 8001442:	4b4b      	ldr	r3, [pc, #300]	; (8001570 <todoMODE1+0x1a4>)
 8001444:	2203      	movs	r2, #3
 8001446:	601a      	str	r2, [r3, #0]
				state_MODE1_x = 2;
 8001448:	4b4b      	ldr	r3, [pc, #300]	; (8001578 <todoMODE1+0x1ac>)
 800144a:	2202      	movs	r2, #2
 800144c:	601a      	str	r2, [r3, #0]
			}
			break;
 800144e:	e029      	b.n	80014a4 <todoMODE1+0xd8>
		case 2:
			ledgreenON_x();
 8001450:	f7ff f9f4 	bl	800083c <ledgreenON_x>
			updateClockBuffer(2,counter_x );
 8001454:	4b46      	ldr	r3, [pc, #280]	; (8001570 <todoMODE1+0x1a4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	2002      	movs	r0, #2
 800145c:	f7ff fad8 	bl	8000a10 <updateClockBuffer>
			if(counter_x == 0){
 8001460:	4b43      	ldr	r3, [pc, #268]	; (8001570 <todoMODE1+0x1a4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d11f      	bne.n	80014a8 <todoMODE1+0xdc>
				counter_x = 2;
 8001468:	4b41      	ldr	r3, [pc, #260]	; (8001570 <todoMODE1+0x1a4>)
 800146a:	2202      	movs	r2, #2
 800146c:	601a      	str	r2, [r3, #0]
				state_MODE1_x = 3;
 800146e:	4b42      	ldr	r3, [pc, #264]	; (8001578 <todoMODE1+0x1ac>)
 8001470:	2203      	movs	r2, #3
 8001472:	601a      	str	r2, [r3, #0]
			}
			break;
 8001474:	e018      	b.n	80014a8 <todoMODE1+0xdc>
		case 3:
			ledyellowON_x();
 8001476:	f7ff f9f7 	bl	8000868 <ledyellowON_x>
			updateClockBuffer(2, counter_x);
 800147a:	4b3d      	ldr	r3, [pc, #244]	; (8001570 <todoMODE1+0x1a4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4619      	mov	r1, r3
 8001480:	2002      	movs	r0, #2
 8001482:	f7ff fac5 	bl	8000a10 <updateClockBuffer>
			if(counter_x == 0){
 8001486:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <todoMODE1+0x1a4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10e      	bne.n	80014ac <todoMODE1+0xe0>
				counter_x = 5;
 800148e:	4b38      	ldr	r3, [pc, #224]	; (8001570 <todoMODE1+0x1a4>)
 8001490:	2205      	movs	r2, #5
 8001492:	601a      	str	r2, [r3, #0]
				state_MODE1_x = 1;
 8001494:	4b38      	ldr	r3, [pc, #224]	; (8001578 <todoMODE1+0x1ac>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]
			}
			break;
 800149a:	e007      	b.n	80014ac <todoMODE1+0xe0>
		default:
			break;
 800149c:	bf00      	nop
 800149e:	e006      	b.n	80014ae <todoMODE1+0xe2>
			break;
 80014a0:	bf00      	nop
 80014a2:	e004      	b.n	80014ae <todoMODE1+0xe2>
			break;
 80014a4:	bf00      	nop
 80014a6:	e002      	b.n	80014ae <todoMODE1+0xe2>
			break;
 80014a8:	bf00      	nop
 80014aa:	e000      	b.n	80014ae <todoMODE1+0xe2>
			break;
 80014ac:	bf00      	nop

	}
	switch (state_MODE1_y){
 80014ae:	4b33      	ldr	r3, [pc, #204]	; (800157c <todoMODE1+0x1b0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d84e      	bhi.n	8001554 <todoMODE1+0x188>
 80014b6:	a201      	add	r2, pc, #4	; (adr r2, 80014bc <todoMODE1+0xf0>)
 80014b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014bc:	080014cd 	.word	0x080014cd
 80014c0:	080014e3 	.word	0x080014e3
 80014c4:	08001509 	.word	0x08001509
 80014c8:	0800152f 	.word	0x0800152f
		case 0 :
			if(timer1_flag == 1){
 80014cc:	4b27      	ldr	r3, [pc, #156]	; (800156c <todoMODE1+0x1a0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d141      	bne.n	8001558 <todoMODE1+0x18c>
				counter_y = 3;
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <todoMODE1+0x1a8>)
 80014d6:	2203      	movs	r2, #3
 80014d8:	601a      	str	r2, [r3, #0]
				state_MODE1_y = 2;
 80014da:	4b28      	ldr	r3, [pc, #160]	; (800157c <todoMODE1+0x1b0>)
 80014dc:	2202      	movs	r2, #2
 80014de:	601a      	str	r2, [r3, #0]
			}
			break;
 80014e0:	e03a      	b.n	8001558 <todoMODE1+0x18c>
		case 1:
			ledredON_y();
 80014e2:	f7ff f9d7 	bl	8000894 <ledredON_y>
			updateClockBuffer(3, counter_y);
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <todoMODE1+0x1a8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4619      	mov	r1, r3
 80014ec:	2003      	movs	r0, #3
 80014ee:	f7ff fa8f 	bl	8000a10 <updateClockBuffer>
			if(counter_y == 0){
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <todoMODE1+0x1a8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d130      	bne.n	800155c <todoMODE1+0x190>
				counter_y = 3;
 80014fa:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <todoMODE1+0x1a8>)
 80014fc:	2203      	movs	r2, #3
 80014fe:	601a      	str	r2, [r3, #0]
				state_MODE1_y = 2;
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <todoMODE1+0x1b0>)
 8001502:	2202      	movs	r2, #2
 8001504:	601a      	str	r2, [r3, #0]
			}
			break;
 8001506:	e029      	b.n	800155c <todoMODE1+0x190>
		case 2:
			ledgreenON_y();
 8001508:	f7ff f9da 	bl	80008c0 <ledgreenON_y>
			updateClockBuffer(3, counter_y);
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <todoMODE1+0x1a8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	2003      	movs	r0, #3
 8001514:	f7ff fa7c 	bl	8000a10 <updateClockBuffer>
			if(counter_y == 0){
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <todoMODE1+0x1a8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d11f      	bne.n	8001560 <todoMODE1+0x194>
				counter_y = 2;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <todoMODE1+0x1a8>)
 8001522:	2202      	movs	r2, #2
 8001524:	601a      	str	r2, [r3, #0]
				state_MODE1_y = 3;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <todoMODE1+0x1b0>)
 8001528:	2203      	movs	r2, #3
 800152a:	601a      	str	r2, [r3, #0]
			}
			break;
 800152c:	e018      	b.n	8001560 <todoMODE1+0x194>
		case 3:
			ledyellowON_y();
 800152e:	f7ff f9dd 	bl	80008ec <ledyellowON_y>
			updateClockBuffer(3, counter_y );
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <todoMODE1+0x1a8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4619      	mov	r1, r3
 8001538:	2003      	movs	r0, #3
 800153a:	f7ff fa69 	bl	8000a10 <updateClockBuffer>
			if(counter_y == 0){
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <todoMODE1+0x1a8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10e      	bne.n	8001564 <todoMODE1+0x198>
				counter_y = 5;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <todoMODE1+0x1a8>)
 8001548:	2205      	movs	r2, #5
 800154a:	601a      	str	r2, [r3, #0]
				state_MODE1_y = 1;
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <todoMODE1+0x1b0>)
 800154e:	2201      	movs	r2, #1
 8001550:	601a      	str	r2, [r3, #0]
			}
			break;
 8001552:	e007      	b.n	8001564 <todoMODE1+0x198>
		default:
			break;
 8001554:	bf00      	nop
 8001556:	e006      	b.n	8001566 <todoMODE1+0x19a>
			break;
 8001558:	bf00      	nop
 800155a:	e004      	b.n	8001566 <todoMODE1+0x19a>
			break;
 800155c:	bf00      	nop
 800155e:	e002      	b.n	8001566 <todoMODE1+0x19a>
			break;
 8001560:	bf00      	nop
 8001562:	e000      	b.n	8001566 <todoMODE1+0x19a>
			break;
 8001564:	bf00      	nop

	}
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000070 	.word	0x20000070
 8001570:	200000ec 	.word	0x200000ec
 8001574:	200000f0 	.word	0x200000f0
 8001578:	2000008c 	.word	0x2000008c
 800157c:	20000090 	.word	0x20000090

08001580 <todoMODE2>:

void todoMODE2(){
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	updateClockBuffer(2, temp/10);
 8001584:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <todoMODE2+0xb8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a2c      	ldr	r2, [pc, #176]	; (800163c <todoMODE2+0xbc>)
 800158a:	fb82 1203 	smull	r1, r2, r2, r3
 800158e:	1092      	asrs	r2, r2, #2
 8001590:	17db      	asrs	r3, r3, #31
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	4619      	mov	r1, r3
 8001596:	2002      	movs	r0, #2
 8001598:	f7ff fa3a 	bl	8000a10 <updateClockBuffer>
	updateClockBuffer(3, temp%10);
 800159c:	4b26      	ldr	r3, [pc, #152]	; (8001638 <todoMODE2+0xb8>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b26      	ldr	r3, [pc, #152]	; (800163c <todoMODE2+0xbc>)
 80015a2:	fb83 1302 	smull	r1, r3, r3, r2
 80015a6:	1099      	asrs	r1, r3, #2
 80015a8:	17d3      	asrs	r3, r2, #31
 80015aa:	1ac9      	subs	r1, r1, r3
 80015ac:	460b      	mov	r3, r1
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	1ad1      	subs	r1, r2, r3
 80015b6:	2003      	movs	r0, #3
 80015b8:	f7ff fa2a 	bl	8000a10 <updateClockBuffer>
	if(timer1_flag == 1){
 80015bc:	4b20      	ldr	r3, [pc, #128]	; (8001640 <todoMODE2+0xc0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d112      	bne.n	80015ea <todoMODE2+0x6a>
		ledredON();
 80015c4:	f7ff f9a8 	bl	8000918 <ledredON>
		setTimer2(5);
 80015c8:	2005      	movs	r0, #5
 80015ca:	f7ff fe07 	bl	80011dc <setTimer2>
		setTimer1(value*1000);
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <todoMODE2+0xc4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	491d      	ldr	r1, [pc, #116]	; (8001648 <todoMODE2+0xc8>)
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe fdb9 	bl	800014c <__aeabi_fmul>
 80015da:	4603      	mov	r3, r0
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ff77 	bl	80004d0 <__aeabi_f2iz>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fddd 	bl	80011a4 <setTimer1>
	}
	if(timer2_flag == 1){
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <todoMODE2+0xcc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d101      	bne.n	80015f6 <todoMODE2+0x76>
		ledOFF();
 80015f2:	f7ff f8c5 	bl	8000780 <ledOFF>
	}
	if(isButton2PRESS() == 1){
 80015f6:	f7fe ffbb 	bl	8000570 <isButton2PRESS>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d10b      	bne.n	8001618 <todoMODE2+0x98>
		temp ++;
 8001600:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <todoMODE2+0xb8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	4a0c      	ldr	r2, [pc, #48]	; (8001638 <todoMODE2+0xb8>)
 8001608:	6013      	str	r3, [r2, #0]
		if(temp >= 100){
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <todoMODE2+0xb8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b63      	cmp	r3, #99	; 0x63
 8001610:	dd02      	ble.n	8001618 <todoMODE2+0x98>
			temp = 1;
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <todoMODE2+0xb8>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]
		}
	}
	if(isButton3PRESS() == 1){
 8001618:	f7fe ffc8 	bl	80005ac <isButton3PRESS>
 800161c:	4603      	mov	r3, r0
 800161e:	2b01      	cmp	r3, #1
 8001620:	d107      	bne.n	8001632 <todoMODE2+0xb2>
		value = temp;
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <todoMODE2+0xb8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fefe 	bl	8000428 <__aeabi_i2f>
 800162c:	4603      	mov	r3, r0
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <todoMODE2+0xc4>)
 8001630:	6013      	str	r3, [r2, #0]
	}
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000088 	.word	0x20000088
 800163c:	66666667 	.word	0x66666667
 8001640:	20000070 	.word	0x20000070
 8001644:	20000038 	.word	0x20000038
 8001648:	447a0000 	.word	0x447a0000
 800164c:	20000078 	.word	0x20000078

08001650 <todoMODE3>:

void todoMODE3(){
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	updateClockBuffer(2, temp/10);
 8001654:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <todoMODE3+0xb8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a2c      	ldr	r2, [pc, #176]	; (800170c <todoMODE3+0xbc>)
 800165a:	fb82 1203 	smull	r1, r2, r2, r3
 800165e:	1092      	asrs	r2, r2, #2
 8001660:	17db      	asrs	r3, r3, #31
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	4619      	mov	r1, r3
 8001666:	2002      	movs	r0, #2
 8001668:	f7ff f9d2 	bl	8000a10 <updateClockBuffer>
	updateClockBuffer(3, temp%10);
 800166c:	4b26      	ldr	r3, [pc, #152]	; (8001708 <todoMODE3+0xb8>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b26      	ldr	r3, [pc, #152]	; (800170c <todoMODE3+0xbc>)
 8001672:	fb83 1302 	smull	r1, r3, r3, r2
 8001676:	1099      	asrs	r1, r3, #2
 8001678:	17d3      	asrs	r3, r2, #31
 800167a:	1ac9      	subs	r1, r1, r3
 800167c:	460b      	mov	r3, r1
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	1ad1      	subs	r1, r2, r3
 8001686:	2003      	movs	r0, #3
 8001688:	f7ff f9c2 	bl	8000a10 <updateClockBuffer>
	if(timer1_flag == 1){
 800168c:	4b20      	ldr	r3, [pc, #128]	; (8001710 <todoMODE3+0xc0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d112      	bne.n	80016ba <todoMODE3+0x6a>
		ledyellowON();
 8001694:	f7ff f950 	bl	8000938 <ledyellowON>
		setTimer2(5);
 8001698:	2005      	movs	r0, #5
 800169a:	f7ff fd9f 	bl	80011dc <setTimer2>
		setTimer1(value*1000);
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <todoMODE3+0xc4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	491d      	ldr	r1, [pc, #116]	; (8001718 <todoMODE3+0xc8>)
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe fd51 	bl	800014c <__aeabi_fmul>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff0f 	bl	80004d0 <__aeabi_f2iz>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fd75 	bl	80011a4 <setTimer1>
	}
	if(timer2_flag == 1){
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <todoMODE3+0xcc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <todoMODE3+0x76>
		ledOFF();
 80016c2:	f7ff f85d 	bl	8000780 <ledOFF>
	}
	if(isButton2PRESS() == 1){
 80016c6:	f7fe ff53 	bl	8000570 <isButton2PRESS>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d10b      	bne.n	80016e8 <todoMODE3+0x98>
		temp ++;
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <todoMODE3+0xb8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	4a0c      	ldr	r2, [pc, #48]	; (8001708 <todoMODE3+0xb8>)
 80016d8:	6013      	str	r3, [r2, #0]
		if(temp >= 100){
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <todoMODE3+0xb8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b63      	cmp	r3, #99	; 0x63
 80016e0:	dd02      	ble.n	80016e8 <todoMODE3+0x98>
			temp = 1;
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <todoMODE3+0xb8>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	601a      	str	r2, [r3, #0]
		}
	}
	if(isButton3PRESS() == 1){
 80016e8:	f7fe ff60 	bl	80005ac <isButton3PRESS>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d107      	bne.n	8001702 <todoMODE3+0xb2>
		value = temp;
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <todoMODE3+0xb8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe fe96 	bl	8000428 <__aeabi_i2f>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <todoMODE3+0xc4>)
 8001700:	6013      	str	r3, [r2, #0]
	}
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000088 	.word	0x20000088
 800170c:	66666667 	.word	0x66666667
 8001710:	20000070 	.word	0x20000070
 8001714:	20000038 	.word	0x20000038
 8001718:	447a0000 	.word	0x447a0000
 800171c:	20000078 	.word	0x20000078

08001720 <todoMODE4>:

void todoMODE4(){
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	updateClockBuffer(2, temp/10);
 8001724:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <todoMODE4+0xb8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a2c      	ldr	r2, [pc, #176]	; (80017dc <todoMODE4+0xbc>)
 800172a:	fb82 1203 	smull	r1, r2, r2, r3
 800172e:	1092      	asrs	r2, r2, #2
 8001730:	17db      	asrs	r3, r3, #31
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	4619      	mov	r1, r3
 8001736:	2002      	movs	r0, #2
 8001738:	f7ff f96a 	bl	8000a10 <updateClockBuffer>
	updateClockBuffer(3, temp%10);
 800173c:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <todoMODE4+0xb8>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b26      	ldr	r3, [pc, #152]	; (80017dc <todoMODE4+0xbc>)
 8001742:	fb83 1302 	smull	r1, r3, r3, r2
 8001746:	1099      	asrs	r1, r3, #2
 8001748:	17d3      	asrs	r3, r2, #31
 800174a:	1ac9      	subs	r1, r1, r3
 800174c:	460b      	mov	r3, r1
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	1ad1      	subs	r1, r2, r3
 8001756:	2003      	movs	r0, #3
 8001758:	f7ff f95a 	bl	8000a10 <updateClockBuffer>
	if(timer1_flag == 1){
 800175c:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <todoMODE4+0xc0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d112      	bne.n	800178a <todoMODE4+0x6a>
		ledgreenON();
 8001764:	f7ff f8e0 	bl	8000928 <ledgreenON>
		setTimer2(5);
 8001768:	2005      	movs	r0, #5
 800176a:	f7ff fd37 	bl	80011dc <setTimer2>
		setTimer1(value*1000);
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <todoMODE4+0xc4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	491d      	ldr	r1, [pc, #116]	; (80017e8 <todoMODE4+0xc8>)
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fce9 	bl	800014c <__aeabi_fmul>
 800177a:	4603      	mov	r3, r0
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fea7 	bl	80004d0 <__aeabi_f2iz>
 8001782:	4603      	mov	r3, r0
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fd0d 	bl	80011a4 <setTimer1>
	}
	if(timer2_flag == 1){
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <todoMODE4+0xcc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <todoMODE4+0x76>
		ledOFF();
 8001792:	f7fe fff5 	bl	8000780 <ledOFF>
	}
	if(isButton2PRESS() == 1){
 8001796:	f7fe feeb 	bl	8000570 <isButton2PRESS>
 800179a:	4603      	mov	r3, r0
 800179c:	2b01      	cmp	r3, #1
 800179e:	d10b      	bne.n	80017b8 <todoMODE4+0x98>
		temp ++;
 80017a0:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <todoMODE4+0xb8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <todoMODE4+0xb8>)
 80017a8:	6013      	str	r3, [r2, #0]
		if(temp >= 100){
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <todoMODE4+0xb8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b63      	cmp	r3, #99	; 0x63
 80017b0:	dd02      	ble.n	80017b8 <todoMODE4+0x98>
			temp = 1;
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <todoMODE4+0xb8>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
		}
	}
	if(isButton3PRESS() == 1){
 80017b8:	f7fe fef8 	bl	80005ac <isButton3PRESS>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <todoMODE4+0xb2>
		value = temp;
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <todoMODE4+0xb8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fe2e 	bl	8000428 <__aeabi_i2f>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <todoMODE4+0xc4>)
 80017d0:	6013      	str	r3, [r2, #0]
	}
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000088 	.word	0x20000088
 80017dc:	66666667 	.word	0x66666667
 80017e0:	20000070 	.word	0x20000070
 80017e4:	20000038 	.word	0x20000038
 80017e8:	447a0000 	.word	0x447a0000
 80017ec:	20000078 	.word	0x20000078

080017f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017f2:	490d      	ldr	r1, [pc, #52]	; (8001828 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001808:	4c0a      	ldr	r4, [pc, #40]	; (8001834 <LoopFillZerobss+0x22>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001816:	f7ff fdd3 	bl	80013c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181a:	f001 faf5 	bl	8002e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800181e:	f7ff fb79 	bl	8000f14 <main>
  bx lr
 8001822:	4770      	bx	lr
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 800182c:	08002ea0 	.word	0x08002ea0
  ldr r2, =_sbss
 8001830:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8001834:	200000f8 	.word	0x200000f8

08001838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC1_2_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_Init+0x28>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_Init+0x28>)
 8001846:	f043 0310 	orr.w	r3, r3, #16
 800184a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184c:	2003      	movs	r0, #3
 800184e:	f000 f923 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001852:	200f      	movs	r0, #15
 8001854:	f000 f808 	bl	8001868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001858:	f7ff fd2a 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40022000 	.word	0x40022000

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_InitTick+0x54>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_InitTick+0x58>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f93b 	bl	8001b02 <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e00e      	b.n	80018b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d80a      	bhi.n	80018b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f000 f903 	bl	8001aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <HAL_InitTick+0x5c>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000034 	.word	0x20000034
 80018c0:	20000040 	.word	0x20000040
 80018c4:	2000003c 	.word	0x2000003c

080018c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_IncTick+0x1c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_IncTick+0x20>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a03      	ldr	r2, [pc, #12]	; (80018e8 <HAL_IncTick+0x20>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	20000040 	.word	0x20000040
 80018e8:	200000f4 	.word	0x200000f4

080018ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b02      	ldr	r3, [pc, #8]	; (80018fc <HAL_GetTick+0x10>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	200000f4 	.word	0x200000f4

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4906      	ldr	r1, [pc, #24]	; (8001998 <__NVIC_EnableIRQ+0x34>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a64:	d301      	bcc.n	8001a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00f      	b.n	8001a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <SysTick_Config+0x40>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a72:	210f      	movs	r1, #15
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f7ff ff90 	bl	800199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <SysTick_Config+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <SysTick_Config+0x40>)
 8001a84:	2207      	movs	r2, #7
 8001a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff2d 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac0:	f7ff ff42 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	f7ff ff90 	bl	80019f0 <NVIC_EncodePriority>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff5f 	bl	800199c <__NVIC_SetPriority>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff35 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffa2 	bl	8001a54 <SysTick_Config>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b08b      	sub	sp, #44	; 0x2c
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2e:	e148      	b.n	8001dc2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b30:	2201      	movs	r2, #1
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f040 8137 	bne.w	8001dbc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4aa3      	ldr	r2, [pc, #652]	; (8001de0 <HAL_GPIO_Init+0x2c4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d05e      	beq.n	8001c16 <HAL_GPIO_Init+0xfa>
 8001b58:	4aa1      	ldr	r2, [pc, #644]	; (8001de0 <HAL_GPIO_Init+0x2c4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d875      	bhi.n	8001c4a <HAL_GPIO_Init+0x12e>
 8001b5e:	4aa1      	ldr	r2, [pc, #644]	; (8001de4 <HAL_GPIO_Init+0x2c8>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d058      	beq.n	8001c16 <HAL_GPIO_Init+0xfa>
 8001b64:	4a9f      	ldr	r2, [pc, #636]	; (8001de4 <HAL_GPIO_Init+0x2c8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d86f      	bhi.n	8001c4a <HAL_GPIO_Init+0x12e>
 8001b6a:	4a9f      	ldr	r2, [pc, #636]	; (8001de8 <HAL_GPIO_Init+0x2cc>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d052      	beq.n	8001c16 <HAL_GPIO_Init+0xfa>
 8001b70:	4a9d      	ldr	r2, [pc, #628]	; (8001de8 <HAL_GPIO_Init+0x2cc>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d869      	bhi.n	8001c4a <HAL_GPIO_Init+0x12e>
 8001b76:	4a9d      	ldr	r2, [pc, #628]	; (8001dec <HAL_GPIO_Init+0x2d0>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d04c      	beq.n	8001c16 <HAL_GPIO_Init+0xfa>
 8001b7c:	4a9b      	ldr	r2, [pc, #620]	; (8001dec <HAL_GPIO_Init+0x2d0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d863      	bhi.n	8001c4a <HAL_GPIO_Init+0x12e>
 8001b82:	4a9b      	ldr	r2, [pc, #620]	; (8001df0 <HAL_GPIO_Init+0x2d4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d046      	beq.n	8001c16 <HAL_GPIO_Init+0xfa>
 8001b88:	4a99      	ldr	r2, [pc, #612]	; (8001df0 <HAL_GPIO_Init+0x2d4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d85d      	bhi.n	8001c4a <HAL_GPIO_Init+0x12e>
 8001b8e:	2b12      	cmp	r3, #18
 8001b90:	d82a      	bhi.n	8001be8 <HAL_GPIO_Init+0xcc>
 8001b92:	2b12      	cmp	r3, #18
 8001b94:	d859      	bhi.n	8001c4a <HAL_GPIO_Init+0x12e>
 8001b96:	a201      	add	r2, pc, #4	; (adr r2, 8001b9c <HAL_GPIO_Init+0x80>)
 8001b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9c:	08001c17 	.word	0x08001c17
 8001ba0:	08001bf1 	.word	0x08001bf1
 8001ba4:	08001c03 	.word	0x08001c03
 8001ba8:	08001c45 	.word	0x08001c45
 8001bac:	08001c4b 	.word	0x08001c4b
 8001bb0:	08001c4b 	.word	0x08001c4b
 8001bb4:	08001c4b 	.word	0x08001c4b
 8001bb8:	08001c4b 	.word	0x08001c4b
 8001bbc:	08001c4b 	.word	0x08001c4b
 8001bc0:	08001c4b 	.word	0x08001c4b
 8001bc4:	08001c4b 	.word	0x08001c4b
 8001bc8:	08001c4b 	.word	0x08001c4b
 8001bcc:	08001c4b 	.word	0x08001c4b
 8001bd0:	08001c4b 	.word	0x08001c4b
 8001bd4:	08001c4b 	.word	0x08001c4b
 8001bd8:	08001c4b 	.word	0x08001c4b
 8001bdc:	08001c4b 	.word	0x08001c4b
 8001be0:	08001bf9 	.word	0x08001bf9
 8001be4:	08001c0d 	.word	0x08001c0d
 8001be8:	4a82      	ldr	r2, [pc, #520]	; (8001df4 <HAL_GPIO_Init+0x2d8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d013      	beq.n	8001c16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bee:	e02c      	b.n	8001c4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	623b      	str	r3, [r7, #32]
          break;
 8001bf6:	e029      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	623b      	str	r3, [r7, #32]
          break;
 8001c00:	e024      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	3308      	adds	r3, #8
 8001c08:	623b      	str	r3, [r7, #32]
          break;
 8001c0a:	e01f      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	330c      	adds	r3, #12
 8001c12:	623b      	str	r3, [r7, #32]
          break;
 8001c14:	e01a      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d102      	bne.n	8001c24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c1e:	2304      	movs	r3, #4
 8001c20:	623b      	str	r3, [r7, #32]
          break;
 8001c22:	e013      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d105      	bne.n	8001c38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c2c:	2308      	movs	r3, #8
 8001c2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	611a      	str	r2, [r3, #16]
          break;
 8001c36:	e009      	b.n	8001c4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c38:	2308      	movs	r3, #8
 8001c3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69fa      	ldr	r2, [r7, #28]
 8001c40:	615a      	str	r2, [r3, #20]
          break;
 8001c42:	e003      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
          break;
 8001c48:	e000      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          break;
 8001c4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2bff      	cmp	r3, #255	; 0xff
 8001c50:	d801      	bhi.n	8001c56 <HAL_GPIO_Init+0x13a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	e001      	b.n	8001c5a <HAL_GPIO_Init+0x13e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2bff      	cmp	r3, #255	; 0xff
 8001c60:	d802      	bhi.n	8001c68 <HAL_GPIO_Init+0x14c>
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	e002      	b.n	8001c6e <HAL_GPIO_Init+0x152>
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	3b08      	subs	r3, #8
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	210f      	movs	r1, #15
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	401a      	ands	r2, r3
 8001c80:	6a39      	ldr	r1, [r7, #32]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	fa01 f303 	lsl.w	r3, r1, r3
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8090 	beq.w	8001dbc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c9c:	4b56      	ldr	r3, [pc, #344]	; (8001df8 <HAL_GPIO_Init+0x2dc>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4a55      	ldr	r2, [pc, #340]	; (8001df8 <HAL_GPIO_Init+0x2dc>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6193      	str	r3, [r2, #24]
 8001ca8:	4b53      	ldr	r3, [pc, #332]	; (8001df8 <HAL_GPIO_Init+0x2dc>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cb4:	4a51      	ldr	r2, [pc, #324]	; (8001dfc <HAL_GPIO_Init+0x2e0>)
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	220f      	movs	r2, #15
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a49      	ldr	r2, [pc, #292]	; (8001e00 <HAL_GPIO_Init+0x2e4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d00d      	beq.n	8001cfc <HAL_GPIO_Init+0x1e0>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a48      	ldr	r2, [pc, #288]	; (8001e04 <HAL_GPIO_Init+0x2e8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d007      	beq.n	8001cf8 <HAL_GPIO_Init+0x1dc>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a47      	ldr	r2, [pc, #284]	; (8001e08 <HAL_GPIO_Init+0x2ec>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d101      	bne.n	8001cf4 <HAL_GPIO_Init+0x1d8>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e004      	b.n	8001cfe <HAL_GPIO_Init+0x1e2>
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e002      	b.n	8001cfe <HAL_GPIO_Init+0x1e2>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <HAL_GPIO_Init+0x1e2>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d00:	f002 0203 	and.w	r2, r2, #3
 8001d04:	0092      	lsls	r2, r2, #2
 8001d06:	4093      	lsls	r3, r2
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d0e:	493b      	ldr	r1, [pc, #236]	; (8001dfc <HAL_GPIO_Init+0x2e0>)
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	089b      	lsrs	r3, r3, #2
 8001d14:	3302      	adds	r3, #2
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d28:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4937      	ldr	r1, [pc, #220]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d36:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	4933      	ldr	r1, [pc, #204]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d50:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	492d      	ldr	r1, [pc, #180]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d5e:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	4929      	ldr	r1, [pc, #164]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d006      	beq.n	8001d86 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	4923      	ldr	r1, [pc, #140]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]
 8001d84:	e006      	b.n	8001d94 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	491f      	ldr	r1, [pc, #124]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d006      	beq.n	8001dae <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001da0:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	4919      	ldr	r1, [pc, #100]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60cb      	str	r3, [r1, #12]
 8001dac:	e006      	b.n	8001dbc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	4915      	ldr	r1, [pc, #84]	; (8001e0c <HAL_GPIO_Init+0x2f0>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f47f aeaf 	bne.w	8001b30 <HAL_GPIO_Init+0x14>
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	bf00      	nop
 8001dd6:	372c      	adds	r7, #44	; 0x2c
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	10320000 	.word	0x10320000
 8001de4:	10310000 	.word	0x10310000
 8001de8:	10220000 	.word	0x10220000
 8001dec:	10210000 	.word	0x10210000
 8001df0:	10120000 	.word	0x10120000
 8001df4:	10110000 	.word	0x10110000
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40010000 	.word	0x40010000
 8001e00:	40010800 	.word	0x40010800
 8001e04:	40010c00 	.word	0x40010c00
 8001e08:	40011000 	.word	0x40011000
 8001e0c:	40010400 	.word	0x40010400

08001e10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	887b      	ldrh	r3, [r7, #2]
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
 8001e2c:	e001      	b.n	8001e32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr

08001e3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	460b      	mov	r3, r1
 8001e48:	807b      	strh	r3, [r7, #2]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e4e:	787b      	ldrb	r3, [r7, #1]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e54:	887a      	ldrh	r2, [r7, #2]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e5a:	e003      	b.n	8001e64 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e5c:	887b      	ldrh	r3, [r7, #2]
 8001e5e:	041a      	lsls	r2, r3, #16
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	611a      	str	r2, [r3, #16]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e26c      	b.n	800235c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8087 	beq.w	8001f9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e90:	4b92      	ldr	r3, [pc, #584]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 030c 	and.w	r3, r3, #12
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d00c      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e9c:	4b8f      	ldr	r3, [pc, #572]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d112      	bne.n	8001ece <HAL_RCC_OscConfig+0x5e>
 8001ea8:	4b8c      	ldr	r3, [pc, #560]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb4:	d10b      	bne.n	8001ece <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb6:	4b89      	ldr	r3, [pc, #548]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d06c      	beq.n	8001f9c <HAL_RCC_OscConfig+0x12c>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d168      	bne.n	8001f9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e246      	b.n	800235c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x76>
 8001ed8:	4b80      	ldr	r3, [pc, #512]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a7f      	ldr	r2, [pc, #508]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	e02e      	b.n	8001f44 <HAL_RCC_OscConfig+0xd4>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x98>
 8001eee:	4b7b      	ldr	r3, [pc, #492]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a7a      	ldr	r2, [pc, #488]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	4b78      	ldr	r3, [pc, #480]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a77      	ldr	r2, [pc, #476]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e01d      	b.n	8001f44 <HAL_RCC_OscConfig+0xd4>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0xbc>
 8001f12:	4b72      	ldr	r3, [pc, #456]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a71      	ldr	r2, [pc, #452]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4b6f      	ldr	r3, [pc, #444]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a6e      	ldr	r2, [pc, #440]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e00b      	b.n	8001f44 <HAL_RCC_OscConfig+0xd4>
 8001f2c:	4b6b      	ldr	r3, [pc, #428]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a6a      	ldr	r2, [pc, #424]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	4b68      	ldr	r3, [pc, #416]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a67      	ldr	r2, [pc, #412]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d013      	beq.n	8001f74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7ff fcce 	bl	80018ec <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f54:	f7ff fcca 	bl	80018ec <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	; 0x64
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e1fa      	b.n	800235c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	4b5d      	ldr	r3, [pc, #372]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0xe4>
 8001f72:	e014      	b.n	8001f9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7ff fcba 	bl	80018ec <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7ff fcb6 	bl	80018ec <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	; 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e1e6      	b.n	800235c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	4b53      	ldr	r3, [pc, #332]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x10c>
 8001f9a:	e000      	b.n	8001f9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d063      	beq.n	8002072 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001faa:	4b4c      	ldr	r3, [pc, #304]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00b      	beq.n	8001fce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fb6:	4b49      	ldr	r3, [pc, #292]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d11c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x18c>
 8001fc2:	4b46      	ldr	r3, [pc, #280]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d116      	bne.n	8001ffc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fce:	4b43      	ldr	r3, [pc, #268]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x176>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d001      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e1ba      	b.n	800235c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4939      	ldr	r1, [pc, #228]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffa:	e03a      	b.n	8002072 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d020      	beq.n	8002046 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002004:	4b36      	ldr	r3, [pc, #216]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7ff fc6f 	bl	80018ec <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002012:	f7ff fc6b 	bl	80018ec <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e19b      	b.n	800235c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002024:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002030:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4927      	ldr	r1, [pc, #156]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8002040:	4313      	orrs	r3, r2
 8002042:	600b      	str	r3, [r1, #0]
 8002044:	e015      	b.n	8002072 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002046:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff fc4e 	bl	80018ec <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002054:	f7ff fc4a 	bl	80018ec <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e17a      	b.n	800235c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002066:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d03a      	beq.n	80020f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d019      	beq.n	80020ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8002088:	2201      	movs	r2, #1
 800208a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208c:	f7ff fc2e 	bl	80018ec <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002094:	f7ff fc2a 	bl	80018ec <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e15a      	b.n	800235c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a6:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020b2:	2001      	movs	r0, #1
 80020b4:	f000 faa6 	bl	8002604 <RCC_Delay>
 80020b8:	e01c      	b.n	80020f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c0:	f7ff fc14 	bl	80018ec <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c6:	e00f      	b.n	80020e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c8:	f7ff fc10 	bl	80018ec <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d908      	bls.n	80020e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e140      	b.n	800235c <HAL_RCC_OscConfig+0x4ec>
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000
 80020e0:	42420000 	.word	0x42420000
 80020e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e8:	4b9e      	ldr	r3, [pc, #632]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1e9      	bne.n	80020c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80a6 	beq.w	800224e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002106:	4b97      	ldr	r3, [pc, #604]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10d      	bne.n	800212e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	4b94      	ldr	r3, [pc, #592]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	4a93      	ldr	r2, [pc, #588]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211c:	61d3      	str	r3, [r2, #28]
 800211e:	4b91      	ldr	r3, [pc, #580]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212a:	2301      	movs	r3, #1
 800212c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212e:	4b8e      	ldr	r3, [pc, #568]	; (8002368 <HAL_RCC_OscConfig+0x4f8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002136:	2b00      	cmp	r3, #0
 8002138:	d118      	bne.n	800216c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213a:	4b8b      	ldr	r3, [pc, #556]	; (8002368 <HAL_RCC_OscConfig+0x4f8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a8a      	ldr	r2, [pc, #552]	; (8002368 <HAL_RCC_OscConfig+0x4f8>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002146:	f7ff fbd1 	bl	80018ec <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214e:	f7ff fbcd 	bl	80018ec <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b64      	cmp	r3, #100	; 0x64
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e0fd      	b.n	800235c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002160:	4b81      	ldr	r3, [pc, #516]	; (8002368 <HAL_RCC_OscConfig+0x4f8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d106      	bne.n	8002182 <HAL_RCC_OscConfig+0x312>
 8002174:	4b7b      	ldr	r3, [pc, #492]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4a7a      	ldr	r2, [pc, #488]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6213      	str	r3, [r2, #32]
 8002180:	e02d      	b.n	80021de <HAL_RCC_OscConfig+0x36e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x334>
 800218a:	4b76      	ldr	r3, [pc, #472]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4a75      	ldr	r2, [pc, #468]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	6213      	str	r3, [r2, #32]
 8002196:	4b73      	ldr	r3, [pc, #460]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	4a72      	ldr	r2, [pc, #456]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	f023 0304 	bic.w	r3, r3, #4
 80021a0:	6213      	str	r3, [r2, #32]
 80021a2:	e01c      	b.n	80021de <HAL_RCC_OscConfig+0x36e>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b05      	cmp	r3, #5
 80021aa:	d10c      	bne.n	80021c6 <HAL_RCC_OscConfig+0x356>
 80021ac:	4b6d      	ldr	r3, [pc, #436]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4a6c      	ldr	r2, [pc, #432]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	6213      	str	r3, [r2, #32]
 80021b8:	4b6a      	ldr	r3, [pc, #424]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4a69      	ldr	r2, [pc, #420]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6213      	str	r3, [r2, #32]
 80021c4:	e00b      	b.n	80021de <HAL_RCC_OscConfig+0x36e>
 80021c6:	4b67      	ldr	r3, [pc, #412]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	4a66      	ldr	r2, [pc, #408]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	6213      	str	r3, [r2, #32]
 80021d2:	4b64      	ldr	r3, [pc, #400]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4a63      	ldr	r2, [pc, #396]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	f023 0304 	bic.w	r3, r3, #4
 80021dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d015      	beq.n	8002212 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e6:	f7ff fb81 	bl	80018ec <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7ff fb7d 	bl	80018ec <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e0ab      	b.n	800235c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002204:	4b57      	ldr	r3, [pc, #348]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0ee      	beq.n	80021ee <HAL_RCC_OscConfig+0x37e>
 8002210:	e014      	b.n	800223c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002212:	f7ff fb6b 	bl	80018ec <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221a:	f7ff fb67 	bl	80018ec <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	; 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e095      	b.n	800235c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002230:	4b4c      	ldr	r3, [pc, #304]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1ee      	bne.n	800221a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800223c:	7dfb      	ldrb	r3, [r7, #23]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d105      	bne.n	800224e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002242:	4b48      	ldr	r3, [pc, #288]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	4a47      	ldr	r2, [pc, #284]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 8002248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800224c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 8081 	beq.w	800235a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002258:	4b42      	ldr	r3, [pc, #264]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b08      	cmp	r3, #8
 8002262:	d061      	beq.n	8002328 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d146      	bne.n	80022fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226c:	4b3f      	ldr	r3, [pc, #252]	; (800236c <HAL_RCC_OscConfig+0x4fc>)
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002272:	f7ff fb3b 	bl	80018ec <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227a:	f7ff fb37 	bl	80018ec <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e067      	b.n	800235c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228c:	4b35      	ldr	r3, [pc, #212]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f0      	bne.n	800227a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a0:	d108      	bne.n	80022b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022a2:	4b30      	ldr	r3, [pc, #192]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	492d      	ldr	r1, [pc, #180]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b4:	4b2b      	ldr	r3, [pc, #172]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a19      	ldr	r1, [r3, #32]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	430b      	orrs	r3, r1
 80022c6:	4927      	ldr	r1, [pc, #156]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022cc:	4b27      	ldr	r3, [pc, #156]	; (800236c <HAL_RCC_OscConfig+0x4fc>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d2:	f7ff fb0b 	bl	80018ec <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022da:	f7ff fb07 	bl	80018ec <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e037      	b.n	800235c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ec:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x46a>
 80022f8:	e02f      	b.n	800235a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fa:	4b1c      	ldr	r3, [pc, #112]	; (800236c <HAL_RCC_OscConfig+0x4fc>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7ff faf4 	bl	80018ec <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002308:	f7ff faf0 	bl	80018ec <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e020      	b.n	800235c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231a:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x498>
 8002326:	e018      	b.n	800235a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e013      	b.n	800235c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_RCC_OscConfig+0x4f4>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	429a      	cmp	r2, r3
 8002346:	d106      	bne.n	8002356 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002352:	429a      	cmp	r2, r3
 8002354:	d001      	beq.n	800235a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000
 8002368:	40007000 	.word	0x40007000
 800236c:	42420060 	.word	0x42420060

08002370 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0d0      	b.n	8002526 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002384:	4b6a      	ldr	r3, [pc, #424]	; (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d910      	bls.n	80023b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b67      	ldr	r3, [pc, #412]	; (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 0207 	bic.w	r2, r3, #7
 800239a:	4965      	ldr	r1, [pc, #404]	; (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	4313      	orrs	r3, r2
 80023a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a2:	4b63      	ldr	r3, [pc, #396]	; (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0b8      	b.n	8002526 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d020      	beq.n	8002402 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023cc:	4b59      	ldr	r3, [pc, #356]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4a58      	ldr	r2, [pc, #352]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e4:	4b53      	ldr	r3, [pc, #332]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4a52      	ldr	r2, [pc, #328]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f0:	4b50      	ldr	r3, [pc, #320]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	494d      	ldr	r1, [pc, #308]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d040      	beq.n	8002490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	4b47      	ldr	r3, [pc, #284]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d115      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e07f      	b.n	8002526 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242e:	4b41      	ldr	r3, [pc, #260]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e073      	b.n	8002526 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243e:	4b3d      	ldr	r3, [pc, #244]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e06b      	b.n	8002526 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244e:	4b39      	ldr	r3, [pc, #228]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4936      	ldr	r1, [pc, #216]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	4313      	orrs	r3, r2
 800245e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002460:	f7ff fa44 	bl	80018ec <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7ff fa40 	bl	80018ec <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e053      	b.n	8002526 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 020c 	and.w	r2, r3, #12
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d1eb      	bne.n	8002468 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002490:	4b27      	ldr	r3, [pc, #156]	; (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d210      	bcs.n	80024c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b24      	ldr	r3, [pc, #144]	; (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 0207 	bic.w	r2, r3, #7
 80024a6:	4922      	ldr	r1, [pc, #136]	; (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b20      	ldr	r3, [pc, #128]	; (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e032      	b.n	8002526 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024cc:	4b19      	ldr	r3, [pc, #100]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4916      	ldr	r1, [pc, #88]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ea:	4b12      	ldr	r3, [pc, #72]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	490e      	ldr	r1, [pc, #56]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024fe:	f000 f821 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8002502:	4602      	mov	r2, r0
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	490a      	ldr	r1, [pc, #40]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 8002510:	5ccb      	ldrb	r3, [r1, r3]
 8002512:	fa22 f303 	lsr.w	r3, r2, r3
 8002516:	4a09      	ldr	r2, [pc, #36]	; (800253c <HAL_RCC_ClockConfig+0x1cc>)
 8002518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_RCC_ClockConfig+0x1d0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff f9a2 	bl	8001868 <HAL_InitTick>

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40022000 	.word	0x40022000
 8002534:	40021000 	.word	0x40021000
 8002538:	08002e88 	.word	0x08002e88
 800253c:	20000034 	.word	0x20000034
 8002540:	2000003c 	.word	0x2000003c

08002544 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002544:	b490      	push	{r4, r7}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800254a:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800254c:	1d3c      	adds	r4, r7, #4
 800254e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002554:	f240 2301 	movw	r3, #513	; 0x201
 8002558:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	2300      	movs	r3, #0
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800256e:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b04      	cmp	r3, #4
 800257c:	d002      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0x40>
 800257e:	2b08      	cmp	r3, #8
 8002580:	d003      	beq.n	800258a <HAL_RCC_GetSysClockFreq+0x46>
 8002582:	e02d      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002584:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002586:	623b      	str	r3, [r7, #32]
      break;
 8002588:	e02d      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	0c9b      	lsrs	r3, r3, #18
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002596:	4413      	add	r3, r2
 8002598:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800259c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d013      	beq.n	80025d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	0c5b      	lsrs	r3, r3, #17
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025b6:	4413      	add	r3, r2
 80025b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	4a0e      	ldr	r2, [pc, #56]	; (80025fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c2:	fb02 f203 	mul.w	r2, r2, r3
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
 80025ce:	e004      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	4a0b      	ldr	r2, [pc, #44]	; (8002600 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025d4:	fb02 f303 	mul.w	r3, r2, r3
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	623b      	str	r3, [r7, #32]
      break;
 80025de:	e002      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e2:	623b      	str	r3, [r7, #32]
      break;
 80025e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025e6:	6a3b      	ldr	r3, [r7, #32]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3728      	adds	r7, #40	; 0x28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc90      	pop	{r4, r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	08002e78 	.word	0x08002e78
 80025f8:	40021000 	.word	0x40021000
 80025fc:	007a1200 	.word	0x007a1200
 8002600:	003d0900 	.word	0x003d0900

08002604 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <RCC_Delay+0x34>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0a      	ldr	r2, [pc, #40]	; (800263c <RCC_Delay+0x38>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	0a5b      	lsrs	r3, r3, #9
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	fb02 f303 	mul.w	r3, r2, r3
 800261e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002620:	bf00      	nop
  }
  while (Delay --);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1e5a      	subs	r2, r3, #1
 8002626:	60fa      	str	r2, [r7, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f9      	bne.n	8002620 <RCC_Delay+0x1c>
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	20000034 	.word	0x20000034
 800263c:	10624dd3 	.word	0x10624dd3

08002640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e041      	b.n	80026d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe fe54 	bl	8001314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3304      	adds	r3, #4
 800267c:	4619      	mov	r1, r3
 800267e:	4610      	mov	r0, r2
 8002680:	f000 fa6a 	bl	8002b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d001      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e035      	b.n	8002764 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0201 	orr.w	r2, r2, #1
 800270e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a16      	ldr	r2, [pc, #88]	; (8002770 <HAL_TIM_Base_Start_IT+0x90>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d009      	beq.n	800272e <HAL_TIM_Base_Start_IT+0x4e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002722:	d004      	beq.n	800272e <HAL_TIM_Base_Start_IT+0x4e>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a12      	ldr	r2, [pc, #72]	; (8002774 <HAL_TIM_Base_Start_IT+0x94>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d111      	bne.n	8002752 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b06      	cmp	r3, #6
 800273e:	d010      	beq.n	8002762 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002750:	e007      	b.n	8002762 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0201 	orr.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40012c00 	.word	0x40012c00
 8002774:	40000400 	.word	0x40000400

08002778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b02      	cmp	r3, #2
 800278c:	d122      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b02      	cmp	r3, #2
 800279a:	d11b      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0202 	mvn.w	r2, #2
 80027a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f9b1 	bl	8002b22 <HAL_TIM_IC_CaptureCallback>
 80027c0:	e005      	b.n	80027ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f9a4 	bl	8002b10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f9b3 	bl	8002b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d122      	bne.n	8002828 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d11b      	bne.n	8002828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0204 	mvn.w	r2, #4
 80027f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2202      	movs	r2, #2
 80027fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f987 	bl	8002b22 <HAL_TIM_IC_CaptureCallback>
 8002814:	e005      	b.n	8002822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f97a 	bl	8002b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f989 	bl	8002b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b08      	cmp	r3, #8
 8002834:	d122      	bne.n	800287c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b08      	cmp	r3, #8
 8002842:	d11b      	bne.n	800287c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0208 	mvn.w	r2, #8
 800284c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2204      	movs	r2, #4
 8002852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f95d 	bl	8002b22 <HAL_TIM_IC_CaptureCallback>
 8002868:	e005      	b.n	8002876 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f950 	bl	8002b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f95f 	bl	8002b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b10      	cmp	r3, #16
 8002888:	d122      	bne.n	80028d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b10      	cmp	r3, #16
 8002896:	d11b      	bne.n	80028d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f06f 0210 	mvn.w	r2, #16
 80028a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2208      	movs	r2, #8
 80028a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f933 	bl	8002b22 <HAL_TIM_IC_CaptureCallback>
 80028bc:	e005      	b.n	80028ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f926 	bl	8002b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f935 	bl	8002b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d10e      	bne.n	80028fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d107      	bne.n	80028fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f06f 0201 	mvn.w	r2, #1
 80028f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe fc42 	bl	8001180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002906:	2b80      	cmp	r3, #128	; 0x80
 8002908:	d10e      	bne.n	8002928 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002914:	2b80      	cmp	r3, #128	; 0x80
 8002916:	d107      	bne.n	8002928 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fa67 	bl	8002df6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002932:	2b40      	cmp	r3, #64	; 0x40
 8002934:	d10e      	bne.n	8002954 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002940:	2b40      	cmp	r3, #64	; 0x40
 8002942:	d107      	bne.n	8002954 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800294c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f8f9 	bl	8002b46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b20      	cmp	r3, #32
 8002960:	d10e      	bne.n	8002980 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b20      	cmp	r3, #32
 800296e:	d107      	bne.n	8002980 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0220 	mvn.w	r2, #32
 8002978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fa32 	bl	8002de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_TIM_ConfigClockSource+0x18>
 800299c:	2302      	movs	r3, #2
 800299e:	e0b3      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x180>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d8:	d03e      	beq.n	8002a58 <HAL_TIM_ConfigClockSource+0xd0>
 80029da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029de:	f200 8087 	bhi.w	8002af0 <HAL_TIM_ConfigClockSource+0x168>
 80029e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e6:	f000 8085 	beq.w	8002af4 <HAL_TIM_ConfigClockSource+0x16c>
 80029ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ee:	d87f      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x168>
 80029f0:	2b70      	cmp	r3, #112	; 0x70
 80029f2:	d01a      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0xa2>
 80029f4:	2b70      	cmp	r3, #112	; 0x70
 80029f6:	d87b      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x168>
 80029f8:	2b60      	cmp	r3, #96	; 0x60
 80029fa:	d050      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0x116>
 80029fc:	2b60      	cmp	r3, #96	; 0x60
 80029fe:	d877      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x168>
 8002a00:	2b50      	cmp	r3, #80	; 0x50
 8002a02:	d03c      	beq.n	8002a7e <HAL_TIM_ConfigClockSource+0xf6>
 8002a04:	2b50      	cmp	r3, #80	; 0x50
 8002a06:	d873      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x168>
 8002a08:	2b40      	cmp	r3, #64	; 0x40
 8002a0a:	d058      	beq.n	8002abe <HAL_TIM_ConfigClockSource+0x136>
 8002a0c:	2b40      	cmp	r3, #64	; 0x40
 8002a0e:	d86f      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x168>
 8002a10:	2b30      	cmp	r3, #48	; 0x30
 8002a12:	d064      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x156>
 8002a14:	2b30      	cmp	r3, #48	; 0x30
 8002a16:	d86b      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x168>
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d060      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x156>
 8002a1c:	2b20      	cmp	r3, #32
 8002a1e:	d867      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x168>
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d05c      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x156>
 8002a24:	2b10      	cmp	r3, #16
 8002a26:	d05a      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a28:	e062      	b.n	8002af0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6899      	ldr	r1, [r3, #8]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f000 f95c 	bl	8002cf6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	609a      	str	r2, [r3, #8]
      break;
 8002a56:	e04e      	b.n	8002af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6899      	ldr	r1, [r3, #8]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f000 f945 	bl	8002cf6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a7a:	609a      	str	r2, [r3, #8]
      break;
 8002a7c:	e03b      	b.n	8002af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	6859      	ldr	r1, [r3, #4]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f000 f8bc 	bl	8002c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2150      	movs	r1, #80	; 0x50
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 f913 	bl	8002cc2 <TIM_ITRx_SetConfig>
      break;
 8002a9c:	e02b      	b.n	8002af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6859      	ldr	r1, [r3, #4]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f000 f8da 	bl	8002c64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2160      	movs	r1, #96	; 0x60
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f903 	bl	8002cc2 <TIM_ITRx_SetConfig>
      break;
 8002abc:	e01b      	b.n	8002af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	6859      	ldr	r1, [r3, #4]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	461a      	mov	r2, r3
 8002acc:	f000 f89c 	bl	8002c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2140      	movs	r1, #64	; 0x40
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f8f3 	bl	8002cc2 <TIM_ITRx_SetConfig>
      break;
 8002adc:	e00b      	b.n	8002af6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4610      	mov	r0, r2
 8002aea:	f000 f8ea 	bl	8002cc2 <TIM_ITRx_SetConfig>
        break;
 8002aee:	e002      	b.n	8002af6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002af0:	bf00      	nop
 8002af2:	e000      	b.n	8002af6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002af4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a25      	ldr	r2, [pc, #148]	; (8002c00 <TIM_Base_SetConfig+0xa8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d007      	beq.n	8002b80 <TIM_Base_SetConfig+0x28>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b76:	d003      	beq.n	8002b80 <TIM_Base_SetConfig+0x28>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a22      	ldr	r2, [pc, #136]	; (8002c04 <TIM_Base_SetConfig+0xac>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d108      	bne.n	8002b92 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a1a      	ldr	r2, [pc, #104]	; (8002c00 <TIM_Base_SetConfig+0xa8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <TIM_Base_SetConfig+0x52>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba0:	d003      	beq.n	8002baa <TIM_Base_SetConfig+0x52>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a17      	ldr	r2, [pc, #92]	; (8002c04 <TIM_Base_SetConfig+0xac>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d108      	bne.n	8002bbc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a07      	ldr	r2, [pc, #28]	; (8002c00 <TIM_Base_SetConfig+0xa8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d103      	bne.n	8002bf0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	615a      	str	r2, [r3, #20]
}
 8002bf6:	bf00      	nop
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr
 8002c00:	40012c00 	.word	0x40012c00
 8002c04:	40000400 	.word	0x40000400

08002c08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	f023 0201 	bic.w	r2, r3, #1
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f023 030a 	bic.w	r3, r3, #10
 8002c44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	621a      	str	r2, [r3, #32]
}
 8002c5a:	bf00      	nop
 8002c5c:	371c      	adds	r7, #28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	f023 0210 	bic.w	r2, r3, #16
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	031b      	lsls	r3, r3, #12
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ca0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	621a      	str	r2, [r3, #32]
}
 8002cb8:	bf00      	nop
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b085      	sub	sp, #20
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f043 0307 	orr.w	r3, r3, #7
 8002ce4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	609a      	str	r2, [r3, #8]
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b087      	sub	sp, #28
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d10:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	021a      	lsls	r2, r3, #8
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	609a      	str	r2, [r3, #8]
}
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e041      	b.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d009      	beq.n	8002da4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d98:	d004      	beq.n	8002da4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a10      	ldr	r2, [pc, #64]	; (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d10c      	bne.n	8002dbe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002daa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	40000400 	.word	0x40000400

08002de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <__libc_init_array>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	2600      	movs	r6, #0
 8002e0c:	4d0c      	ldr	r5, [pc, #48]	; (8002e40 <__libc_init_array+0x38>)
 8002e0e:	4c0d      	ldr	r4, [pc, #52]	; (8002e44 <__libc_init_array+0x3c>)
 8002e10:	1b64      	subs	r4, r4, r5
 8002e12:	10a4      	asrs	r4, r4, #2
 8002e14:	42a6      	cmp	r6, r4
 8002e16:	d109      	bne.n	8002e2c <__libc_init_array+0x24>
 8002e18:	f000 f822 	bl	8002e60 <_init>
 8002e1c:	2600      	movs	r6, #0
 8002e1e:	4d0a      	ldr	r5, [pc, #40]	; (8002e48 <__libc_init_array+0x40>)
 8002e20:	4c0a      	ldr	r4, [pc, #40]	; (8002e4c <__libc_init_array+0x44>)
 8002e22:	1b64      	subs	r4, r4, r5
 8002e24:	10a4      	asrs	r4, r4, #2
 8002e26:	42a6      	cmp	r6, r4
 8002e28:	d105      	bne.n	8002e36 <__libc_init_array+0x2e>
 8002e2a:	bd70      	pop	{r4, r5, r6, pc}
 8002e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e30:	4798      	blx	r3
 8002e32:	3601      	adds	r6, #1
 8002e34:	e7ee      	b.n	8002e14 <__libc_init_array+0xc>
 8002e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e3a:	4798      	blx	r3
 8002e3c:	3601      	adds	r6, #1
 8002e3e:	e7f2      	b.n	8002e26 <__libc_init_array+0x1e>
 8002e40:	08002e98 	.word	0x08002e98
 8002e44:	08002e98 	.word	0x08002e98
 8002e48:	08002e98 	.word	0x08002e98
 8002e4c:	08002e9c 	.word	0x08002e9c

08002e50 <memset>:
 8002e50:	4603      	mov	r3, r0
 8002e52:	4402      	add	r2, r0
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d100      	bne.n	8002e5a <memset+0xa>
 8002e58:	4770      	bx	lr
 8002e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e5e:	e7f9      	b.n	8002e54 <memset+0x4>

08002e60 <_init>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	bf00      	nop
 8002e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e66:	bc08      	pop	{r3}
 8002e68:	469e      	mov	lr, r3
 8002e6a:	4770      	bx	lr

08002e6c <_fini>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	bf00      	nop
 8002e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e72:	bc08      	pop	{r3}
 8002e74:	469e      	mov	lr, r3
 8002e76:	4770      	bx	lr
