
test_ver2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003520  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800362c  0800362c  0001362c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800364c  0800364c  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  0800364c  0800364c  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800364c  0800364c  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800364c  0800364c  0001364c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003650  08003650  00013650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08003654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000044  08003698  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08003698  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090ac  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac8  00000000  00000000  00029119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002abe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002b668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cfc  00000000  00000000  0002bfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b97c  00000000  00000000  00042cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823f7  00000000  00000000  0004e650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0a47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b4  00000000  00000000  000d0a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000044 	.word	0x20000044
 8000128:	00000000 	.word	0x00000000
 800012c:	08003614 	.word	0x08003614

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000048 	.word	0x20000048
 8000148:	08003614 	.word	0x08003614

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2iz>:
 80004d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30f      	bcc.n	80004fa <__aeabi_f2iz+0x2a>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d90d      	bls.n	8000500 <__aeabi_f2iz+0x30>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80004f0:	fa23 f002 	lsr.w	r0, r3, r2
 80004f4:	bf18      	it	ne
 80004f6:	4240      	negne	r0, r0
 80004f8:	4770      	bx	lr
 80004fa:	f04f 0000 	mov.w	r0, #0
 80004fe:	4770      	bx	lr
 8000500:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000504:	d101      	bne.n	800050a <__aeabi_f2iz+0x3a>
 8000506:	0242      	lsls	r2, r0, #9
 8000508:	d105      	bne.n	8000516 <__aeabi_f2iz+0x46>
 800050a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800050e:	bf08      	it	eq
 8000510:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000514:	4770      	bx	lr
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	4770      	bx	lr

0800051c <subKeyProcess1>:
int KeyReg10 = NORMAL_STATE;
int KeyReg11 = NORMAL_STATE;

int TimeForKeyPress = 200;

void subKeyProcess1(){
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
	button1_flag = 1;
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <subKeyProcess1+0x14>)
 8000522:	2201      	movs	r2, #1
 8000524:	601a      	str	r2, [r3, #0]
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000060 	.word	0x20000060

08000534 <isButton1PRESS>:
int isButton1PRESS(){
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <isButton1PRESS+0x20>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d104      	bne.n	800054a <isButton1PRESS+0x16>
		button1_flag = 0;
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <isButton1PRESS+0x20>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
		return 1;
 8000546:	2301      	movs	r3, #1
 8000548:	e000      	b.n	800054c <isButton1PRESS+0x18>
	}
	return 0;
 800054a:	2300      	movs	r3, #0
}
 800054c:	4618      	mov	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	20000060 	.word	0x20000060

08000558 <subKeyProcess2>:

void subKeyProcess2(){
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
	button2_flag = 1;
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <subKeyProcess2+0x14>)
 800055e:	2201      	movs	r2, #1
 8000560:	601a      	str	r2, [r3, #0]
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20000064 	.word	0x20000064

08000570 <isButton2PRESS>:

int isButton2PRESS(){
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <isButton2PRESS+0x20>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d104      	bne.n	8000586 <isButton2PRESS+0x16>
		button2_flag = 0;
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <isButton2PRESS+0x20>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
		return 1;
 8000582:	2301      	movs	r3, #1
 8000584:	e000      	b.n	8000588 <isButton2PRESS+0x18>
	}
	return 0;
 8000586:	2300      	movs	r3, #0
}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	20000064 	.word	0x20000064

08000594 <subKeyProcess3>:

void subKeyProcess3(){
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	button3_flag = 1;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <subKeyProcess3+0x14>)
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000068 	.word	0x20000068

080005ac <isButton3PRESS>:

int isButton3PRESS(){
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <isButton3PRESS+0x20>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d104      	bne.n	80005c2 <isButton3PRESS+0x16>
		button3_flag = 0;
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <isButton3PRESS+0x20>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
		return 1;
 80005be:	2301      	movs	r3, #1
 80005c0:	e000      	b.n	80005c4 <isButton3PRESS+0x18>
	}
	return 0;
 80005c2:	2300      	movs	r3, #0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	20000068 	.word	0x20000068

080005d0 <getKeyInput>:


void getKeyInput(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	//BUTTON1
	KeyReg0 = KeyReg1;
 80005d4:	4b5c      	ldr	r3, [pc, #368]	; (8000748 <getKeyInput+0x178>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a5c      	ldr	r2, [pc, #368]	; (800074c <getKeyInput+0x17c>)
 80005da:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 80005dc:	4b5c      	ldr	r3, [pc, #368]	; (8000750 <getKeyInput+0x180>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a59      	ldr	r2, [pc, #356]	; (8000748 <getKeyInput+0x178>)
 80005e2:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80005e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e8:	485a      	ldr	r0, [pc, #360]	; (8000754 <getKeyInput+0x184>)
 80005ea:	f001 ffeb 	bl	80025c4 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b57      	ldr	r3, [pc, #348]	; (8000750 <getKeyInput+0x180>)
 80005f4:	601a      	str	r2, [r3, #0]
	if((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
 80005f6:	4b55      	ldr	r3, [pc, #340]	; (800074c <getKeyInput+0x17c>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4b53      	ldr	r3, [pc, #332]	; (8000748 <getKeyInput+0x178>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d125      	bne.n	800064e <getKeyInput+0x7e>
 8000602:	4b51      	ldr	r3, [pc, #324]	; (8000748 <getKeyInput+0x178>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	4b52      	ldr	r3, [pc, #328]	; (8000750 <getKeyInput+0x180>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	429a      	cmp	r2, r3
 800060c:	d11f      	bne.n	800064e <getKeyInput+0x7e>
		if(KeyReg3 != KeyReg2){
 800060e:	4b52      	ldr	r3, [pc, #328]	; (8000758 <getKeyInput+0x188>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	4b4f      	ldr	r3, [pc, #316]	; (8000750 <getKeyInput+0x180>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	429a      	cmp	r2, r3
 8000618:	d00d      	beq.n	8000636 <getKeyInput+0x66>
			KeyReg3 = KeyReg2;
 800061a:	4b4d      	ldr	r3, [pc, #308]	; (8000750 <getKeyInput+0x180>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a4e      	ldr	r2, [pc, #312]	; (8000758 <getKeyInput+0x188>)
 8000620:	6013      	str	r3, [r2, #0]
			if(KeyReg2 == PRESS_STATE){
 8000622:	4b4b      	ldr	r3, [pc, #300]	; (8000750 <getKeyInput+0x180>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d111      	bne.n	800064e <getKeyInput+0x7e>
				//TODO
				subKeyProcess1();
 800062a:	f7ff ff77 	bl	800051c <subKeyProcess1>
				TimeForKeyPress = 200;
 800062e:	4b4b      	ldr	r3, [pc, #300]	; (800075c <getKeyInput+0x18c>)
 8000630:	22c8      	movs	r2, #200	; 0xc8
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	e00b      	b.n	800064e <getKeyInput+0x7e>
			}
		}else{
				TimeForKeyPress --;
 8000636:	4b49      	ldr	r3, [pc, #292]	; (800075c <getKeyInput+0x18c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3b01      	subs	r3, #1
 800063c:	4a47      	ldr	r2, [pc, #284]	; (800075c <getKeyInput+0x18c>)
 800063e:	6013      	str	r3, [r2, #0]
				if(TimeForKeyPress == 0){
 8000640:	4b46      	ldr	r3, [pc, #280]	; (800075c <getKeyInput+0x18c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d102      	bne.n	800064e <getKeyInput+0x7e>
					KeyReg3 = NORMAL_STATE;
 8000648:	4b43      	ldr	r3, [pc, #268]	; (8000758 <getKeyInput+0x188>)
 800064a:	2201      	movs	r2, #1
 800064c:	601a      	str	r2, [r3, #0]
				}
		}
	}
	//BUTTON2
	KeyReg4 = KeyReg5;
 800064e:	4b44      	ldr	r3, [pc, #272]	; (8000760 <getKeyInput+0x190>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a44      	ldr	r2, [pc, #272]	; (8000764 <getKeyInput+0x194>)
 8000654:	6013      	str	r3, [r2, #0]
	KeyReg5 = KeyReg6;
 8000656:	4b44      	ldr	r3, [pc, #272]	; (8000768 <getKeyInput+0x198>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a41      	ldr	r2, [pc, #260]	; (8000760 <getKeyInput+0x190>)
 800065c:	6013      	str	r3, [r2, #0]
	KeyReg6 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800065e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000662:	483c      	ldr	r0, [pc, #240]	; (8000754 <getKeyInput+0x184>)
 8000664:	f001 ffae 	bl	80025c4 <HAL_GPIO_ReadPin>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	4b3e      	ldr	r3, [pc, #248]	; (8000768 <getKeyInput+0x198>)
 800066e:	601a      	str	r2, [r3, #0]
	if((KeyReg4 == KeyReg5) && (KeyReg5 == KeyReg6)){
 8000670:	4b3c      	ldr	r3, [pc, #240]	; (8000764 <getKeyInput+0x194>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b3a      	ldr	r3, [pc, #232]	; (8000760 <getKeyInput+0x190>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	429a      	cmp	r2, r3
 800067a:	d125      	bne.n	80006c8 <getKeyInput+0xf8>
 800067c:	4b38      	ldr	r3, [pc, #224]	; (8000760 <getKeyInput+0x190>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b39      	ldr	r3, [pc, #228]	; (8000768 <getKeyInput+0x198>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	429a      	cmp	r2, r3
 8000686:	d11f      	bne.n	80006c8 <getKeyInput+0xf8>
		if(KeyReg7 != KeyReg6){
 8000688:	4b38      	ldr	r3, [pc, #224]	; (800076c <getKeyInput+0x19c>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b36      	ldr	r3, [pc, #216]	; (8000768 <getKeyInput+0x198>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	429a      	cmp	r2, r3
 8000692:	d00d      	beq.n	80006b0 <getKeyInput+0xe0>
			KeyReg7 = KeyReg6;
 8000694:	4b34      	ldr	r3, [pc, #208]	; (8000768 <getKeyInput+0x198>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a34      	ldr	r2, [pc, #208]	; (800076c <getKeyInput+0x19c>)
 800069a:	6013      	str	r3, [r2, #0]
			if(KeyReg6 == PRESS_STATE){
 800069c:	4b32      	ldr	r3, [pc, #200]	; (8000768 <getKeyInput+0x198>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d111      	bne.n	80006c8 <getKeyInput+0xf8>
				//TODO
				subKeyProcess2();
 80006a4:	f7ff ff58 	bl	8000558 <subKeyProcess2>
				TimeForKeyPress = 200;
 80006a8:	4b2c      	ldr	r3, [pc, #176]	; (800075c <getKeyInput+0x18c>)
 80006aa:	22c8      	movs	r2, #200	; 0xc8
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	e00b      	b.n	80006c8 <getKeyInput+0xf8>
			}
		}else{
				TimeForKeyPress --;
 80006b0:	4b2a      	ldr	r3, [pc, #168]	; (800075c <getKeyInput+0x18c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3b01      	subs	r3, #1
 80006b6:	4a29      	ldr	r2, [pc, #164]	; (800075c <getKeyInput+0x18c>)
 80006b8:	6013      	str	r3, [r2, #0]
				if(TimeForKeyPress == 0){
 80006ba:	4b28      	ldr	r3, [pc, #160]	; (800075c <getKeyInput+0x18c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d102      	bne.n	80006c8 <getKeyInput+0xf8>
					KeyReg7 = NORMAL_STATE;
 80006c2:	4b2a      	ldr	r3, [pc, #168]	; (800076c <getKeyInput+0x19c>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
				}
		}
	}
	// BUTTON3
	KeyReg8 = KeyReg9;
 80006c8:	4b29      	ldr	r3, [pc, #164]	; (8000770 <getKeyInput+0x1a0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a29      	ldr	r2, [pc, #164]	; (8000774 <getKeyInput+0x1a4>)
 80006ce:	6013      	str	r3, [r2, #0]
	KeyReg9 = KeyReg10;
 80006d0:	4b29      	ldr	r3, [pc, #164]	; (8000778 <getKeyInput+0x1a8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a26      	ldr	r2, [pc, #152]	; (8000770 <getKeyInput+0x1a0>)
 80006d6:	6013      	str	r3, [r2, #0]
	KeyReg10 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80006d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006dc:	481d      	ldr	r0, [pc, #116]	; (8000754 <getKeyInput+0x184>)
 80006de:	f001 ff71 	bl	80025c4 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b24      	ldr	r3, [pc, #144]	; (8000778 <getKeyInput+0x1a8>)
 80006e8:	601a      	str	r2, [r3, #0]
	if((KeyReg8 == KeyReg9) && (KeyReg10 == KeyReg9)){
 80006ea:	4b22      	ldr	r3, [pc, #136]	; (8000774 <getKeyInput+0x1a4>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <getKeyInput+0x1a0>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d125      	bne.n	8000742 <getKeyInput+0x172>
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <getKeyInput+0x1a8>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <getKeyInput+0x1a0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d11f      	bne.n	8000742 <getKeyInput+0x172>
		if(KeyReg11 != KeyReg10){
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <getKeyInput+0x1ac>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <getKeyInput+0x1a8>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	429a      	cmp	r2, r3
 800070c:	d00d      	beq.n	800072a <getKeyInput+0x15a>
			KeyReg11 = KeyReg10;
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <getKeyInput+0x1a8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a1a      	ldr	r2, [pc, #104]	; (800077c <getKeyInput+0x1ac>)
 8000714:	6013      	str	r3, [r2, #0]
			if(KeyReg10 == PRESS_STATE){
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <getKeyInput+0x1a8>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d111      	bne.n	8000742 <getKeyInput+0x172>
				//TODO
				subKeyProcess3();
 800071e:	f7ff ff39 	bl	8000594 <subKeyProcess3>
				TimeForKeyPress = 200;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <getKeyInput+0x18c>)
 8000724:	22c8      	movs	r2, #200	; 0xc8
 8000726:	601a      	str	r2, [r3, #0]
				if(TimeForKeyPress == 0){
					KeyReg11 = NORMAL_STATE;
				}
		}
	}
}
 8000728:	e00b      	b.n	8000742 <getKeyInput+0x172>
				TimeForKeyPress --;
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <getKeyInput+0x18c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	3b01      	subs	r3, #1
 8000730:	4a0a      	ldr	r2, [pc, #40]	; (800075c <getKeyInput+0x18c>)
 8000732:	6013      	str	r3, [r2, #0]
				if(TimeForKeyPress == 0){
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <getKeyInput+0x18c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d102      	bne.n	8000742 <getKeyInput+0x172>
					KeyReg11 = NORMAL_STATE;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <getKeyInput+0x1ac>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000004 	.word	0x20000004
 800074c:	20000000 	.word	0x20000000
 8000750:	20000008 	.word	0x20000008
 8000754:	40011000 	.word	0x40011000
 8000758:	2000000c 	.word	0x2000000c
 800075c:	20000030 	.word	0x20000030
 8000760:	20000014 	.word	0x20000014
 8000764:	20000010 	.word	0x20000010
 8000768:	20000018 	.word	0x20000018
 800076c:	2000001c 	.word	0x2000001c
 8000770:	20000024 	.word	0x20000024
 8000774:	20000020 	.word	0x20000020
 8000778:	20000028 	.word	0x20000028
 800077c:	2000002c 	.word	0x2000002c

08000780 <ledOFF>:
 */

#include "display.h"
#include "main.h"

void ledOFF(){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin, SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2102      	movs	r1, #2
 8000788:	4807      	ldr	r0, [pc, #28]	; (80007a8 <ledOFF+0x28>)
 800078a:	f001 ff32 	bl	80025f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin, SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2104      	movs	r1, #4
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <ledOFF+0x28>)
 8000794:	f001 ff2d 	bl	80025f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin, SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2108      	movs	r1, #8
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <ledOFF+0x28>)
 800079e:	f001 ff28 	bl	80025f2 <HAL_GPIO_WritePin>
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40010800 	.word	0x40010800

080007ac <ledON>:
void ledON(){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin, RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2102      	movs	r1, #2
 80007b4:	4807      	ldr	r0, [pc, #28]	; (80007d4 <ledON+0x28>)
 80007b6:	f001 ff1c 	bl	80025f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin, RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2104      	movs	r1, #4
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <ledON+0x28>)
 80007c0:	f001 ff17 	bl	80025f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin, RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2108      	movs	r1, #8
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <ledON+0x28>)
 80007ca:	f001 ff12 	bl	80025f2 <HAL_GPIO_WritePin>
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40010800 	.word	0x40010800

080007d8 <ledredON>:
void ledredON(){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin, RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2102      	movs	r1, #2
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <ledredON+0x28>)
 80007e2:	f001 ff06 	bl	80025f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin, SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2104      	movs	r1, #4
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <ledredON+0x28>)
 80007ec:	f001 ff01 	bl	80025f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin, SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2108      	movs	r1, #8
 80007f4:	4802      	ldr	r0, [pc, #8]	; (8000800 <ledredON+0x28>)
 80007f6:	f001 fefc 	bl	80025f2 <HAL_GPIO_WritePin>
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40010800 	.word	0x40010800

08000804 <ledgreenON>:
void ledgreenON(){
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin, SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2102      	movs	r1, #2
 800080c:	4807      	ldr	r0, [pc, #28]	; (800082c <ledgreenON+0x28>)
 800080e:	f001 fef0 	bl	80025f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin, SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2104      	movs	r1, #4
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <ledgreenON+0x28>)
 8000818:	f001 feeb 	bl	80025f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin, RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2108      	movs	r1, #8
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <ledgreenON+0x28>)
 8000822:	f001 fee6 	bl	80025f2 <HAL_GPIO_WritePin>
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40010800 	.word	0x40010800

08000830 <ledyellowON>:
void ledyellowON(){
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin, SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2102      	movs	r1, #2
 8000838:	4807      	ldr	r0, [pc, #28]	; (8000858 <ledyellowON+0x28>)
 800083a:	f001 feda 	bl	80025f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin, RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2104      	movs	r1, #4
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <ledyellowON+0x28>)
 8000844:	f001 fed5 	bl	80025f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin, SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2108      	movs	r1, #8
 800084c:	4802      	ldr	r0, [pc, #8]	; (8000858 <ledyellowON+0x28>)
 800084e:	f001 fed0 	bl	80025f2 <HAL_GPIO_WritePin>
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40010800 	.word	0x40010800

0800085c <display7SEG1>:

void display7SEG1(int num){
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b09      	cmp	r3, #9
 8000868:	f200 819e 	bhi.w	8000ba8 <display7SEG1+0x34c>
 800086c:	a201      	add	r2, pc, #4	; (adr r2, 8000874 <display7SEG1+0x18>)
 800086e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000872:	bf00      	nop
 8000874:	0800089d 	.word	0x0800089d
 8000878:	080008eb 	.word	0x080008eb
 800087c:	08000939 	.word	0x08000939
 8000880:	08000987 	.word	0x08000987
 8000884:	080009d5 	.word	0x080009d5
 8000888:	08000a23 	.word	0x08000a23
 800088c:	08000a71 	.word	0x08000a71
 8000890:	08000abf 	.word	0x08000abf
 8000894:	08000b0d 	.word	0x08000b0d
 8000898:	08000b5b 	.word	0x08000b5b
	switch(num) {
	  case 0:
		  HAL_GPIO_WritePin ( SEG1_A_GPIO_Port , SEG1_A_Pin ,RESET) ;
 800089c:	2200      	movs	r2, #0
 800089e:	2110      	movs	r1, #16
 80008a0:	48c4      	ldr	r0, [pc, #784]	; (8000bb4 <display7SEG1+0x358>)
 80008a2:	f001 fea6 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_B_GPIO_Port , SEG1_B_Pin ,RESET );
 80008a6:	2200      	movs	r2, #0
 80008a8:	2120      	movs	r1, #32
 80008aa:	48c2      	ldr	r0, [pc, #776]	; (8000bb4 <display7SEG1+0x358>)
 80008ac:	f001 fea1 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_C_GPIO_Port , SEG1_C_Pin ,RESET) ;
 80008b0:	2200      	movs	r2, #0
 80008b2:	2140      	movs	r1, #64	; 0x40
 80008b4:	48bf      	ldr	r0, [pc, #764]	; (8000bb4 <display7SEG1+0x358>)
 80008b6:	f001 fe9c 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_D_GPIO_Port , SEG1_D_Pin ,RESET );
 80008ba:	2200      	movs	r2, #0
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	48bd      	ldr	r0, [pc, #756]	; (8000bb4 <display7SEG1+0x358>)
 80008c0:	f001 fe97 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_E_GPIO_Port , SEG1_E_Pin ,RESET) ;
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ca:	48ba      	ldr	r0, [pc, #744]	; (8000bb4 <display7SEG1+0x358>)
 80008cc:	f001 fe91 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_F_GPIO_Port , SEG1_F_Pin ,RESET );
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d6:	48b7      	ldr	r0, [pc, #732]	; (8000bb4 <display7SEG1+0x358>)
 80008d8:	f001 fe8b 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_G_GPIO_Port , SEG1_G_Pin ,SET) ;
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e2:	48b4      	ldr	r0, [pc, #720]	; (8000bb4 <display7SEG1+0x358>)
 80008e4:	f001 fe85 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 80008e8:	e15f      	b.n	8000baa <display7SEG1+0x34e>
	  case 1:
		  HAL_GPIO_WritePin ( SEG1_A_GPIO_Port , SEG1_A_Pin ,SET) ;
 80008ea:	2201      	movs	r2, #1
 80008ec:	2110      	movs	r1, #16
 80008ee:	48b1      	ldr	r0, [pc, #708]	; (8000bb4 <display7SEG1+0x358>)
 80008f0:	f001 fe7f 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_B_GPIO_Port , SEG1_B_Pin ,RESET );
 80008f4:	2200      	movs	r2, #0
 80008f6:	2120      	movs	r1, #32
 80008f8:	48ae      	ldr	r0, [pc, #696]	; (8000bb4 <display7SEG1+0x358>)
 80008fa:	f001 fe7a 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_C_GPIO_Port , SEG1_C_Pin ,RESET) ;
 80008fe:	2200      	movs	r2, #0
 8000900:	2140      	movs	r1, #64	; 0x40
 8000902:	48ac      	ldr	r0, [pc, #688]	; (8000bb4 <display7SEG1+0x358>)
 8000904:	f001 fe75 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_D_GPIO_Port , SEG1_D_Pin ,SET );
 8000908:	2201      	movs	r2, #1
 800090a:	2180      	movs	r1, #128	; 0x80
 800090c:	48a9      	ldr	r0, [pc, #676]	; (8000bb4 <display7SEG1+0x358>)
 800090e:	f001 fe70 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_E_GPIO_Port , SEG1_E_Pin ,SET) ;
 8000912:	2201      	movs	r2, #1
 8000914:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000918:	48a6      	ldr	r0, [pc, #664]	; (8000bb4 <display7SEG1+0x358>)
 800091a:	f001 fe6a 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_F_GPIO_Port , SEG1_F_Pin ,SET );
 800091e:	2201      	movs	r2, #1
 8000920:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000924:	48a3      	ldr	r0, [pc, #652]	; (8000bb4 <display7SEG1+0x358>)
 8000926:	f001 fe64 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_G_GPIO_Port , SEG1_G_Pin ,SET) ;
 800092a:	2201      	movs	r2, #1
 800092c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000930:	48a0      	ldr	r0, [pc, #640]	; (8000bb4 <display7SEG1+0x358>)
 8000932:	f001 fe5e 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8000936:	e138      	b.n	8000baa <display7SEG1+0x34e>
	  case 2:
		  HAL_GPIO_WritePin ( SEG1_A_GPIO_Port , SEG1_A_Pin ,RESET) ;
 8000938:	2200      	movs	r2, #0
 800093a:	2110      	movs	r1, #16
 800093c:	489d      	ldr	r0, [pc, #628]	; (8000bb4 <display7SEG1+0x358>)
 800093e:	f001 fe58 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_B_GPIO_Port , SEG1_B_Pin ,RESET );
 8000942:	2200      	movs	r2, #0
 8000944:	2120      	movs	r1, #32
 8000946:	489b      	ldr	r0, [pc, #620]	; (8000bb4 <display7SEG1+0x358>)
 8000948:	f001 fe53 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_C_GPIO_Port , SEG1_C_Pin ,SET) ;
 800094c:	2201      	movs	r2, #1
 800094e:	2140      	movs	r1, #64	; 0x40
 8000950:	4898      	ldr	r0, [pc, #608]	; (8000bb4 <display7SEG1+0x358>)
 8000952:	f001 fe4e 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_D_GPIO_Port , SEG1_D_Pin ,RESET );
 8000956:	2200      	movs	r2, #0
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	4896      	ldr	r0, [pc, #600]	; (8000bb4 <display7SEG1+0x358>)
 800095c:	f001 fe49 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_E_GPIO_Port , SEG1_E_Pin ,RESET) ;
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000966:	4893      	ldr	r0, [pc, #588]	; (8000bb4 <display7SEG1+0x358>)
 8000968:	f001 fe43 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_F_GPIO_Port , SEG1_F_Pin ,SET );
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000972:	4890      	ldr	r0, [pc, #576]	; (8000bb4 <display7SEG1+0x358>)
 8000974:	f001 fe3d 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_G_GPIO_Port , SEG1_G_Pin ,RESET) ;
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800097e:	488d      	ldr	r0, [pc, #564]	; (8000bb4 <display7SEG1+0x358>)
 8000980:	f001 fe37 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8000984:	e111      	b.n	8000baa <display7SEG1+0x34e>
	  case 3:
		  HAL_GPIO_WritePin ( SEG1_A_GPIO_Port , SEG1_A_Pin ,RESET) ;
 8000986:	2200      	movs	r2, #0
 8000988:	2110      	movs	r1, #16
 800098a:	488a      	ldr	r0, [pc, #552]	; (8000bb4 <display7SEG1+0x358>)
 800098c:	f001 fe31 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_B_GPIO_Port , SEG1_B_Pin ,RESET );
 8000990:	2200      	movs	r2, #0
 8000992:	2120      	movs	r1, #32
 8000994:	4887      	ldr	r0, [pc, #540]	; (8000bb4 <display7SEG1+0x358>)
 8000996:	f001 fe2c 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_C_GPIO_Port , SEG1_C_Pin ,RESET) ;
 800099a:	2200      	movs	r2, #0
 800099c:	2140      	movs	r1, #64	; 0x40
 800099e:	4885      	ldr	r0, [pc, #532]	; (8000bb4 <display7SEG1+0x358>)
 80009a0:	f001 fe27 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_D_GPIO_Port , SEG1_D_Pin ,RESET );
 80009a4:	2200      	movs	r2, #0
 80009a6:	2180      	movs	r1, #128	; 0x80
 80009a8:	4882      	ldr	r0, [pc, #520]	; (8000bb4 <display7SEG1+0x358>)
 80009aa:	f001 fe22 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_E_GPIO_Port , SEG1_E_Pin ,SET) ;
 80009ae:	2201      	movs	r2, #1
 80009b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009b4:	487f      	ldr	r0, [pc, #508]	; (8000bb4 <display7SEG1+0x358>)
 80009b6:	f001 fe1c 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_F_GPIO_Port , SEG1_F_Pin ,SET );
 80009ba:	2201      	movs	r2, #1
 80009bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c0:	487c      	ldr	r0, [pc, #496]	; (8000bb4 <display7SEG1+0x358>)
 80009c2:	f001 fe16 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_G_GPIO_Port , SEG1_G_Pin ,RESET) ;
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009cc:	4879      	ldr	r0, [pc, #484]	; (8000bb4 <display7SEG1+0x358>)
 80009ce:	f001 fe10 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 80009d2:	e0ea      	b.n	8000baa <display7SEG1+0x34e>
	  case 4:
		  HAL_GPIO_WritePin ( SEG1_A_GPIO_Port , SEG1_A_Pin ,SET) ;
 80009d4:	2201      	movs	r2, #1
 80009d6:	2110      	movs	r1, #16
 80009d8:	4876      	ldr	r0, [pc, #472]	; (8000bb4 <display7SEG1+0x358>)
 80009da:	f001 fe0a 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_B_GPIO_Port , SEG1_B_Pin ,RESET );
 80009de:	2200      	movs	r2, #0
 80009e0:	2120      	movs	r1, #32
 80009e2:	4874      	ldr	r0, [pc, #464]	; (8000bb4 <display7SEG1+0x358>)
 80009e4:	f001 fe05 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_C_GPIO_Port , SEG1_C_Pin ,RESET) ;
 80009e8:	2200      	movs	r2, #0
 80009ea:	2140      	movs	r1, #64	; 0x40
 80009ec:	4871      	ldr	r0, [pc, #452]	; (8000bb4 <display7SEG1+0x358>)
 80009ee:	f001 fe00 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_D_GPIO_Port , SEG1_D_Pin ,SET );
 80009f2:	2201      	movs	r2, #1
 80009f4:	2180      	movs	r1, #128	; 0x80
 80009f6:	486f      	ldr	r0, [pc, #444]	; (8000bb4 <display7SEG1+0x358>)
 80009f8:	f001 fdfb 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_E_GPIO_Port , SEG1_E_Pin ,SET) ;
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a02:	486c      	ldr	r0, [pc, #432]	; (8000bb4 <display7SEG1+0x358>)
 8000a04:	f001 fdf5 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_F_GPIO_Port , SEG1_F_Pin ,RESET );
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a0e:	4869      	ldr	r0, [pc, #420]	; (8000bb4 <display7SEG1+0x358>)
 8000a10:	f001 fdef 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_G_GPIO_Port , SEG1_G_Pin ,RESET) ;
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a1a:	4866      	ldr	r0, [pc, #408]	; (8000bb4 <display7SEG1+0x358>)
 8000a1c:	f001 fde9 	bl	80025f2 <HAL_GPIO_WritePin>
	  	break;
 8000a20:	e0c3      	b.n	8000baa <display7SEG1+0x34e>
	  case 5:
		  HAL_GPIO_WritePin ( SEG1_A_GPIO_Port , SEG1_A_Pin ,RESET) ;
 8000a22:	2200      	movs	r2, #0
 8000a24:	2110      	movs	r1, #16
 8000a26:	4863      	ldr	r0, [pc, #396]	; (8000bb4 <display7SEG1+0x358>)
 8000a28:	f001 fde3 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_B_GPIO_Port , SEG1_B_Pin ,SET );
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2120      	movs	r1, #32
 8000a30:	4860      	ldr	r0, [pc, #384]	; (8000bb4 <display7SEG1+0x358>)
 8000a32:	f001 fdde 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_C_GPIO_Port , SEG1_C_Pin ,RESET) ;
 8000a36:	2200      	movs	r2, #0
 8000a38:	2140      	movs	r1, #64	; 0x40
 8000a3a:	485e      	ldr	r0, [pc, #376]	; (8000bb4 <display7SEG1+0x358>)
 8000a3c:	f001 fdd9 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_D_GPIO_Port , SEG1_D_Pin ,RESET );
 8000a40:	2200      	movs	r2, #0
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	485b      	ldr	r0, [pc, #364]	; (8000bb4 <display7SEG1+0x358>)
 8000a46:	f001 fdd4 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_E_GPIO_Port , SEG1_E_Pin ,SET) ;
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a50:	4858      	ldr	r0, [pc, #352]	; (8000bb4 <display7SEG1+0x358>)
 8000a52:	f001 fdce 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_F_GPIO_Port , SEG1_F_Pin ,RESET );
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a5c:	4855      	ldr	r0, [pc, #340]	; (8000bb4 <display7SEG1+0x358>)
 8000a5e:	f001 fdc8 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_G_GPIO_Port , SEG1_G_Pin ,RESET) ;
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a68:	4852      	ldr	r0, [pc, #328]	; (8000bb4 <display7SEG1+0x358>)
 8000a6a:	f001 fdc2 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8000a6e:	e09c      	b.n	8000baa <display7SEG1+0x34e>
	  case 6:
		  HAL_GPIO_WritePin ( SEG1_A_GPIO_Port , SEG1_A_Pin ,RESET) ;
 8000a70:	2200      	movs	r2, #0
 8000a72:	2110      	movs	r1, #16
 8000a74:	484f      	ldr	r0, [pc, #316]	; (8000bb4 <display7SEG1+0x358>)
 8000a76:	f001 fdbc 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_B_GPIO_Port , SEG1_B_Pin ,SET );
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	484d      	ldr	r0, [pc, #308]	; (8000bb4 <display7SEG1+0x358>)
 8000a80:	f001 fdb7 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_C_GPIO_Port , SEG1_C_Pin ,RESET) ;
 8000a84:	2200      	movs	r2, #0
 8000a86:	2140      	movs	r1, #64	; 0x40
 8000a88:	484a      	ldr	r0, [pc, #296]	; (8000bb4 <display7SEG1+0x358>)
 8000a8a:	f001 fdb2 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_D_GPIO_Port , SEG1_D_Pin ,RESET );
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	4848      	ldr	r0, [pc, #288]	; (8000bb4 <display7SEG1+0x358>)
 8000a94:	f001 fdad 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_E_GPIO_Port , SEG1_E_Pin ,RESET) ;
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9e:	4845      	ldr	r0, [pc, #276]	; (8000bb4 <display7SEG1+0x358>)
 8000aa0:	f001 fda7 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_F_GPIO_Port , SEG1_F_Pin ,RESET );
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aaa:	4842      	ldr	r0, [pc, #264]	; (8000bb4 <display7SEG1+0x358>)
 8000aac:	f001 fda1 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_G_GPIO_Port , SEG1_G_Pin ,RESET) ;
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab6:	483f      	ldr	r0, [pc, #252]	; (8000bb4 <display7SEG1+0x358>)
 8000ab8:	f001 fd9b 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8000abc:	e075      	b.n	8000baa <display7SEG1+0x34e>
	  case 7:
		  HAL_GPIO_WritePin ( SEG1_A_GPIO_Port , SEG1_A_Pin ,RESET) ;
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	483c      	ldr	r0, [pc, #240]	; (8000bb4 <display7SEG1+0x358>)
 8000ac4:	f001 fd95 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_B_GPIO_Port , SEG1_B_Pin ,RESET );
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2120      	movs	r1, #32
 8000acc:	4839      	ldr	r0, [pc, #228]	; (8000bb4 <display7SEG1+0x358>)
 8000ace:	f001 fd90 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_C_GPIO_Port , SEG1_C_Pin ,RESET) ;
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	4837      	ldr	r0, [pc, #220]	; (8000bb4 <display7SEG1+0x358>)
 8000ad8:	f001 fd8b 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_D_GPIO_Port , SEG1_D_Pin ,SET );
 8000adc:	2201      	movs	r2, #1
 8000ade:	2180      	movs	r1, #128	; 0x80
 8000ae0:	4834      	ldr	r0, [pc, #208]	; (8000bb4 <display7SEG1+0x358>)
 8000ae2:	f001 fd86 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_E_GPIO_Port , SEG1_E_Pin ,SET) ;
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aec:	4831      	ldr	r0, [pc, #196]	; (8000bb4 <display7SEG1+0x358>)
 8000aee:	f001 fd80 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_F_GPIO_Port , SEG1_F_Pin ,SET );
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af8:	482e      	ldr	r0, [pc, #184]	; (8000bb4 <display7SEG1+0x358>)
 8000afa:	f001 fd7a 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_G_GPIO_Port , SEG1_G_Pin ,SET) ;
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b04:	482b      	ldr	r0, [pc, #172]	; (8000bb4 <display7SEG1+0x358>)
 8000b06:	f001 fd74 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8000b0a:	e04e      	b.n	8000baa <display7SEG1+0x34e>
	  case 8:
		  HAL_GPIO_WritePin ( SEG1_A_GPIO_Port , SEG1_A_Pin ,RESET) ;
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2110      	movs	r1, #16
 8000b10:	4828      	ldr	r0, [pc, #160]	; (8000bb4 <display7SEG1+0x358>)
 8000b12:	f001 fd6e 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_B_GPIO_Port , SEG1_B_Pin ,RESET );
 8000b16:	2200      	movs	r2, #0
 8000b18:	2120      	movs	r1, #32
 8000b1a:	4826      	ldr	r0, [pc, #152]	; (8000bb4 <display7SEG1+0x358>)
 8000b1c:	f001 fd69 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_C_GPIO_Port , SEG1_C_Pin ,RESET) ;
 8000b20:	2200      	movs	r2, #0
 8000b22:	2140      	movs	r1, #64	; 0x40
 8000b24:	4823      	ldr	r0, [pc, #140]	; (8000bb4 <display7SEG1+0x358>)
 8000b26:	f001 fd64 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_D_GPIO_Port , SEG1_D_Pin ,RESET );
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2180      	movs	r1, #128	; 0x80
 8000b2e:	4821      	ldr	r0, [pc, #132]	; (8000bb4 <display7SEG1+0x358>)
 8000b30:	f001 fd5f 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_E_GPIO_Port , SEG1_E_Pin ,RESET) ;
 8000b34:	2200      	movs	r2, #0
 8000b36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b3a:	481e      	ldr	r0, [pc, #120]	; (8000bb4 <display7SEG1+0x358>)
 8000b3c:	f001 fd59 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_F_GPIO_Port , SEG1_F_Pin ,RESET );
 8000b40:	2200      	movs	r2, #0
 8000b42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b46:	481b      	ldr	r0, [pc, #108]	; (8000bb4 <display7SEG1+0x358>)
 8000b48:	f001 fd53 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_G_GPIO_Port , SEG1_G_Pin ,RESET) ;
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b52:	4818      	ldr	r0, [pc, #96]	; (8000bb4 <display7SEG1+0x358>)
 8000b54:	f001 fd4d 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8000b58:	e027      	b.n	8000baa <display7SEG1+0x34e>
	  case 9:
		  HAL_GPIO_WritePin ( SEG1_A_GPIO_Port , SEG1_A_Pin ,RESET) ;
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2110      	movs	r1, #16
 8000b5e:	4815      	ldr	r0, [pc, #84]	; (8000bb4 <display7SEG1+0x358>)
 8000b60:	f001 fd47 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_B_GPIO_Port , SEG1_B_Pin ,RESET );
 8000b64:	2200      	movs	r2, #0
 8000b66:	2120      	movs	r1, #32
 8000b68:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <display7SEG1+0x358>)
 8000b6a:	f001 fd42 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_C_GPIO_Port , SEG1_C_Pin ,RESET) ;
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2140      	movs	r1, #64	; 0x40
 8000b72:	4810      	ldr	r0, [pc, #64]	; (8000bb4 <display7SEG1+0x358>)
 8000b74:	f001 fd3d 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_D_GPIO_Port , SEG1_D_Pin ,RESET );
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2180      	movs	r1, #128	; 0x80
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <display7SEG1+0x358>)
 8000b7e:	f001 fd38 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_E_GPIO_Port , SEG1_E_Pin ,SET) ;
 8000b82:	2201      	movs	r2, #1
 8000b84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b88:	480a      	ldr	r0, [pc, #40]	; (8000bb4 <display7SEG1+0x358>)
 8000b8a:	f001 fd32 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_F_GPIO_Port , SEG1_F_Pin ,RESET );
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b94:	4807      	ldr	r0, [pc, #28]	; (8000bb4 <display7SEG1+0x358>)
 8000b96:	f001 fd2c 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_G_GPIO_Port , SEG1_G_Pin ,RESET) ;
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <display7SEG1+0x358>)
 8000ba2:	f001 fd26 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8000ba6:	e000      	b.n	8000baa <display7SEG1+0x34e>
	  default:
		break;
 8000ba8:	bf00      	nop

	}
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40010800 	.word	0x40010800

08000bb8 <display7SEG2>:


void display7SEG2(int num){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b09      	cmp	r3, #9
 8000bc4:	f200 81b2 	bhi.w	8000f2c <display7SEG2+0x374>
 8000bc8:	a201      	add	r2, pc, #4	; (adr r2, 8000bd0 <display7SEG2+0x18>)
 8000bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bce:	bf00      	nop
 8000bd0:	08000bf9 	.word	0x08000bf9
 8000bd4:	08000c4b 	.word	0x08000c4b
 8000bd8:	08000c9d 	.word	0x08000c9d
 8000bdc:	08000cef 	.word	0x08000cef
 8000be0:	08000d41 	.word	0x08000d41
 8000be4:	08000d93 	.word	0x08000d93
 8000be8:	08000de5 	.word	0x08000de5
 8000bec:	08000e37 	.word	0x08000e37
 8000bf0:	08000e89 	.word	0x08000e89
 8000bf4:	08000edb 	.word	0x08000edb
	switch(num) {
	  case 0:
		  HAL_GPIO_WritePin ( SEG2_A_GPIO_Port , SEG2_A_Pin ,RESET) ;
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bfe:	48ce      	ldr	r0, [pc, #824]	; (8000f38 <display7SEG2+0x380>)
 8000c00:	f001 fcf7 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_B_GPIO_Port , SEG2_B_Pin ,RESET );
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0a:	48cb      	ldr	r0, [pc, #812]	; (8000f38 <display7SEG2+0x380>)
 8000c0c:	f001 fcf1 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_C_GPIO_Port , SEG2_C_Pin ,RESET) ;
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c16:	48c8      	ldr	r0, [pc, #800]	; (8000f38 <display7SEG2+0x380>)
 8000c18:	f001 fceb 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_D_GPIO_Port , SEG2_D_Pin ,RESET );
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c22:	48c5      	ldr	r0, [pc, #788]	; (8000f38 <display7SEG2+0x380>)
 8000c24:	f001 fce5 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_E_GPIO_Port , SEG2_E_Pin ,RESET) ;
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c2e:	48c2      	ldr	r0, [pc, #776]	; (8000f38 <display7SEG2+0x380>)
 8000c30:	f001 fcdf 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_F_GPIO_Port , SEG2_F_Pin ,RESET );
 8000c34:	2200      	movs	r2, #0
 8000c36:	2101      	movs	r1, #1
 8000c38:	48c0      	ldr	r0, [pc, #768]	; (8000f3c <display7SEG2+0x384>)
 8000c3a:	f001 fcda 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_G_GPIO_Port , SEG2_G_Pin ,SET) ;
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2102      	movs	r1, #2
 8000c42:	48be      	ldr	r0, [pc, #760]	; (8000f3c <display7SEG2+0x384>)
 8000c44:	f001 fcd5 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8000c48:	e171      	b.n	8000f2e <display7SEG2+0x376>
	  case 1:
		  HAL_GPIO_WritePin ( SEG2_A_GPIO_Port , SEG2_A_Pin ,SET) ;
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c50:	48b9      	ldr	r0, [pc, #740]	; (8000f38 <display7SEG2+0x380>)
 8000c52:	f001 fcce 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_B_GPIO_Port , SEG2_B_Pin ,RESET );
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5c:	48b6      	ldr	r0, [pc, #728]	; (8000f38 <display7SEG2+0x380>)
 8000c5e:	f001 fcc8 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_C_GPIO_Port , SEG2_C_Pin ,RESET) ;
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c68:	48b3      	ldr	r0, [pc, #716]	; (8000f38 <display7SEG2+0x380>)
 8000c6a:	f001 fcc2 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_D_GPIO_Port , SEG2_D_Pin ,SET );
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c74:	48b0      	ldr	r0, [pc, #704]	; (8000f38 <display7SEG2+0x380>)
 8000c76:	f001 fcbc 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_E_GPIO_Port , SEG2_E_Pin ,SET) ;
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c80:	48ad      	ldr	r0, [pc, #692]	; (8000f38 <display7SEG2+0x380>)
 8000c82:	f001 fcb6 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_F_GPIO_Port , SEG2_F_Pin ,SET );
 8000c86:	2201      	movs	r2, #1
 8000c88:	2101      	movs	r1, #1
 8000c8a:	48ac      	ldr	r0, [pc, #688]	; (8000f3c <display7SEG2+0x384>)
 8000c8c:	f001 fcb1 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_G_GPIO_Port , SEG2_G_Pin ,SET) ;
 8000c90:	2201      	movs	r2, #1
 8000c92:	2102      	movs	r1, #2
 8000c94:	48a9      	ldr	r0, [pc, #676]	; (8000f3c <display7SEG2+0x384>)
 8000c96:	f001 fcac 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8000c9a:	e148      	b.n	8000f2e <display7SEG2+0x376>
	  case 2:
		  HAL_GPIO_WritePin ( SEG2_A_GPIO_Port , SEG2_A_Pin ,RESET) ;
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ca2:	48a5      	ldr	r0, [pc, #660]	; (8000f38 <display7SEG2+0x380>)
 8000ca4:	f001 fca5 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_B_GPIO_Port , SEG2_B_Pin ,RESET );
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cae:	48a2      	ldr	r0, [pc, #648]	; (8000f38 <display7SEG2+0x380>)
 8000cb0:	f001 fc9f 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_C_GPIO_Port , SEG2_C_Pin ,SET) ;
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cba:	489f      	ldr	r0, [pc, #636]	; (8000f38 <display7SEG2+0x380>)
 8000cbc:	f001 fc99 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_D_GPIO_Port , SEG2_D_Pin ,RESET );
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc6:	489c      	ldr	r0, [pc, #624]	; (8000f38 <display7SEG2+0x380>)
 8000cc8:	f001 fc93 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_E_GPIO_Port , SEG2_E_Pin ,RESET) ;
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cd2:	4899      	ldr	r0, [pc, #612]	; (8000f38 <display7SEG2+0x380>)
 8000cd4:	f001 fc8d 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_F_GPIO_Port , SEG2_F_Pin ,SET );
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4897      	ldr	r0, [pc, #604]	; (8000f3c <display7SEG2+0x384>)
 8000cde:	f001 fc88 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_G_GPIO_Port , SEG2_G_Pin ,RESET) ;
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	4895      	ldr	r0, [pc, #596]	; (8000f3c <display7SEG2+0x384>)
 8000ce8:	f001 fc83 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8000cec:	e11f      	b.n	8000f2e <display7SEG2+0x376>
	  case 3:
		  HAL_GPIO_WritePin ( SEG2_A_GPIO_Port , SEG2_A_Pin ,RESET) ;
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cf4:	4890      	ldr	r0, [pc, #576]	; (8000f38 <display7SEG2+0x380>)
 8000cf6:	f001 fc7c 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_B_GPIO_Port , SEG2_B_Pin ,RESET );
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d00:	488d      	ldr	r0, [pc, #564]	; (8000f38 <display7SEG2+0x380>)
 8000d02:	f001 fc76 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_C_GPIO_Port , SEG2_C_Pin ,RESET) ;
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0c:	488a      	ldr	r0, [pc, #552]	; (8000f38 <display7SEG2+0x380>)
 8000d0e:	f001 fc70 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_D_GPIO_Port , SEG2_D_Pin ,RESET );
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d18:	4887      	ldr	r0, [pc, #540]	; (8000f38 <display7SEG2+0x380>)
 8000d1a:	f001 fc6a 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_E_GPIO_Port , SEG2_E_Pin ,SET) ;
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d24:	4884      	ldr	r0, [pc, #528]	; (8000f38 <display7SEG2+0x380>)
 8000d26:	f001 fc64 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_F_GPIO_Port , SEG2_F_Pin ,SET );
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	4883      	ldr	r0, [pc, #524]	; (8000f3c <display7SEG2+0x384>)
 8000d30:	f001 fc5f 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_G_GPIO_Port , SEG2_G_Pin ,RESET) ;
 8000d34:	2200      	movs	r2, #0
 8000d36:	2102      	movs	r1, #2
 8000d38:	4880      	ldr	r0, [pc, #512]	; (8000f3c <display7SEG2+0x384>)
 8000d3a:	f001 fc5a 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8000d3e:	e0f6      	b.n	8000f2e <display7SEG2+0x376>
	  case 4:
		  HAL_GPIO_WritePin ( SEG2_A_GPIO_Port , SEG2_A_Pin ,SET) ;
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d46:	487c      	ldr	r0, [pc, #496]	; (8000f38 <display7SEG2+0x380>)
 8000d48:	f001 fc53 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_B_GPIO_Port , SEG2_B_Pin ,RESET );
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d52:	4879      	ldr	r0, [pc, #484]	; (8000f38 <display7SEG2+0x380>)
 8000d54:	f001 fc4d 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_C_GPIO_Port , SEG2_C_Pin ,RESET) ;
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5e:	4876      	ldr	r0, [pc, #472]	; (8000f38 <display7SEG2+0x380>)
 8000d60:	f001 fc47 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_D_GPIO_Port , SEG2_D_Pin ,SET );
 8000d64:	2201      	movs	r2, #1
 8000d66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d6a:	4873      	ldr	r0, [pc, #460]	; (8000f38 <display7SEG2+0x380>)
 8000d6c:	f001 fc41 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_E_GPIO_Port , SEG2_E_Pin ,SET) ;
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d76:	4870      	ldr	r0, [pc, #448]	; (8000f38 <display7SEG2+0x380>)
 8000d78:	f001 fc3b 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_F_GPIO_Port , SEG2_F_Pin ,RESET );
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2101      	movs	r1, #1
 8000d80:	486e      	ldr	r0, [pc, #440]	; (8000f3c <display7SEG2+0x384>)
 8000d82:	f001 fc36 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_G_GPIO_Port , SEG2_G_Pin ,RESET) ;
 8000d86:	2200      	movs	r2, #0
 8000d88:	2102      	movs	r1, #2
 8000d8a:	486c      	ldr	r0, [pc, #432]	; (8000f3c <display7SEG2+0x384>)
 8000d8c:	f001 fc31 	bl	80025f2 <HAL_GPIO_WritePin>
	  	break;
 8000d90:	e0cd      	b.n	8000f2e <display7SEG2+0x376>
	  case 5:
		  HAL_GPIO_WritePin ( SEG2_A_GPIO_Port , SEG2_A_Pin ,RESET) ;
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d98:	4867      	ldr	r0, [pc, #412]	; (8000f38 <display7SEG2+0x380>)
 8000d9a:	f001 fc2a 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_B_GPIO_Port , SEG2_B_Pin ,SET );
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000da4:	4864      	ldr	r0, [pc, #400]	; (8000f38 <display7SEG2+0x380>)
 8000da6:	f001 fc24 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_C_GPIO_Port , SEG2_C_Pin ,RESET) ;
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db0:	4861      	ldr	r0, [pc, #388]	; (8000f38 <display7SEG2+0x380>)
 8000db2:	f001 fc1e 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_D_GPIO_Port , SEG2_D_Pin ,RESET );
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dbc:	485e      	ldr	r0, [pc, #376]	; (8000f38 <display7SEG2+0x380>)
 8000dbe:	f001 fc18 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_E_GPIO_Port , SEG2_E_Pin ,SET) ;
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dc8:	485b      	ldr	r0, [pc, #364]	; (8000f38 <display7SEG2+0x380>)
 8000dca:	f001 fc12 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_F_GPIO_Port , SEG2_F_Pin ,RESET );
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	485a      	ldr	r0, [pc, #360]	; (8000f3c <display7SEG2+0x384>)
 8000dd4:	f001 fc0d 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_G_GPIO_Port , SEG2_G_Pin ,RESET) ;
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2102      	movs	r1, #2
 8000ddc:	4857      	ldr	r0, [pc, #348]	; (8000f3c <display7SEG2+0x384>)
 8000dde:	f001 fc08 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8000de2:	e0a4      	b.n	8000f2e <display7SEG2+0x376>
	  case 6:
		  HAL_GPIO_WritePin ( SEG2_A_GPIO_Port , SEG2_A_Pin ,RESET) ;
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dea:	4853      	ldr	r0, [pc, #332]	; (8000f38 <display7SEG2+0x380>)
 8000dec:	f001 fc01 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_B_GPIO_Port , SEG2_B_Pin ,SET );
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df6:	4850      	ldr	r0, [pc, #320]	; (8000f38 <display7SEG2+0x380>)
 8000df8:	f001 fbfb 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_C_GPIO_Port , SEG2_C_Pin ,RESET) ;
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e02:	484d      	ldr	r0, [pc, #308]	; (8000f38 <display7SEG2+0x380>)
 8000e04:	f001 fbf5 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_D_GPIO_Port , SEG2_D_Pin ,RESET );
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e0e:	484a      	ldr	r0, [pc, #296]	; (8000f38 <display7SEG2+0x380>)
 8000e10:	f001 fbef 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_E_GPIO_Port , SEG2_E_Pin ,RESET) ;
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e1a:	4847      	ldr	r0, [pc, #284]	; (8000f38 <display7SEG2+0x380>)
 8000e1c:	f001 fbe9 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_F_GPIO_Port , SEG2_F_Pin ,RESET );
 8000e20:	2200      	movs	r2, #0
 8000e22:	2101      	movs	r1, #1
 8000e24:	4845      	ldr	r0, [pc, #276]	; (8000f3c <display7SEG2+0x384>)
 8000e26:	f001 fbe4 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_G_GPIO_Port , SEG2_G_Pin ,RESET) ;
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	4843      	ldr	r0, [pc, #268]	; (8000f3c <display7SEG2+0x384>)
 8000e30:	f001 fbdf 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8000e34:	e07b      	b.n	8000f2e <display7SEG2+0x376>
	  case 7:
		  HAL_GPIO_WritePin ( SEG2_A_GPIO_Port , SEG2_A_Pin ,RESET) ;
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e3c:	483e      	ldr	r0, [pc, #248]	; (8000f38 <display7SEG2+0x380>)
 8000e3e:	f001 fbd8 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_B_GPIO_Port , SEG2_B_Pin ,RESET );
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e48:	483b      	ldr	r0, [pc, #236]	; (8000f38 <display7SEG2+0x380>)
 8000e4a:	f001 fbd2 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_C_GPIO_Port , SEG2_C_Pin ,RESET) ;
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e54:	4838      	ldr	r0, [pc, #224]	; (8000f38 <display7SEG2+0x380>)
 8000e56:	f001 fbcc 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_D_GPIO_Port , SEG2_D_Pin ,SET );
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e60:	4835      	ldr	r0, [pc, #212]	; (8000f38 <display7SEG2+0x380>)
 8000e62:	f001 fbc6 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_E_GPIO_Port , SEG2_E_Pin ,SET) ;
 8000e66:	2201      	movs	r2, #1
 8000e68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e6c:	4832      	ldr	r0, [pc, #200]	; (8000f38 <display7SEG2+0x380>)
 8000e6e:	f001 fbc0 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_F_GPIO_Port , SEG2_F_Pin ,SET );
 8000e72:	2201      	movs	r2, #1
 8000e74:	2101      	movs	r1, #1
 8000e76:	4831      	ldr	r0, [pc, #196]	; (8000f3c <display7SEG2+0x384>)
 8000e78:	f001 fbbb 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_G_GPIO_Port , SEG2_G_Pin ,SET) ;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2102      	movs	r1, #2
 8000e80:	482e      	ldr	r0, [pc, #184]	; (8000f3c <display7SEG2+0x384>)
 8000e82:	f001 fbb6 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8000e86:	e052      	b.n	8000f2e <display7SEG2+0x376>
	  case 8:
		  HAL_GPIO_WritePin ( SEG2_A_GPIO_Port , SEG2_A_Pin ,RESET) ;
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e8e:	482a      	ldr	r0, [pc, #168]	; (8000f38 <display7SEG2+0x380>)
 8000e90:	f001 fbaf 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_B_GPIO_Port , SEG2_B_Pin ,RESET );
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e9a:	4827      	ldr	r0, [pc, #156]	; (8000f38 <display7SEG2+0x380>)
 8000e9c:	f001 fba9 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_C_GPIO_Port , SEG2_C_Pin ,RESET) ;
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea6:	4824      	ldr	r0, [pc, #144]	; (8000f38 <display7SEG2+0x380>)
 8000ea8:	f001 fba3 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_D_GPIO_Port , SEG2_D_Pin ,RESET );
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eb2:	4821      	ldr	r0, [pc, #132]	; (8000f38 <display7SEG2+0x380>)
 8000eb4:	f001 fb9d 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_E_GPIO_Port , SEG2_E_Pin ,RESET) ;
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ebe:	481e      	ldr	r0, [pc, #120]	; (8000f38 <display7SEG2+0x380>)
 8000ec0:	f001 fb97 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_F_GPIO_Port , SEG2_F_Pin ,RESET );
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	481c      	ldr	r0, [pc, #112]	; (8000f3c <display7SEG2+0x384>)
 8000eca:	f001 fb92 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_G_GPIO_Port , SEG2_G_Pin ,RESET) ;
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	481a      	ldr	r0, [pc, #104]	; (8000f3c <display7SEG2+0x384>)
 8000ed4:	f001 fb8d 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8000ed8:	e029      	b.n	8000f2e <display7SEG2+0x376>
	  case 9:
		  HAL_GPIO_WritePin ( SEG2_A_GPIO_Port , SEG2_A_Pin ,RESET) ;
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ee0:	4815      	ldr	r0, [pc, #84]	; (8000f38 <display7SEG2+0x380>)
 8000ee2:	f001 fb86 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_B_GPIO_Port , SEG2_B_Pin ,RESET );
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eec:	4812      	ldr	r0, [pc, #72]	; (8000f38 <display7SEG2+0x380>)
 8000eee:	f001 fb80 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_C_GPIO_Port , SEG2_C_Pin ,RESET) ;
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef8:	480f      	ldr	r0, [pc, #60]	; (8000f38 <display7SEG2+0x380>)
 8000efa:	f001 fb7a 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_D_GPIO_Port , SEG2_D_Pin ,RESET );
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <display7SEG2+0x380>)
 8000f06:	f001 fb74 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_E_GPIO_Port , SEG2_E_Pin ,SET) ;
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f10:	4809      	ldr	r0, [pc, #36]	; (8000f38 <display7SEG2+0x380>)
 8000f12:	f001 fb6e 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_F_GPIO_Port , SEG2_F_Pin ,RESET );
 8000f16:	2200      	movs	r2, #0
 8000f18:	2101      	movs	r1, #1
 8000f1a:	4808      	ldr	r0, [pc, #32]	; (8000f3c <display7SEG2+0x384>)
 8000f1c:	f001 fb69 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_G_GPIO_Port , SEG2_G_Pin ,RESET) ;
 8000f20:	2200      	movs	r2, #0
 8000f22:	2102      	movs	r1, #2
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <display7SEG2+0x384>)
 8000f26:	f001 fb64 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8000f2a:	e000      	b.n	8000f2e <display7SEG2+0x376>
	  default:
		break;
 8000f2c:	bf00      	nop

	}
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40010800 	.word	0x40010800
 8000f3c:	40010c00 	.word	0x40010c00

08000f40 <display7SEG3>:
void display7SEG3(int num){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b09      	cmp	r3, #9
 8000f4c:	f200 818a 	bhi.w	8001264 <display7SEG3+0x324>
 8000f50:	a201      	add	r2, pc, #4	; (adr r2, 8000f58 <display7SEG3+0x18>)
 8000f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f56:	bf00      	nop
 8000f58:	08000f81 	.word	0x08000f81
 8000f5c:	08000fcb 	.word	0x08000fcb
 8000f60:	08001015 	.word	0x08001015
 8000f64:	0800105f 	.word	0x0800105f
 8000f68:	080010a9 	.word	0x080010a9
 8000f6c:	080010f3 	.word	0x080010f3
 8000f70:	0800113d 	.word	0x0800113d
 8000f74:	08001187 	.word	0x08001187
 8000f78:	080011d1 	.word	0x080011d1
 8000f7c:	0800121b 	.word	0x0800121b
	switch(num) {
	  case 0:
		  HAL_GPIO_WritePin ( SEG3_A_GPIO_Port , SEG3_A_Pin ,RESET) ;
 8000f80:	2200      	movs	r2, #0
 8000f82:	2104      	movs	r1, #4
 8000f84:	48ba      	ldr	r0, [pc, #744]	; (8001270 <display7SEG3+0x330>)
 8000f86:	f001 fb34 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_B_GPIO_Port , SEG3_B_Pin ,RESET );
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2108      	movs	r1, #8
 8000f8e:	48b8      	ldr	r0, [pc, #736]	; (8001270 <display7SEG3+0x330>)
 8000f90:	f001 fb2f 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_C_GPIO_Port , SEG3_C_Pin ,RESET) ;
 8000f94:	2200      	movs	r2, #0
 8000f96:	2110      	movs	r1, #16
 8000f98:	48b5      	ldr	r0, [pc, #724]	; (8001270 <display7SEG3+0x330>)
 8000f9a:	f001 fb2a 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_D_GPIO_Port , SEG3_D_Pin ,RESET );
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2120      	movs	r1, #32
 8000fa2:	48b3      	ldr	r0, [pc, #716]	; (8001270 <display7SEG3+0x330>)
 8000fa4:	f001 fb25 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_E_GPIO_Port , SEG3_E_Pin ,RESET) ;
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2140      	movs	r1, #64	; 0x40
 8000fac:	48b0      	ldr	r0, [pc, #704]	; (8001270 <display7SEG3+0x330>)
 8000fae:	f001 fb20 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_F_GPIO_Port , SEG3_F_Pin ,RESET );
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	48ae      	ldr	r0, [pc, #696]	; (8001270 <display7SEG3+0x330>)
 8000fb8:	f001 fb1b 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_G_GPIO_Port , SEG3_G_Pin ,SET) ;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc2:	48ab      	ldr	r0, [pc, #684]	; (8001270 <display7SEG3+0x330>)
 8000fc4:	f001 fb15 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8000fc8:	e14d      	b.n	8001266 <display7SEG3+0x326>
	  case 1:
		  HAL_GPIO_WritePin ( SEG3_A_GPIO_Port , SEG3_A_Pin ,SET) ;
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2104      	movs	r1, #4
 8000fce:	48a8      	ldr	r0, [pc, #672]	; (8001270 <display7SEG3+0x330>)
 8000fd0:	f001 fb0f 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_B_GPIO_Port , SEG3_B_Pin ,RESET );
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	48a5      	ldr	r0, [pc, #660]	; (8001270 <display7SEG3+0x330>)
 8000fda:	f001 fb0a 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_C_GPIO_Port , SEG3_C_Pin ,RESET) ;
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	48a3      	ldr	r0, [pc, #652]	; (8001270 <display7SEG3+0x330>)
 8000fe4:	f001 fb05 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_D_GPIO_Port , SEG3_D_Pin ,SET );
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2120      	movs	r1, #32
 8000fec:	48a0      	ldr	r0, [pc, #640]	; (8001270 <display7SEG3+0x330>)
 8000fee:	f001 fb00 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_E_GPIO_Port , SEG3_E_Pin ,SET) ;
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2140      	movs	r1, #64	; 0x40
 8000ff6:	489e      	ldr	r0, [pc, #632]	; (8001270 <display7SEG3+0x330>)
 8000ff8:	f001 fafb 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_F_GPIO_Port , SEG3_F_Pin ,SET );
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2180      	movs	r1, #128	; 0x80
 8001000:	489b      	ldr	r0, [pc, #620]	; (8001270 <display7SEG3+0x330>)
 8001002:	f001 faf6 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_G_GPIO_Port , SEG3_G_Pin ,SET) ;
 8001006:	2201      	movs	r2, #1
 8001008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800100c:	4898      	ldr	r0, [pc, #608]	; (8001270 <display7SEG3+0x330>)
 800100e:	f001 faf0 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8001012:	e128      	b.n	8001266 <display7SEG3+0x326>
	  case 2:
		  HAL_GPIO_WritePin ( SEG3_A_GPIO_Port , SEG3_A_Pin ,RESET) ;
 8001014:	2200      	movs	r2, #0
 8001016:	2104      	movs	r1, #4
 8001018:	4895      	ldr	r0, [pc, #596]	; (8001270 <display7SEG3+0x330>)
 800101a:	f001 faea 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_B_GPIO_Port , SEG3_B_Pin ,RESET );
 800101e:	2200      	movs	r2, #0
 8001020:	2108      	movs	r1, #8
 8001022:	4893      	ldr	r0, [pc, #588]	; (8001270 <display7SEG3+0x330>)
 8001024:	f001 fae5 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_C_GPIO_Port , SEG3_C_Pin ,SET) ;
 8001028:	2201      	movs	r2, #1
 800102a:	2110      	movs	r1, #16
 800102c:	4890      	ldr	r0, [pc, #576]	; (8001270 <display7SEG3+0x330>)
 800102e:	f001 fae0 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_D_GPIO_Port , SEG3_D_Pin ,RESET );
 8001032:	2200      	movs	r2, #0
 8001034:	2120      	movs	r1, #32
 8001036:	488e      	ldr	r0, [pc, #568]	; (8001270 <display7SEG3+0x330>)
 8001038:	f001 fadb 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_E_GPIO_Port , SEG3_E_Pin ,RESET) ;
 800103c:	2200      	movs	r2, #0
 800103e:	2140      	movs	r1, #64	; 0x40
 8001040:	488b      	ldr	r0, [pc, #556]	; (8001270 <display7SEG3+0x330>)
 8001042:	f001 fad6 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_F_GPIO_Port , SEG3_F_Pin ,SET );
 8001046:	2201      	movs	r2, #1
 8001048:	2180      	movs	r1, #128	; 0x80
 800104a:	4889      	ldr	r0, [pc, #548]	; (8001270 <display7SEG3+0x330>)
 800104c:	f001 fad1 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_G_GPIO_Port , SEG3_G_Pin ,RESET) ;
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001056:	4886      	ldr	r0, [pc, #536]	; (8001270 <display7SEG3+0x330>)
 8001058:	f001 facb 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 800105c:	e103      	b.n	8001266 <display7SEG3+0x326>
	  case 3:
		  HAL_GPIO_WritePin ( SEG3_A_GPIO_Port , SEG3_A_Pin ,RESET) ;
 800105e:	2200      	movs	r2, #0
 8001060:	2104      	movs	r1, #4
 8001062:	4883      	ldr	r0, [pc, #524]	; (8001270 <display7SEG3+0x330>)
 8001064:	f001 fac5 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_B_GPIO_Port , SEG3_B_Pin ,RESET );
 8001068:	2200      	movs	r2, #0
 800106a:	2108      	movs	r1, #8
 800106c:	4880      	ldr	r0, [pc, #512]	; (8001270 <display7SEG3+0x330>)
 800106e:	f001 fac0 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_C_GPIO_Port , SEG3_C_Pin ,RESET) ;
 8001072:	2200      	movs	r2, #0
 8001074:	2110      	movs	r1, #16
 8001076:	487e      	ldr	r0, [pc, #504]	; (8001270 <display7SEG3+0x330>)
 8001078:	f001 fabb 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_D_GPIO_Port , SEG3_D_Pin ,RESET );
 800107c:	2200      	movs	r2, #0
 800107e:	2120      	movs	r1, #32
 8001080:	487b      	ldr	r0, [pc, #492]	; (8001270 <display7SEG3+0x330>)
 8001082:	f001 fab6 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_E_GPIO_Port , SEG3_E_Pin ,SET) ;
 8001086:	2201      	movs	r2, #1
 8001088:	2140      	movs	r1, #64	; 0x40
 800108a:	4879      	ldr	r0, [pc, #484]	; (8001270 <display7SEG3+0x330>)
 800108c:	f001 fab1 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_F_GPIO_Port , SEG3_F_Pin ,SET );
 8001090:	2201      	movs	r2, #1
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	4876      	ldr	r0, [pc, #472]	; (8001270 <display7SEG3+0x330>)
 8001096:	f001 faac 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_G_GPIO_Port , SEG3_G_Pin ,RESET) ;
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a0:	4873      	ldr	r0, [pc, #460]	; (8001270 <display7SEG3+0x330>)
 80010a2:	f001 faa6 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 80010a6:	e0de      	b.n	8001266 <display7SEG3+0x326>
	  case 4:
		  HAL_GPIO_WritePin ( SEG3_A_GPIO_Port , SEG3_A_Pin ,SET) ;
 80010a8:	2201      	movs	r2, #1
 80010aa:	2104      	movs	r1, #4
 80010ac:	4870      	ldr	r0, [pc, #448]	; (8001270 <display7SEG3+0x330>)
 80010ae:	f001 faa0 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_B_GPIO_Port , SEG3_B_Pin ,RESET );
 80010b2:	2200      	movs	r2, #0
 80010b4:	2108      	movs	r1, #8
 80010b6:	486e      	ldr	r0, [pc, #440]	; (8001270 <display7SEG3+0x330>)
 80010b8:	f001 fa9b 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_C_GPIO_Port , SEG3_C_Pin ,RESET) ;
 80010bc:	2200      	movs	r2, #0
 80010be:	2110      	movs	r1, #16
 80010c0:	486b      	ldr	r0, [pc, #428]	; (8001270 <display7SEG3+0x330>)
 80010c2:	f001 fa96 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_D_GPIO_Port , SEG3_D_Pin ,SET );
 80010c6:	2201      	movs	r2, #1
 80010c8:	2120      	movs	r1, #32
 80010ca:	4869      	ldr	r0, [pc, #420]	; (8001270 <display7SEG3+0x330>)
 80010cc:	f001 fa91 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_E_GPIO_Port , SEG3_E_Pin ,SET) ;
 80010d0:	2201      	movs	r2, #1
 80010d2:	2140      	movs	r1, #64	; 0x40
 80010d4:	4866      	ldr	r0, [pc, #408]	; (8001270 <display7SEG3+0x330>)
 80010d6:	f001 fa8c 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_F_GPIO_Port , SEG3_F_Pin ,RESET );
 80010da:	2200      	movs	r2, #0
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	4864      	ldr	r0, [pc, #400]	; (8001270 <display7SEG3+0x330>)
 80010e0:	f001 fa87 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_G_GPIO_Port , SEG3_G_Pin ,RESET) ;
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ea:	4861      	ldr	r0, [pc, #388]	; (8001270 <display7SEG3+0x330>)
 80010ec:	f001 fa81 	bl	80025f2 <HAL_GPIO_WritePin>
	  	break;
 80010f0:	e0b9      	b.n	8001266 <display7SEG3+0x326>
	  case 5:
		  HAL_GPIO_WritePin ( SEG3_A_GPIO_Port , SEG3_A_Pin ,RESET) ;
 80010f2:	2200      	movs	r2, #0
 80010f4:	2104      	movs	r1, #4
 80010f6:	485e      	ldr	r0, [pc, #376]	; (8001270 <display7SEG3+0x330>)
 80010f8:	f001 fa7b 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_B_GPIO_Port , SEG3_B_Pin ,SET );
 80010fc:	2201      	movs	r2, #1
 80010fe:	2108      	movs	r1, #8
 8001100:	485b      	ldr	r0, [pc, #364]	; (8001270 <display7SEG3+0x330>)
 8001102:	f001 fa76 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_C_GPIO_Port , SEG3_C_Pin ,RESET) ;
 8001106:	2200      	movs	r2, #0
 8001108:	2110      	movs	r1, #16
 800110a:	4859      	ldr	r0, [pc, #356]	; (8001270 <display7SEG3+0x330>)
 800110c:	f001 fa71 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_D_GPIO_Port , SEG3_D_Pin ,RESET );
 8001110:	2200      	movs	r2, #0
 8001112:	2120      	movs	r1, #32
 8001114:	4856      	ldr	r0, [pc, #344]	; (8001270 <display7SEG3+0x330>)
 8001116:	f001 fa6c 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_E_GPIO_Port , SEG3_E_Pin ,SET) ;
 800111a:	2201      	movs	r2, #1
 800111c:	2140      	movs	r1, #64	; 0x40
 800111e:	4854      	ldr	r0, [pc, #336]	; (8001270 <display7SEG3+0x330>)
 8001120:	f001 fa67 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_F_GPIO_Port , SEG3_F_Pin ,RESET );
 8001124:	2200      	movs	r2, #0
 8001126:	2180      	movs	r1, #128	; 0x80
 8001128:	4851      	ldr	r0, [pc, #324]	; (8001270 <display7SEG3+0x330>)
 800112a:	f001 fa62 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_G_GPIO_Port , SEG3_G_Pin ,RESET) ;
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001134:	484e      	ldr	r0, [pc, #312]	; (8001270 <display7SEG3+0x330>)
 8001136:	f001 fa5c 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 800113a:	e094      	b.n	8001266 <display7SEG3+0x326>
	  case 6:
		  HAL_GPIO_WritePin ( SEG3_A_GPIO_Port , SEG3_A_Pin ,RESET) ;
 800113c:	2200      	movs	r2, #0
 800113e:	2104      	movs	r1, #4
 8001140:	484b      	ldr	r0, [pc, #300]	; (8001270 <display7SEG3+0x330>)
 8001142:	f001 fa56 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_B_GPIO_Port , SEG3_B_Pin ,SET );
 8001146:	2201      	movs	r2, #1
 8001148:	2108      	movs	r1, #8
 800114a:	4849      	ldr	r0, [pc, #292]	; (8001270 <display7SEG3+0x330>)
 800114c:	f001 fa51 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_C_GPIO_Port , SEG3_C_Pin ,RESET) ;
 8001150:	2200      	movs	r2, #0
 8001152:	2110      	movs	r1, #16
 8001154:	4846      	ldr	r0, [pc, #280]	; (8001270 <display7SEG3+0x330>)
 8001156:	f001 fa4c 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_D_GPIO_Port , SEG3_D_Pin ,RESET );
 800115a:	2200      	movs	r2, #0
 800115c:	2120      	movs	r1, #32
 800115e:	4844      	ldr	r0, [pc, #272]	; (8001270 <display7SEG3+0x330>)
 8001160:	f001 fa47 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_E_GPIO_Port , SEG3_E_Pin ,RESET) ;
 8001164:	2200      	movs	r2, #0
 8001166:	2140      	movs	r1, #64	; 0x40
 8001168:	4841      	ldr	r0, [pc, #260]	; (8001270 <display7SEG3+0x330>)
 800116a:	f001 fa42 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_F_GPIO_Port , SEG3_F_Pin ,RESET );
 800116e:	2200      	movs	r2, #0
 8001170:	2180      	movs	r1, #128	; 0x80
 8001172:	483f      	ldr	r0, [pc, #252]	; (8001270 <display7SEG3+0x330>)
 8001174:	f001 fa3d 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_G_GPIO_Port , SEG3_G_Pin ,RESET) ;
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117e:	483c      	ldr	r0, [pc, #240]	; (8001270 <display7SEG3+0x330>)
 8001180:	f001 fa37 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8001184:	e06f      	b.n	8001266 <display7SEG3+0x326>
	  case 7:
		  HAL_GPIO_WritePin ( SEG3_A_GPIO_Port , SEG3_A_Pin ,RESET) ;
 8001186:	2200      	movs	r2, #0
 8001188:	2104      	movs	r1, #4
 800118a:	4839      	ldr	r0, [pc, #228]	; (8001270 <display7SEG3+0x330>)
 800118c:	f001 fa31 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_B_GPIO_Port , SEG3_B_Pin ,RESET );
 8001190:	2200      	movs	r2, #0
 8001192:	2108      	movs	r1, #8
 8001194:	4836      	ldr	r0, [pc, #216]	; (8001270 <display7SEG3+0x330>)
 8001196:	f001 fa2c 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_C_GPIO_Port , SEG3_C_Pin ,RESET) ;
 800119a:	2200      	movs	r2, #0
 800119c:	2110      	movs	r1, #16
 800119e:	4834      	ldr	r0, [pc, #208]	; (8001270 <display7SEG3+0x330>)
 80011a0:	f001 fa27 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_D_GPIO_Port , SEG3_D_Pin ,SET );
 80011a4:	2201      	movs	r2, #1
 80011a6:	2120      	movs	r1, #32
 80011a8:	4831      	ldr	r0, [pc, #196]	; (8001270 <display7SEG3+0x330>)
 80011aa:	f001 fa22 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_E_GPIO_Port , SEG3_E_Pin ,SET) ;
 80011ae:	2201      	movs	r2, #1
 80011b0:	2140      	movs	r1, #64	; 0x40
 80011b2:	482f      	ldr	r0, [pc, #188]	; (8001270 <display7SEG3+0x330>)
 80011b4:	f001 fa1d 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_F_GPIO_Port , SEG3_F_Pin ,SET );
 80011b8:	2201      	movs	r2, #1
 80011ba:	2180      	movs	r1, #128	; 0x80
 80011bc:	482c      	ldr	r0, [pc, #176]	; (8001270 <display7SEG3+0x330>)
 80011be:	f001 fa18 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_G_GPIO_Port , SEG3_G_Pin ,SET) ;
 80011c2:	2201      	movs	r2, #1
 80011c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c8:	4829      	ldr	r0, [pc, #164]	; (8001270 <display7SEG3+0x330>)
 80011ca:	f001 fa12 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 80011ce:	e04a      	b.n	8001266 <display7SEG3+0x326>
	  case 8:
		  HAL_GPIO_WritePin ( SEG3_A_GPIO_Port , SEG3_A_Pin ,RESET) ;
 80011d0:	2200      	movs	r2, #0
 80011d2:	2104      	movs	r1, #4
 80011d4:	4826      	ldr	r0, [pc, #152]	; (8001270 <display7SEG3+0x330>)
 80011d6:	f001 fa0c 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_B_GPIO_Port , SEG3_B_Pin ,RESET );
 80011da:	2200      	movs	r2, #0
 80011dc:	2108      	movs	r1, #8
 80011de:	4824      	ldr	r0, [pc, #144]	; (8001270 <display7SEG3+0x330>)
 80011e0:	f001 fa07 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_C_GPIO_Port , SEG3_C_Pin ,RESET) ;
 80011e4:	2200      	movs	r2, #0
 80011e6:	2110      	movs	r1, #16
 80011e8:	4821      	ldr	r0, [pc, #132]	; (8001270 <display7SEG3+0x330>)
 80011ea:	f001 fa02 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_D_GPIO_Port , SEG3_D_Pin ,RESET );
 80011ee:	2200      	movs	r2, #0
 80011f0:	2120      	movs	r1, #32
 80011f2:	481f      	ldr	r0, [pc, #124]	; (8001270 <display7SEG3+0x330>)
 80011f4:	f001 f9fd 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_E_GPIO_Port , SEG3_E_Pin ,RESET) ;
 80011f8:	2200      	movs	r2, #0
 80011fa:	2140      	movs	r1, #64	; 0x40
 80011fc:	481c      	ldr	r0, [pc, #112]	; (8001270 <display7SEG3+0x330>)
 80011fe:	f001 f9f8 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_F_GPIO_Port , SEG3_F_Pin ,RESET );
 8001202:	2200      	movs	r2, #0
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	481a      	ldr	r0, [pc, #104]	; (8001270 <display7SEG3+0x330>)
 8001208:	f001 f9f3 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_G_GPIO_Port , SEG3_G_Pin ,RESET) ;
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001212:	4817      	ldr	r0, [pc, #92]	; (8001270 <display7SEG3+0x330>)
 8001214:	f001 f9ed 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8001218:	e025      	b.n	8001266 <display7SEG3+0x326>
	  case 9:
		  HAL_GPIO_WritePin ( SEG3_A_GPIO_Port , SEG3_A_Pin ,RESET) ;
 800121a:	2200      	movs	r2, #0
 800121c:	2104      	movs	r1, #4
 800121e:	4814      	ldr	r0, [pc, #80]	; (8001270 <display7SEG3+0x330>)
 8001220:	f001 f9e7 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_B_GPIO_Port , SEG3_B_Pin ,RESET );
 8001224:	2200      	movs	r2, #0
 8001226:	2108      	movs	r1, #8
 8001228:	4811      	ldr	r0, [pc, #68]	; (8001270 <display7SEG3+0x330>)
 800122a:	f001 f9e2 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_C_GPIO_Port , SEG3_C_Pin ,RESET) ;
 800122e:	2200      	movs	r2, #0
 8001230:	2110      	movs	r1, #16
 8001232:	480f      	ldr	r0, [pc, #60]	; (8001270 <display7SEG3+0x330>)
 8001234:	f001 f9dd 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_D_GPIO_Port , SEG3_D_Pin ,RESET );
 8001238:	2200      	movs	r2, #0
 800123a:	2120      	movs	r1, #32
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <display7SEG3+0x330>)
 800123e:	f001 f9d8 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_E_GPIO_Port , SEG3_E_Pin ,SET) ;
 8001242:	2201      	movs	r2, #1
 8001244:	2140      	movs	r1, #64	; 0x40
 8001246:	480a      	ldr	r0, [pc, #40]	; (8001270 <display7SEG3+0x330>)
 8001248:	f001 f9d3 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_F_GPIO_Port , SEG3_F_Pin ,RESET );
 800124c:	2200      	movs	r2, #0
 800124e:	2180      	movs	r1, #128	; 0x80
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <display7SEG3+0x330>)
 8001252:	f001 f9ce 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_G_GPIO_Port , SEG3_G_Pin ,RESET) ;
 8001256:	2200      	movs	r2, #0
 8001258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800125c:	4804      	ldr	r0, [pc, #16]	; (8001270 <display7SEG3+0x330>)
 800125e:	f001 f9c8 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8001262:	e000      	b.n	8001266 <display7SEG3+0x326>
	  default:
		break;
 8001264:	bf00      	nop

	}
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40010c00 	.word	0x40010c00

08001274 <display7SEG4>:
void display7SEG4(int num){
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b09      	cmp	r3, #9
 8001280:	f200 81c8 	bhi.w	8001614 <display7SEG4+0x3a0>
 8001284:	a201      	add	r2, pc, #4	; (adr r2, 800128c <display7SEG4+0x18>)
 8001286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128a:	bf00      	nop
 800128c:	080012b5 	.word	0x080012b5
 8001290:	0800130b 	.word	0x0800130b
 8001294:	08001361 	.word	0x08001361
 8001298:	080013b7 	.word	0x080013b7
 800129c:	0800140d 	.word	0x0800140d
 80012a0:	08001463 	.word	0x08001463
 80012a4:	080014b9 	.word	0x080014b9
 80012a8:	0800150f 	.word	0x0800150f
 80012ac:	08001565 	.word	0x08001565
 80012b0:	080015bb 	.word	0x080015bb
	switch(num) {
	  case 0:
		  HAL_GPIO_WritePin ( SEG4_A_GPIO_Port , SEG4_A_Pin ,RESET) ;
 80012b4:	2200      	movs	r2, #0
 80012b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ba:	48d5      	ldr	r0, [pc, #852]	; (8001610 <display7SEG4+0x39c>)
 80012bc:	f001 f999 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_B_GPIO_Port , SEG4_B_Pin ,RESET );
 80012c0:	2200      	movs	r2, #0
 80012c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012c6:	48d2      	ldr	r0, [pc, #840]	; (8001610 <display7SEG4+0x39c>)
 80012c8:	f001 f993 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_C_GPIO_Port , SEG4_C_Pin ,RESET) ;
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012d2:	48cf      	ldr	r0, [pc, #828]	; (8001610 <display7SEG4+0x39c>)
 80012d4:	f001 f98d 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_D_GPIO_Port , SEG4_D_Pin ,RESET );
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012de:	48cc      	ldr	r0, [pc, #816]	; (8001610 <display7SEG4+0x39c>)
 80012e0:	f001 f987 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_E_GPIO_Port , SEG4_E_Pin ,RESET) ;
 80012e4:	2200      	movs	r2, #0
 80012e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ea:	48c9      	ldr	r0, [pc, #804]	; (8001610 <display7SEG4+0x39c>)
 80012ec:	f001 f981 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_F_GPIO_Port , SEG4_F_Pin ,RESET );
 80012f0:	2200      	movs	r2, #0
 80012f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f6:	48c6      	ldr	r0, [pc, #792]	; (8001610 <display7SEG4+0x39c>)
 80012f8:	f001 f97b 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_G_GPIO_Port , SEG4_G_Pin ,SET) ;
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001302:	48c3      	ldr	r0, [pc, #780]	; (8001610 <display7SEG4+0x39c>)
 8001304:	f001 f975 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8001308:	e185      	b.n	8001616 <display7SEG4+0x3a2>
	  case 1:
		  HAL_GPIO_WritePin ( SEG4_A_GPIO_Port , SEG4_A_Pin ,SET) ;
 800130a:	2201      	movs	r2, #1
 800130c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001310:	48bf      	ldr	r0, [pc, #764]	; (8001610 <display7SEG4+0x39c>)
 8001312:	f001 f96e 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_B_GPIO_Port , SEG4_B_Pin ,RESET );
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800131c:	48bc      	ldr	r0, [pc, #752]	; (8001610 <display7SEG4+0x39c>)
 800131e:	f001 f968 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_C_GPIO_Port , SEG4_C_Pin ,RESET) ;
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001328:	48b9      	ldr	r0, [pc, #740]	; (8001610 <display7SEG4+0x39c>)
 800132a:	f001 f962 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_D_GPIO_Port , SEG4_D_Pin ,SET );
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001334:	48b6      	ldr	r0, [pc, #728]	; (8001610 <display7SEG4+0x39c>)
 8001336:	f001 f95c 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_E_GPIO_Port , SEG4_E_Pin ,SET) ;
 800133a:	2201      	movs	r2, #1
 800133c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001340:	48b3      	ldr	r0, [pc, #716]	; (8001610 <display7SEG4+0x39c>)
 8001342:	f001 f956 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_F_GPIO_Port , SEG4_F_Pin ,SET );
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800134c:	48b0      	ldr	r0, [pc, #704]	; (8001610 <display7SEG4+0x39c>)
 800134e:	f001 f950 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_G_GPIO_Port , SEG4_G_Pin ,SET) ;
 8001352:	2201      	movs	r2, #1
 8001354:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001358:	48ad      	ldr	r0, [pc, #692]	; (8001610 <display7SEG4+0x39c>)
 800135a:	f001 f94a 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 800135e:	e15a      	b.n	8001616 <display7SEG4+0x3a2>
	  case 2:
		  HAL_GPIO_WritePin ( SEG4_A_GPIO_Port , SEG4_A_Pin ,RESET) ;
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001366:	48aa      	ldr	r0, [pc, #680]	; (8001610 <display7SEG4+0x39c>)
 8001368:	f001 f943 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_B_GPIO_Port , SEG4_B_Pin ,RESET );
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001372:	48a7      	ldr	r0, [pc, #668]	; (8001610 <display7SEG4+0x39c>)
 8001374:	f001 f93d 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_C_GPIO_Port , SEG4_C_Pin ,SET) ;
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800137e:	48a4      	ldr	r0, [pc, #656]	; (8001610 <display7SEG4+0x39c>)
 8001380:	f001 f937 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_D_GPIO_Port , SEG4_D_Pin ,RESET );
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800138a:	48a1      	ldr	r0, [pc, #644]	; (8001610 <display7SEG4+0x39c>)
 800138c:	f001 f931 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_E_GPIO_Port , SEG4_E_Pin ,RESET) ;
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001396:	489e      	ldr	r0, [pc, #632]	; (8001610 <display7SEG4+0x39c>)
 8001398:	f001 f92b 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_F_GPIO_Port , SEG4_F_Pin ,SET );
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013a2:	489b      	ldr	r0, [pc, #620]	; (8001610 <display7SEG4+0x39c>)
 80013a4:	f001 f925 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_G_GPIO_Port , SEG4_G_Pin ,RESET) ;
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ae:	4898      	ldr	r0, [pc, #608]	; (8001610 <display7SEG4+0x39c>)
 80013b0:	f001 f91f 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 80013b4:	e12f      	b.n	8001616 <display7SEG4+0x3a2>
	  case 3:
		  HAL_GPIO_WritePin ( SEG4_A_GPIO_Port , SEG4_A_Pin ,RESET) ;
 80013b6:	2200      	movs	r2, #0
 80013b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013bc:	4894      	ldr	r0, [pc, #592]	; (8001610 <display7SEG4+0x39c>)
 80013be:	f001 f918 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_B_GPIO_Port , SEG4_B_Pin ,RESET );
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c8:	4891      	ldr	r0, [pc, #580]	; (8001610 <display7SEG4+0x39c>)
 80013ca:	f001 f912 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_C_GPIO_Port , SEG4_C_Pin ,RESET) ;
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013d4:	488e      	ldr	r0, [pc, #568]	; (8001610 <display7SEG4+0x39c>)
 80013d6:	f001 f90c 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_D_GPIO_Port , SEG4_D_Pin ,RESET );
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e0:	488b      	ldr	r0, [pc, #556]	; (8001610 <display7SEG4+0x39c>)
 80013e2:	f001 f906 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_E_GPIO_Port , SEG4_E_Pin ,SET) ;
 80013e6:	2201      	movs	r2, #1
 80013e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ec:	4888      	ldr	r0, [pc, #544]	; (8001610 <display7SEG4+0x39c>)
 80013ee:	f001 f900 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_F_GPIO_Port , SEG4_F_Pin ,SET );
 80013f2:	2201      	movs	r2, #1
 80013f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f8:	4885      	ldr	r0, [pc, #532]	; (8001610 <display7SEG4+0x39c>)
 80013fa:	f001 f8fa 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_G_GPIO_Port , SEG4_G_Pin ,RESET) ;
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001404:	4882      	ldr	r0, [pc, #520]	; (8001610 <display7SEG4+0x39c>)
 8001406:	f001 f8f4 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 800140a:	e104      	b.n	8001616 <display7SEG4+0x3a2>
	  case 4:
		  HAL_GPIO_WritePin ( SEG4_A_GPIO_Port , SEG4_A_Pin ,SET) ;
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001412:	487f      	ldr	r0, [pc, #508]	; (8001610 <display7SEG4+0x39c>)
 8001414:	f001 f8ed 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_B_GPIO_Port , SEG4_B_Pin ,RESET );
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800141e:	487c      	ldr	r0, [pc, #496]	; (8001610 <display7SEG4+0x39c>)
 8001420:	f001 f8e7 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_C_GPIO_Port , SEG4_C_Pin ,RESET) ;
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800142a:	4879      	ldr	r0, [pc, #484]	; (8001610 <display7SEG4+0x39c>)
 800142c:	f001 f8e1 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_D_GPIO_Port , SEG4_D_Pin ,SET );
 8001430:	2201      	movs	r2, #1
 8001432:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001436:	4876      	ldr	r0, [pc, #472]	; (8001610 <display7SEG4+0x39c>)
 8001438:	f001 f8db 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_E_GPIO_Port , SEG4_E_Pin ,SET) ;
 800143c:	2201      	movs	r2, #1
 800143e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001442:	4873      	ldr	r0, [pc, #460]	; (8001610 <display7SEG4+0x39c>)
 8001444:	f001 f8d5 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_F_GPIO_Port , SEG4_F_Pin ,RESET );
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800144e:	4870      	ldr	r0, [pc, #448]	; (8001610 <display7SEG4+0x39c>)
 8001450:	f001 f8cf 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_G_GPIO_Port , SEG4_G_Pin ,RESET) ;
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800145a:	486d      	ldr	r0, [pc, #436]	; (8001610 <display7SEG4+0x39c>)
 800145c:	f001 f8c9 	bl	80025f2 <HAL_GPIO_WritePin>
	  	break;
 8001460:	e0d9      	b.n	8001616 <display7SEG4+0x3a2>
	  case 5:
		  HAL_GPIO_WritePin ( SEG4_A_GPIO_Port , SEG4_A_Pin ,RESET) ;
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001468:	4869      	ldr	r0, [pc, #420]	; (8001610 <display7SEG4+0x39c>)
 800146a:	f001 f8c2 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_B_GPIO_Port , SEG4_B_Pin ,SET );
 800146e:	2201      	movs	r2, #1
 8001470:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001474:	4866      	ldr	r0, [pc, #408]	; (8001610 <display7SEG4+0x39c>)
 8001476:	f001 f8bc 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_C_GPIO_Port , SEG4_C_Pin ,RESET) ;
 800147a:	2200      	movs	r2, #0
 800147c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001480:	4863      	ldr	r0, [pc, #396]	; (8001610 <display7SEG4+0x39c>)
 8001482:	f001 f8b6 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_D_GPIO_Port , SEG4_D_Pin ,RESET );
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800148c:	4860      	ldr	r0, [pc, #384]	; (8001610 <display7SEG4+0x39c>)
 800148e:	f001 f8b0 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_E_GPIO_Port , SEG4_E_Pin ,SET) ;
 8001492:	2201      	movs	r2, #1
 8001494:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001498:	485d      	ldr	r0, [pc, #372]	; (8001610 <display7SEG4+0x39c>)
 800149a:	f001 f8aa 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_F_GPIO_Port , SEG4_F_Pin ,RESET );
 800149e:	2200      	movs	r2, #0
 80014a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a4:	485a      	ldr	r0, [pc, #360]	; (8001610 <display7SEG4+0x39c>)
 80014a6:	f001 f8a4 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_G_GPIO_Port , SEG4_G_Pin ,RESET) ;
 80014aa:	2200      	movs	r2, #0
 80014ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b0:	4857      	ldr	r0, [pc, #348]	; (8001610 <display7SEG4+0x39c>)
 80014b2:	f001 f89e 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 80014b6:	e0ae      	b.n	8001616 <display7SEG4+0x3a2>
	  case 6:
		  HAL_GPIO_WritePin ( SEG4_A_GPIO_Port , SEG4_A_Pin ,RESET) ;
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014be:	4854      	ldr	r0, [pc, #336]	; (8001610 <display7SEG4+0x39c>)
 80014c0:	f001 f897 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_B_GPIO_Port , SEG4_B_Pin ,SET );
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ca:	4851      	ldr	r0, [pc, #324]	; (8001610 <display7SEG4+0x39c>)
 80014cc:	f001 f891 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_C_GPIO_Port , SEG4_C_Pin ,RESET) ;
 80014d0:	2200      	movs	r2, #0
 80014d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d6:	484e      	ldr	r0, [pc, #312]	; (8001610 <display7SEG4+0x39c>)
 80014d8:	f001 f88b 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_D_GPIO_Port , SEG4_D_Pin ,RESET );
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014e2:	484b      	ldr	r0, [pc, #300]	; (8001610 <display7SEG4+0x39c>)
 80014e4:	f001 f885 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_E_GPIO_Port , SEG4_E_Pin ,RESET) ;
 80014e8:	2200      	movs	r2, #0
 80014ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ee:	4848      	ldr	r0, [pc, #288]	; (8001610 <display7SEG4+0x39c>)
 80014f0:	f001 f87f 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_F_GPIO_Port , SEG4_F_Pin ,RESET );
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014fa:	4845      	ldr	r0, [pc, #276]	; (8001610 <display7SEG4+0x39c>)
 80014fc:	f001 f879 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_G_GPIO_Port , SEG4_G_Pin ,RESET) ;
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001506:	4842      	ldr	r0, [pc, #264]	; (8001610 <display7SEG4+0x39c>)
 8001508:	f001 f873 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 800150c:	e083      	b.n	8001616 <display7SEG4+0x3a2>
	  case 7:
		  HAL_GPIO_WritePin ( SEG4_A_GPIO_Port , SEG4_A_Pin ,RESET) ;
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001514:	483e      	ldr	r0, [pc, #248]	; (8001610 <display7SEG4+0x39c>)
 8001516:	f001 f86c 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_B_GPIO_Port , SEG4_B_Pin ,RESET );
 800151a:	2200      	movs	r2, #0
 800151c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001520:	483b      	ldr	r0, [pc, #236]	; (8001610 <display7SEG4+0x39c>)
 8001522:	f001 f866 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_C_GPIO_Port , SEG4_C_Pin ,RESET) ;
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800152c:	4838      	ldr	r0, [pc, #224]	; (8001610 <display7SEG4+0x39c>)
 800152e:	f001 f860 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_D_GPIO_Port , SEG4_D_Pin ,SET );
 8001532:	2201      	movs	r2, #1
 8001534:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001538:	4835      	ldr	r0, [pc, #212]	; (8001610 <display7SEG4+0x39c>)
 800153a:	f001 f85a 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_E_GPIO_Port , SEG4_E_Pin ,SET) ;
 800153e:	2201      	movs	r2, #1
 8001540:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001544:	4832      	ldr	r0, [pc, #200]	; (8001610 <display7SEG4+0x39c>)
 8001546:	f001 f854 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_F_GPIO_Port , SEG4_F_Pin ,SET );
 800154a:	2201      	movs	r2, #1
 800154c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001550:	482f      	ldr	r0, [pc, #188]	; (8001610 <display7SEG4+0x39c>)
 8001552:	f001 f84e 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_G_GPIO_Port , SEG4_G_Pin ,SET) ;
 8001556:	2201      	movs	r2, #1
 8001558:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800155c:	482c      	ldr	r0, [pc, #176]	; (8001610 <display7SEG4+0x39c>)
 800155e:	f001 f848 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 8001562:	e058      	b.n	8001616 <display7SEG4+0x3a2>
	  case 8:
		  HAL_GPIO_WritePin ( SEG4_A_GPIO_Port , SEG4_A_Pin ,RESET) ;
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 7100 	mov.w	r1, #512	; 0x200
 800156a:	4829      	ldr	r0, [pc, #164]	; (8001610 <display7SEG4+0x39c>)
 800156c:	f001 f841 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_B_GPIO_Port , SEG4_B_Pin ,RESET );
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001576:	4826      	ldr	r0, [pc, #152]	; (8001610 <display7SEG4+0x39c>)
 8001578:	f001 f83b 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_C_GPIO_Port , SEG4_C_Pin ,RESET) ;
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001582:	4823      	ldr	r0, [pc, #140]	; (8001610 <display7SEG4+0x39c>)
 8001584:	f001 f835 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_D_GPIO_Port , SEG4_D_Pin ,RESET );
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800158e:	4820      	ldr	r0, [pc, #128]	; (8001610 <display7SEG4+0x39c>)
 8001590:	f001 f82f 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_E_GPIO_Port , SEG4_E_Pin ,RESET) ;
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159a:	481d      	ldr	r0, [pc, #116]	; (8001610 <display7SEG4+0x39c>)
 800159c:	f001 f829 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_F_GPIO_Port , SEG4_F_Pin ,RESET );
 80015a0:	2200      	movs	r2, #0
 80015a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015a6:	481a      	ldr	r0, [pc, #104]	; (8001610 <display7SEG4+0x39c>)
 80015a8:	f001 f823 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_G_GPIO_Port , SEG4_G_Pin ,RESET) ;
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015b2:	4817      	ldr	r0, [pc, #92]	; (8001610 <display7SEG4+0x39c>)
 80015b4:	f001 f81d 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 80015b8:	e02d      	b.n	8001616 <display7SEG4+0x3a2>
	  case 9:
		  HAL_GPIO_WritePin ( SEG4_A_GPIO_Port , SEG4_A_Pin ,RESET) ;
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c0:	4813      	ldr	r0, [pc, #76]	; (8001610 <display7SEG4+0x39c>)
 80015c2:	f001 f816 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_B_GPIO_Port , SEG4_B_Pin ,RESET );
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015cc:	4810      	ldr	r0, [pc, #64]	; (8001610 <display7SEG4+0x39c>)
 80015ce:	f001 f810 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_C_GPIO_Port , SEG4_C_Pin ,RESET) ;
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015d8:	480d      	ldr	r0, [pc, #52]	; (8001610 <display7SEG4+0x39c>)
 80015da:	f001 f80a 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_D_GPIO_Port , SEG4_D_Pin ,RESET );
 80015de:	2200      	movs	r2, #0
 80015e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015e4:	480a      	ldr	r0, [pc, #40]	; (8001610 <display7SEG4+0x39c>)
 80015e6:	f001 f804 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_E_GPIO_Port , SEG4_E_Pin ,SET) ;
 80015ea:	2201      	movs	r2, #1
 80015ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015f0:	4807      	ldr	r0, [pc, #28]	; (8001610 <display7SEG4+0x39c>)
 80015f2:	f000 fffe 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_F_GPIO_Port , SEG4_F_Pin ,RESET );
 80015f6:	2200      	movs	r2, #0
 80015f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015fc:	4804      	ldr	r0, [pc, #16]	; (8001610 <display7SEG4+0x39c>)
 80015fe:	f000 fff8 	bl	80025f2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_G_GPIO_Port , SEG4_G_Pin ,RESET) ;
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001608:	4801      	ldr	r0, [pc, #4]	; (8001610 <display7SEG4+0x39c>)
 800160a:	f000 fff2 	bl	80025f2 <HAL_GPIO_WritePin>
	    break;
 800160e:	e002      	b.n	8001616 <display7SEG4+0x3a2>
 8001610:	40010c00 	.word	0x40010c00
	  default:
		break;
 8001614:	bf00      	nop

	}
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop

08001620 <fsm_automatic_run>:
 *      Author: ntdat
 */

#include "fsm_automatic.h"

void fsm_automatic_run(){
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	switch(status){
 8001624:	4b46      	ldr	r3, [pc, #280]	; (8001740 <fsm_automatic_run+0x120>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b04      	cmp	r3, #4
 800162a:	d87c      	bhi.n	8001726 <fsm_automatic_run+0x106>
 800162c:	a201      	add	r2, pc, #4	; (adr r2, 8001634 <fsm_automatic_run+0x14>)
 800162e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001632:	bf00      	nop
 8001634:	08001649 	.word	0x08001649
 8001638:	08001687 	.word	0x08001687
 800163c:	080016b3 	.word	0x080016b3
 8001640:	080016df 	.word	0x080016df
 8001644:	0800170b 	.word	0x0800170b
		case INIT:
					ledON();
 8001648:	f7ff f8b0 	bl	80007ac <ledON>
					display7SEG1(8);
 800164c:	2008      	movs	r0, #8
 800164e:	f7ff f905 	bl	800085c <display7SEG1>
					display7SEG2(8);
 8001652:	2008      	movs	r0, #8
 8001654:	f7ff fab0 	bl	8000bb8 <display7SEG2>
					display7SEG3(8);
 8001658:	2008      	movs	r0, #8
 800165a:	f7ff fc71 	bl	8000f40 <display7SEG3>
					display7SEG4(8);
 800165e:	2008      	movs	r0, #8
 8001660:	f7ff fe08 	bl	8001274 <display7SEG4>
					if(isButton1PRESS() == 1){
 8001664:	f7fe ff66 	bl	8000534 <isButton1PRESS>
 8001668:	4603      	mov	r3, r0
 800166a:	2b01      	cmp	r3, #1
 800166c:	d15d      	bne.n	800172a <fsm_automatic_run+0x10a>
						status = MODE_1;
 800166e:	4b34      	ldr	r3, [pc, #208]	; (8001740 <fsm_automatic_run+0x120>)
 8001670:	2201      	movs	r2, #1
 8001672:	601a      	str	r2, [r3, #0]
						value = 0.5;
 8001674:	4b33      	ldr	r3, [pc, #204]	; (8001744 <fsm_automatic_run+0x124>)
 8001676:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800167a:	601a      	str	r2, [r3, #0]
						setTimer1(500);
 800167c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001680:	f000 f98a 	bl	8001998 <setTimer1>
					}
					break;
 8001684:	e051      	b.n	800172a <fsm_automatic_run+0x10a>
		case MODE_1:
					todoMODE1();
 8001686:	f000 fa73 	bl	8001b70 <todoMODE1>
					if(isButton1PRESS() == 1){
 800168a:	f7fe ff53 	bl	8000534 <isButton1PRESS>
 800168e:	4603      	mov	r3, r0
 8001690:	2b01      	cmp	r3, #1
 8001692:	d14c      	bne.n	800172e <fsm_automatic_run+0x10e>
						status = MODE_2;
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <fsm_automatic_run+0x120>)
 8001696:	2202      	movs	r2, #2
 8001698:	601a      	str	r2, [r3, #0]
						value = 0.5;
 800169a:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <fsm_automatic_run+0x124>)
 800169c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80016a0:	601a      	str	r2, [r3, #0]
						temp = 0;
 80016a2:	4b29      	ldr	r3, [pc, #164]	; (8001748 <fsm_automatic_run+0x128>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
						setTimer1(500);
 80016a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016ac:	f000 f974 	bl	8001998 <setTimer1>
					}
					break;
 80016b0:	e03d      	b.n	800172e <fsm_automatic_run+0x10e>
		case MODE_2:
					todoMODE2();
 80016b2:	f000 fb33 	bl	8001d1c <todoMODE2>
					if(isButton1PRESS() == 1){
 80016b6:	f7fe ff3d 	bl	8000534 <isButton1PRESS>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d138      	bne.n	8001732 <fsm_automatic_run+0x112>
						status = MODE_3;
 80016c0:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <fsm_automatic_run+0x120>)
 80016c2:	2203      	movs	r2, #3
 80016c4:	601a      	str	r2, [r3, #0]
						value = 0.5;
 80016c6:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <fsm_automatic_run+0x124>)
 80016c8:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80016cc:	601a      	str	r2, [r3, #0]
						temp = 0;
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <fsm_automatic_run+0x128>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
						setTimer1(500);
 80016d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016d8:	f000 f95e 	bl	8001998 <setTimer1>
					}
					break;
 80016dc:	e029      	b.n	8001732 <fsm_automatic_run+0x112>
		case MODE_3:
					todoMODE3();
 80016de:	f000 fb89 	bl	8001df4 <todoMODE3>
					if(isButton1PRESS() == 1){
 80016e2:	f7fe ff27 	bl	8000534 <isButton1PRESS>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d124      	bne.n	8001736 <fsm_automatic_run+0x116>
						status = MODE_4;
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <fsm_automatic_run+0x120>)
 80016ee:	2204      	movs	r2, #4
 80016f0:	601a      	str	r2, [r3, #0]
						value = 0.5;
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <fsm_automatic_run+0x124>)
 80016f4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80016f8:	601a      	str	r2, [r3, #0]
						temp = 0;
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <fsm_automatic_run+0x128>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
						setTimer1(500);
 8001700:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001704:	f000 f948 	bl	8001998 <setTimer1>
					}
					break;
 8001708:	e015      	b.n	8001736 <fsm_automatic_run+0x116>
		case MODE_4:
					todoMODE4();
 800170a:	f000 fbdf 	bl	8001ecc <todoMODE4>
					if(isButton1PRESS() == 1){
 800170e:	f7fe ff11 	bl	8000534 <isButton1PRESS>
 8001712:	4603      	mov	r3, r0
 8001714:	2b01      	cmp	r3, #1
 8001716:	d110      	bne.n	800173a <fsm_automatic_run+0x11a>
						status = MODE_1;
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <fsm_automatic_run+0x120>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]
						state_MODE1 = 0;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <fsm_automatic_run+0x12c>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
					}
					break;
 8001724:	e009      	b.n	800173a <fsm_automatic_run+0x11a>
		default:
					break;
 8001726:	bf00      	nop
 8001728:	e008      	b.n	800173c <fsm_automatic_run+0x11c>
					break;
 800172a:	bf00      	nop
 800172c:	e006      	b.n	800173c <fsm_automatic_run+0x11c>
					break;
 800172e:	bf00      	nop
 8001730:	e004      	b.n	800173c <fsm_automatic_run+0x11c>
					break;
 8001732:	bf00      	nop
 8001734:	e002      	b.n	800173c <fsm_automatic_run+0x11c>
					break;
 8001736:	bf00      	nop
 8001738:	e000      	b.n	800173c <fsm_automatic_run+0x11c>
					break;
 800173a:	bf00      	nop
	}
};
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2000006c 	.word	0x2000006c
 8001744:	20000038 	.word	0x20000038
 8001748:	20000080 	.word	0x20000080
 800174c:	20000084 	.word	0x20000084

08001750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001754:	f000 fc4c 	bl	8001ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001758:	f000 f812 	bl	8001780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800175c:	f000 f898 	bl	8001890 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001760:	f000 f84a 	bl	80017f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8001764:	4804      	ldr	r0, [pc, #16]	; (8001778 <main+0x28>)
 8001766:	f001 fb95 	bl	8002e94 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <main+0x2c>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_run();
 8001770:	f7ff ff56 	bl	8001620 <fsm_automatic_run>
 8001774:	e7fc      	b.n	8001770 <main+0x20>
 8001776:	bf00      	nop
 8001778:	20000088 	.word	0x20000088
 800177c:	2000006c 	.word	0x2000006c

08001780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b090      	sub	sp, #64	; 0x40
 8001784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001786:	f107 0318 	add.w	r3, r7, #24
 800178a:	2228      	movs	r2, #40	; 0x28
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f001 ff38 	bl	8003604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017a2:	2302      	movs	r3, #2
 80017a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a6:	2301      	movs	r3, #1
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017aa:	2310      	movs	r3, #16
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b2:	f107 0318 	add.w	r3, r7, #24
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 ff34 	bl	8002624 <HAL_RCC_OscConfig>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80017c2:	f000 f8e3 	bl	800198c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c6:	230f      	movs	r3, #15
 80017c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f001 f9a0 	bl	8002b24 <HAL_RCC_ClockConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80017ea:	f000 f8cf 	bl	800198c <Error_Handler>
  }
}
 80017ee:	bf00      	nop
 80017f0:	3740      	adds	r7, #64	; 0x40
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180c:	463b      	mov	r3, r7
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <MX_TIM2_Init+0x94>)
 8001816:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800181a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_TIM2_Init+0x94>)
 800181e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001822:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <MX_TIM2_Init+0x94>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <MX_TIM2_Init+0x94>)
 800182c:	220a      	movs	r2, #10
 800182e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <MX_TIM2_Init+0x94>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <MX_TIM2_Init+0x94>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800183c:	4813      	ldr	r0, [pc, #76]	; (800188c <MX_TIM2_Init+0x94>)
 800183e:	f001 fad9 	bl	8002df4 <HAL_TIM_Base_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001848:	f000 f8a0 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001850:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001852:	f107 0308 	add.w	r3, r7, #8
 8001856:	4619      	mov	r1, r3
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <MX_TIM2_Init+0x94>)
 800185a:	f001 fc6f 	bl	800313c <HAL_TIM_ConfigClockSource>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001864:	f000 f892 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001870:	463b      	mov	r3, r7
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_TIM2_Init+0x94>)
 8001876:	f001 fe37 	bl	80034e8 <HAL_TIMEx_MasterConfigSynchronization>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001880:	f000 f884 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000088 	.word	0x20000088

08001890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 0310 	add.w	r3, r7, #16
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a4:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <MX_GPIO_Init+0xd4>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a2e      	ldr	r2, [pc, #184]	; (8001964 <MX_GPIO_Init+0xd4>)
 80018aa:	f043 0310 	orr.w	r3, r3, #16
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <MX_GPIO_Init+0xd4>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0310 	and.w	r3, r3, #16
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	4b29      	ldr	r3, [pc, #164]	; (8001964 <MX_GPIO_Init+0xd4>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a28      	ldr	r2, [pc, #160]	; (8001964 <MX_GPIO_Init+0xd4>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b26      	ldr	r3, [pc, #152]	; (8001964 <MX_GPIO_Init+0xd4>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <MX_GPIO_Init+0xd4>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a22      	ldr	r2, [pc, #136]	; (8001964 <MX_GPIO_Init+0xd4>)
 80018da:	f043 0308 	orr.w	r3, r3, #8
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b20      	ldr	r3, [pc, #128]	; (8001964 <MX_GPIO_Init+0xd4>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0308 	and.w	r3, r3, #8
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|SEG1_A_Pin
 80018ec:	2200      	movs	r2, #0
 80018ee:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80018f2:	481d      	ldr	r0, [pc, #116]	; (8001968 <MX_GPIO_Init+0xd8>)
 80018f4:	f000 fe7d 	bl	80025f2 <HAL_GPIO_WritePin>
                          |SEG1_B_Pin|SEG1_C_Pin|SEG1_D_Pin|SEG1_E_Pin
                          |SEG1_F_Pin|SEG1_G_Pin|SEG2_A_Pin|SEG2_B_Pin
                          |SEG2_C_Pin|SEG2_D_Pin|SEG2_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG2_F_Pin|SEG2_G_Pin|SEG3_A_Pin|SEG4_B_Pin
 80018f8:	2200      	movs	r2, #0
 80018fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80018fe:	481b      	ldr	r0, [pc, #108]	; (800196c <MX_GPIO_Init+0xdc>)
 8001900:	f000 fe77 	bl	80025f2 <HAL_GPIO_WritePin>
                          |SEG4_C_Pin|SEG4_D_Pin|SEG4_E_Pin|SEG4_F_Pin
                          |SEG4_G_Pin|SEG3_B_Pin|SEG3_C_Pin|SEG3_D_Pin
                          |SEG3_E_Pin|SEG3_F_Pin|SEG3_G_Pin|SEG4_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001904:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800190e:	2301      	movs	r3, #1
 8001910:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001912:	f107 0310 	add.w	r3, r7, #16
 8001916:	4619      	mov	r1, r3
 8001918:	4815      	ldr	r0, [pc, #84]	; (8001970 <MX_GPIO_Init+0xe0>)
 800191a:	f000 fcd9 	bl	80022d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin SEG1_A_Pin
                           SEG1_B_Pin SEG1_C_Pin SEG1_D_Pin SEG1_E_Pin
                           SEG1_F_Pin SEG1_G_Pin SEG2_A_Pin SEG2_B_Pin
                           SEG2_C_Pin SEG2_D_Pin SEG2_E_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|SEG1_A_Pin
 800191e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001922:	613b      	str	r3, [r7, #16]
                          |SEG1_B_Pin|SEG1_C_Pin|SEG1_D_Pin|SEG1_E_Pin
                          |SEG1_F_Pin|SEG1_G_Pin|SEG2_A_Pin|SEG2_B_Pin
                          |SEG2_C_Pin|SEG2_D_Pin|SEG2_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2302      	movs	r3, #2
 800192e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	4619      	mov	r1, r3
 8001936:	480c      	ldr	r0, [pc, #48]	; (8001968 <MX_GPIO_Init+0xd8>)
 8001938:	f000 fcca 	bl	80022d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG2_F_Pin SEG2_G_Pin SEG3_A_Pin SEG4_B_Pin
                           SEG4_C_Pin SEG4_D_Pin SEG4_E_Pin SEG4_F_Pin
                           SEG4_G_Pin SEG3_B_Pin SEG3_C_Pin SEG3_D_Pin
                           SEG3_E_Pin SEG3_F_Pin SEG3_G_Pin SEG4_A_Pin */
  GPIO_InitStruct.Pin = SEG2_F_Pin|SEG2_G_Pin|SEG3_A_Pin|SEG4_B_Pin
 800193c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001940:	613b      	str	r3, [r7, #16]
                          |SEG4_C_Pin|SEG4_D_Pin|SEG4_E_Pin|SEG4_F_Pin
                          |SEG4_G_Pin|SEG3_B_Pin|SEG3_C_Pin|SEG3_D_Pin
                          |SEG3_E_Pin|SEG3_F_Pin|SEG3_G_Pin|SEG4_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2302      	movs	r3, #2
 800194c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194e:	f107 0310 	add.w	r3, r7, #16
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_GPIO_Init+0xdc>)
 8001956:	f000 fcbb 	bl	80022d0 <HAL_GPIO_Init>

}
 800195a:	bf00      	nop
 800195c:	3720      	adds	r7, #32
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	40010800 	.word	0x40010800
 800196c:	40010c00 	.word	0x40010c00
 8001970:	40011000 	.word	0x40011000

08001974 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	timerRun();
 800197c:	f000 f83c 	bl	80019f8 <timerRun>
	getKeyInput();
 8001980:	f7fe fe26 	bl	80005d0 <getKeyInput>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001994:	e7fe      	b.n	8001994 <Error_Handler+0x8>
	...

08001998 <setTimer1>:
int timer1_flag = 0;
int timer1_counter = 0;
int timer2_flag = 0;
int timer2_counter = 0;

void setTimer1(int duration){
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	timer1_flag = 0;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <setTimer1+0x2c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
	timer1_counter = duration /TICK;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <setTimer1+0x30>)
 80019aa:	fb82 1203 	smull	r1, r2, r2, r3
 80019ae:	1092      	asrs	r2, r2, #2
 80019b0:	17db      	asrs	r3, r3, #31
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	4a05      	ldr	r2, [pc, #20]	; (80019cc <setTimer1+0x34>)
 80019b6:	6013      	str	r3, [r2, #0]
};
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000070 	.word	0x20000070
 80019c8:	66666667 	.word	0x66666667
 80019cc:	20000074 	.word	0x20000074

080019d0 <setTimer2>:

void setTimer2(int duration){
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	timer2_flag = 0;
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <setTimer2+0x20>)
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
	timer2_counter = duration;
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <setTimer2+0x24>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6013      	str	r3, [r2, #0]
};
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000078 	.word	0x20000078
 80019f4:	2000007c 	.word	0x2000007c

080019f8 <timerRun>:


void timerRun(){
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <timerRun+0x4c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	dd0b      	ble.n	8001a1c <timerRun+0x24>
		timer1_counter --;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <timerRun+0x4c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <timerRun+0x4c>)
 8001a0c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <timerRun+0x4c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	dc02      	bgt.n	8001a1c <timerRun+0x24>
			timer1_flag = 1;
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <timerRun+0x50>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <timerRun+0x54>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	dd0b      	ble.n	8001a3c <timerRun+0x44>
			timer2_counter --;
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <timerRun+0x54>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <timerRun+0x54>)
 8001a2c:	6013      	str	r3, [r2, #0]
			if(timer2_counter <= 0){
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <timerRun+0x54>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	dc02      	bgt.n	8001a3c <timerRun+0x44>
				timer2_flag = 1;
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <timerRun+0x58>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
			}
		}
};
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	20000074 	.word	0x20000074
 8001a48:	20000070 	.word	0x20000070
 8001a4c:	2000007c 	.word	0x2000007c
 8001a50:	20000078 	.word	0x20000078

08001a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_MspInit+0x5c>)
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <HAL_MspInit+0x5c>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6193      	str	r3, [r2, #24]
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_MspInit+0x5c>)
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_MspInit+0x5c>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <HAL_MspInit+0x5c>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	61d3      	str	r3, [r2, #28]
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <HAL_MspInit+0x5c>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_MspInit+0x60>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <HAL_MspInit+0x60>)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010000 	.word	0x40010000

08001ab8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac8:	d113      	bne.n	8001af2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_TIM_Base_MspInit+0x44>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <HAL_TIM_Base_MspInit+0x44>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	61d3      	str	r3, [r2, #28]
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_TIM_Base_MspInit+0x44>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	201c      	movs	r0, #28
 8001ae8:	f000 fbbb 	bl	8002262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001aec:	201c      	movs	r0, #28
 8001aee:	f000 fbd4 	bl	800229a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <NMI_Handler+0x4>

08001b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <MemManage_Handler+0x4>

08001b12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b46:	f000 fa99 	bl	800207c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <TIM2_IRQHandler+0x10>)
 8001b56:	f001 f9e9 	bl	8002f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000088 	.word	0x20000088

08001b64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <todoMODE1>:
int temp = 0;

int state_MODE1 = 0;

int counter1;
void todoMODE1(){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0

	switch (state_MODE1){
 8001b74:	4b65      	ldr	r3, [pc, #404]	; (8001d0c <todoMODE1+0x19c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	f200 80bc 	bhi.w	8001cf6 <todoMODE1+0x186>
 8001b7e:	a201      	add	r2, pc, #4	; (adr r2, 8001b84 <todoMODE1+0x14>)
 8001b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b84:	08001b95 	.word	0x08001b95
 8001b88:	08001bbf 	.word	0x08001bbf
 8001b8c:	08001c27 	.word	0x08001c27
 8001b90:	08001c8f 	.word	0x08001c8f
		case 0 :
			ledOFF();
 8001b94:	f7fe fdf4 	bl	8000780 <ledOFF>
			if(timer1_flag == 1){
 8001b98:	4b5d      	ldr	r3, [pc, #372]	; (8001d10 <todoMODE1+0x1a0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	f040 80ac 	bne.w	8001cfa <todoMODE1+0x18a>
				state_MODE1 = 1;
 8001ba2:	4b5a      	ldr	r3, [pc, #360]	; (8001d0c <todoMODE1+0x19c>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
				counter1 = 5;
 8001ba8:	4b5a      	ldr	r3, [pc, #360]	; (8001d14 <todoMODE1+0x1a4>)
 8001baa:	2205      	movs	r2, #5
 8001bac:	601a      	str	r2, [r3, #0]
				setTimer2(100);
 8001bae:	2064      	movs	r0, #100	; 0x64
 8001bb0:	f7ff ff0e 	bl	80019d0 <setTimer2>
				setTimer1(5000);
 8001bb4:	f241 3088 	movw	r0, #5000	; 0x1388
 8001bb8:	f7ff feee 	bl	8001998 <setTimer1>
			}
			break;
 8001bbc:	e09d      	b.n	8001cfa <todoMODE1+0x18a>
		case 1:
			ledredON();
 8001bbe:	f7fe fe0b 	bl	80007d8 <ledredON>
			display7SEG1(counter1);
 8001bc2:	4b54      	ldr	r3, [pc, #336]	; (8001d14 <todoMODE1+0x1a4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fe48 	bl	800085c <display7SEG1>
			display7SEG2(counter1);
 8001bcc:	4b51      	ldr	r3, [pc, #324]	; (8001d14 <todoMODE1+0x1a4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fff1 	bl	8000bb8 <display7SEG2>
			display7SEG3(counter1);
 8001bd6:	4b4f      	ldr	r3, [pc, #316]	; (8001d14 <todoMODE1+0x1a4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff f9b0 	bl	8000f40 <display7SEG3>
			display7SEG4(counter1);
 8001be0:	4b4c      	ldr	r3, [pc, #304]	; (8001d14 <todoMODE1+0x1a4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fb45 	bl	8001274 <display7SEG4>
			if(timer2_flag == 1){
 8001bea:	4b4b      	ldr	r3, [pc, #300]	; (8001d18 <todoMODE1+0x1a8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d107      	bne.n	8001c02 <todoMODE1+0x92>
				counter1--;
 8001bf2:	4b48      	ldr	r3, [pc, #288]	; (8001d14 <todoMODE1+0x1a4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	4a46      	ldr	r2, [pc, #280]	; (8001d14 <todoMODE1+0x1a4>)
 8001bfa:	6013      	str	r3, [r2, #0]
				setTimer2(100);
 8001bfc:	2064      	movs	r0, #100	; 0x64
 8001bfe:	f7ff fee7 	bl	80019d0 <setTimer2>
			}
			if(timer1_flag == 1){
 8001c02:	4b43      	ldr	r3, [pc, #268]	; (8001d10 <todoMODE1+0x1a0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d179      	bne.n	8001cfe <todoMODE1+0x18e>
				state_MODE1 = 2;
 8001c0a:	4b40      	ldr	r3, [pc, #256]	; (8001d0c <todoMODE1+0x19c>)
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	601a      	str	r2, [r3, #0]
				counter1 = 3;
 8001c10:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <todoMODE1+0x1a4>)
 8001c12:	2203      	movs	r2, #3
 8001c14:	601a      	str	r2, [r3, #0]
				setTimer2(100);
 8001c16:	2064      	movs	r0, #100	; 0x64
 8001c18:	f7ff feda 	bl	80019d0 <setTimer2>
				setTimer1(3000);
 8001c1c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c20:	f7ff feba 	bl	8001998 <setTimer1>
			}
			break;
 8001c24:	e06b      	b.n	8001cfe <todoMODE1+0x18e>
		case 2:
			ledgreenON();
 8001c26:	f7fe fded 	bl	8000804 <ledgreenON>
			display7SEG1(counter1);
 8001c2a:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <todoMODE1+0x1a4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fe14 	bl	800085c <display7SEG1>
			display7SEG2(counter1);
 8001c34:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <todoMODE1+0x1a4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe ffbd 	bl	8000bb8 <display7SEG2>
			display7SEG3(counter1);
 8001c3e:	4b35      	ldr	r3, [pc, #212]	; (8001d14 <todoMODE1+0x1a4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f97c 	bl	8000f40 <display7SEG3>
			display7SEG4(counter1);
 8001c48:	4b32      	ldr	r3, [pc, #200]	; (8001d14 <todoMODE1+0x1a4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fb11 	bl	8001274 <display7SEG4>
			if(timer2_flag == 1){
 8001c52:	4b31      	ldr	r3, [pc, #196]	; (8001d18 <todoMODE1+0x1a8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d107      	bne.n	8001c6a <todoMODE1+0xfa>
				counter1--;
 8001c5a:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <todoMODE1+0x1a4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	4a2c      	ldr	r2, [pc, #176]	; (8001d14 <todoMODE1+0x1a4>)
 8001c62:	6013      	str	r3, [r2, #0]
				setTimer2(100);
 8001c64:	2064      	movs	r0, #100	; 0x64
 8001c66:	f7ff feb3 	bl	80019d0 <setTimer2>
			}
			if(timer1_flag == 1){
 8001c6a:	4b29      	ldr	r3, [pc, #164]	; (8001d10 <todoMODE1+0x1a0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d147      	bne.n	8001d02 <todoMODE1+0x192>
				state_MODE1 = 3;
 8001c72:	4b26      	ldr	r3, [pc, #152]	; (8001d0c <todoMODE1+0x19c>)
 8001c74:	2203      	movs	r2, #3
 8001c76:	601a      	str	r2, [r3, #0]
				counter1 = 2;
 8001c78:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <todoMODE1+0x1a4>)
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	601a      	str	r2, [r3, #0]
				setTimer2(100);
 8001c7e:	2064      	movs	r0, #100	; 0x64
 8001c80:	f7ff fea6 	bl	80019d0 <setTimer2>
				setTimer1(2000);
 8001c84:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c88:	f7ff fe86 	bl	8001998 <setTimer1>
			}
			break;
 8001c8c:	e039      	b.n	8001d02 <todoMODE1+0x192>
		case 3:
			ledyellowON();
 8001c8e:	f7fe fdcf 	bl	8000830 <ledyellowON>
			display7SEG1(counter1);
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <todoMODE1+0x1a4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fde0 	bl	800085c <display7SEG1>
			display7SEG2(counter1);
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <todoMODE1+0x1a4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe ff89 	bl	8000bb8 <display7SEG2>
			display7SEG3(counter1);
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <todoMODE1+0x1a4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff f948 	bl	8000f40 <display7SEG3>
			display7SEG4(counter1);
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <todoMODE1+0x1a4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fadd 	bl	8001274 <display7SEG4>
			if(timer2_flag == 1){
 8001cba:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <todoMODE1+0x1a8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d107      	bne.n	8001cd2 <todoMODE1+0x162>
				counter1--;
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <todoMODE1+0x1a4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <todoMODE1+0x1a4>)
 8001cca:	6013      	str	r3, [r2, #0]
				setTimer2(100);
 8001ccc:	2064      	movs	r0, #100	; 0x64
 8001cce:	f7ff fe7f 	bl	80019d0 <setTimer2>
			}
			if(timer1_flag == 1){
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <todoMODE1+0x1a0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d115      	bne.n	8001d06 <todoMODE1+0x196>
				state_MODE1 = 1;
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <todoMODE1+0x19c>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
				counter1 = 5;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <todoMODE1+0x1a4>)
 8001ce2:	2205      	movs	r2, #5
 8001ce4:	601a      	str	r2, [r3, #0]
				setTimer2(100);
 8001ce6:	2064      	movs	r0, #100	; 0x64
 8001ce8:	f7ff fe72 	bl	80019d0 <setTimer2>
				setTimer1(5000);
 8001cec:	f241 3088 	movw	r0, #5000	; 0x1388
 8001cf0:	f7ff fe52 	bl	8001998 <setTimer1>
			}
			break;
 8001cf4:	e007      	b.n	8001d06 <todoMODE1+0x196>

		default:
			break;
 8001cf6:	bf00      	nop
 8001cf8:	e006      	b.n	8001d08 <todoMODE1+0x198>
			break;
 8001cfa:	bf00      	nop
 8001cfc:	e004      	b.n	8001d08 <todoMODE1+0x198>
			break;
 8001cfe:	bf00      	nop
 8001d00:	e002      	b.n	8001d08 <todoMODE1+0x198>
			break;
 8001d02:	bf00      	nop
 8001d04:	e000      	b.n	8001d08 <todoMODE1+0x198>
			break;
 8001d06:	bf00      	nop

	}
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000084 	.word	0x20000084
 8001d10:	20000070 	.word	0x20000070
 8001d14:	200000d0 	.word	0x200000d0
 8001d18:	20000078 	.word	0x20000078

08001d1c <todoMODE2>:

void todoMODE2(){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	display7SEG1(0);
 8001d20:	2000      	movs	r0, #0
 8001d22:	f7fe fd9b 	bl	800085c <display7SEG1>
	display7SEG2(2);
 8001d26:	2002      	movs	r0, #2
 8001d28:	f7fe ff46 	bl	8000bb8 <display7SEG2>
	display7SEG3(temp/10);
 8001d2c:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <todoMODE2+0xc0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a2b      	ldr	r2, [pc, #172]	; (8001de0 <todoMODE2+0xc4>)
 8001d32:	fb82 1203 	smull	r1, r2, r2, r3
 8001d36:	1092      	asrs	r2, r2, #2
 8001d38:	17db      	asrs	r3, r3, #31
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff f8ff 	bl	8000f40 <display7SEG3>
	display7SEG4(temp%10);
 8001d42:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <todoMODE2+0xc0>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <todoMODE2+0xc4>)
 8001d48:	fb83 1302 	smull	r1, r3, r3, r2
 8001d4c:	1099      	asrs	r1, r3, #2
 8001d4e:	17d3      	asrs	r3, r2, #31
 8001d50:	1ac9      	subs	r1, r1, r3
 8001d52:	460b      	mov	r3, r1
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	1ad1      	subs	r1, r2, r3
 8001d5c:	4608      	mov	r0, r1
 8001d5e:	f7ff fa89 	bl	8001274 <display7SEG4>
	if(timer1_flag == 1){
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <todoMODE2+0xc8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d112      	bne.n	8001d90 <todoMODE2+0x74>
		ledredON();
 8001d6a:	f7fe fd35 	bl	80007d8 <ledredON>
		setTimer2(5);
 8001d6e:	2005      	movs	r0, #5
 8001d70:	f7ff fe2e 	bl	80019d0 <setTimer2>
		setTimer1(value*1000);
 8001d74:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <todoMODE2+0xcc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	491c      	ldr	r1, [pc, #112]	; (8001dec <todoMODE2+0xd0>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe f9e6 	bl	800014c <__aeabi_fmul>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fba4 	bl	80004d0 <__aeabi_f2iz>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe04 	bl	8001998 <setTimer1>
	}
	if(timer2_flag == 1){
 8001d90:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <todoMODE2+0xd4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <todoMODE2+0x80>
		ledOFF();
 8001d98:	f7fe fcf2 	bl	8000780 <ledOFF>
	}
	if(isButton2PRESS() == 1){
 8001d9c:	f7fe fbe8 	bl	8000570 <isButton2PRESS>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d10b      	bne.n	8001dbe <todoMODE2+0xa2>
		temp ++;
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <todoMODE2+0xc0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	3301      	adds	r3, #1
 8001dac:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <todoMODE2+0xc0>)
 8001dae:	6013      	str	r3, [r2, #0]
		if(temp >= 100){
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <todoMODE2+0xc0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b63      	cmp	r3, #99	; 0x63
 8001db6:	dd02      	ble.n	8001dbe <todoMODE2+0xa2>
			temp = 1;
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <todoMODE2+0xc0>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
		}
	}
	if(isButton3PRESS() == 1){
 8001dbe:	f7fe fbf5 	bl	80005ac <isButton3PRESS>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d107      	bne.n	8001dd8 <todoMODE2+0xbc>
		value = temp;
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <todoMODE2+0xc0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fb2b 	bl	8000428 <__aeabi_i2f>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <todoMODE2+0xcc>)
 8001dd6:	6013      	str	r3, [r2, #0]
	}

}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000080 	.word	0x20000080
 8001de0:	66666667 	.word	0x66666667
 8001de4:	20000070 	.word	0x20000070
 8001de8:	20000038 	.word	0x20000038
 8001dec:	447a0000 	.word	0x447a0000
 8001df0:	20000078 	.word	0x20000078

08001df4 <todoMODE3>:

void todoMODE3(){
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	display7SEG1(0);
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f7fe fd2f 	bl	800085c <display7SEG1>
	display7SEG2(3);
 8001dfe:	2003      	movs	r0, #3
 8001e00:	f7fe feda 	bl	8000bb8 <display7SEG2>
	display7SEG3(temp/10);
 8001e04:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <todoMODE3+0xc0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a2b      	ldr	r2, [pc, #172]	; (8001eb8 <todoMODE3+0xc4>)
 8001e0a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e0e:	1092      	asrs	r2, r2, #2
 8001e10:	17db      	asrs	r3, r3, #31
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff f893 	bl	8000f40 <display7SEG3>
	display7SEG4(temp%10);
 8001e1a:	4b26      	ldr	r3, [pc, #152]	; (8001eb4 <todoMODE3+0xc0>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <todoMODE3+0xc4>)
 8001e20:	fb83 1302 	smull	r1, r3, r3, r2
 8001e24:	1099      	asrs	r1, r3, #2
 8001e26:	17d3      	asrs	r3, r2, #31
 8001e28:	1ac9      	subs	r1, r1, r3
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	1ad1      	subs	r1, r2, r3
 8001e34:	4608      	mov	r0, r1
 8001e36:	f7ff fa1d 	bl	8001274 <display7SEG4>
	if(timer1_flag == 1){
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <todoMODE3+0xc8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d112      	bne.n	8001e68 <todoMODE3+0x74>
		ledyellowON();
 8001e42:	f7fe fcf5 	bl	8000830 <ledyellowON>
		setTimer2(5);
 8001e46:	2005      	movs	r0, #5
 8001e48:	f7ff fdc2 	bl	80019d0 <setTimer2>
		setTimer1(value*1000);
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <todoMODE3+0xcc>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	491c      	ldr	r1, [pc, #112]	; (8001ec4 <todoMODE3+0xd0>)
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe f97a 	bl	800014c <__aeabi_fmul>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fb38 	bl	80004d0 <__aeabi_f2iz>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fd98 	bl	8001998 <setTimer1>
	}
	if(timer2_flag == 1){
 8001e68:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <todoMODE3+0xd4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <todoMODE3+0x80>
		ledOFF();
 8001e70:	f7fe fc86 	bl	8000780 <ledOFF>
	}
	if(isButton2PRESS() == 1){
 8001e74:	f7fe fb7c 	bl	8000570 <isButton2PRESS>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d10b      	bne.n	8001e96 <todoMODE3+0xa2>
		temp ++;
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <todoMODE3+0xc0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	3301      	adds	r3, #1
 8001e84:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <todoMODE3+0xc0>)
 8001e86:	6013      	str	r3, [r2, #0]
		if(temp >= 100){
 8001e88:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <todoMODE3+0xc0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b63      	cmp	r3, #99	; 0x63
 8001e8e:	dd02      	ble.n	8001e96 <todoMODE3+0xa2>
			temp = 1;
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <todoMODE3+0xc0>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
		}
	}
	if(isButton3PRESS() == 1){
 8001e96:	f7fe fb89 	bl	80005ac <isButton3PRESS>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d107      	bne.n	8001eb0 <todoMODE3+0xbc>
		value = temp;
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <todoMODE3+0xc0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fabf 	bl	8000428 <__aeabi_i2f>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <todoMODE3+0xcc>)
 8001eae:	6013      	str	r3, [r2, #0]
	}
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000080 	.word	0x20000080
 8001eb8:	66666667 	.word	0x66666667
 8001ebc:	20000070 	.word	0x20000070
 8001ec0:	20000038 	.word	0x20000038
 8001ec4:	447a0000 	.word	0x447a0000
 8001ec8:	20000078 	.word	0x20000078

08001ecc <todoMODE4>:

void todoMODE4(){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	display7SEG1(0);
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7fe fcc3 	bl	800085c <display7SEG1>
	display7SEG2(4);
 8001ed6:	2004      	movs	r0, #4
 8001ed8:	f7fe fe6e 	bl	8000bb8 <display7SEG2>
	display7SEG3(temp/10);
 8001edc:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <todoMODE4+0xc0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a2b      	ldr	r2, [pc, #172]	; (8001f90 <todoMODE4+0xc4>)
 8001ee2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ee6:	1092      	asrs	r2, r2, #2
 8001ee8:	17db      	asrs	r3, r3, #31
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff f827 	bl	8000f40 <display7SEG3>
	display7SEG4(temp%10);
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <todoMODE4+0xc0>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <todoMODE4+0xc4>)
 8001ef8:	fb83 1302 	smull	r1, r3, r3, r2
 8001efc:	1099      	asrs	r1, r3, #2
 8001efe:	17d3      	asrs	r3, r2, #31
 8001f00:	1ac9      	subs	r1, r1, r3
 8001f02:	460b      	mov	r3, r1
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	1ad1      	subs	r1, r2, r3
 8001f0c:	4608      	mov	r0, r1
 8001f0e:	f7ff f9b1 	bl	8001274 <display7SEG4>
	if(timer1_flag == 1){
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <todoMODE4+0xc8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d112      	bne.n	8001f40 <todoMODE4+0x74>
		ledgreenON();
 8001f1a:	f7fe fc73 	bl	8000804 <ledgreenON>
		setTimer2(5);
 8001f1e:	2005      	movs	r0, #5
 8001f20:	f7ff fd56 	bl	80019d0 <setTimer2>
		setTimer1(value*1000);
 8001f24:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <todoMODE4+0xcc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	491c      	ldr	r1, [pc, #112]	; (8001f9c <todoMODE4+0xd0>)
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe f90e 	bl	800014c <__aeabi_fmul>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe facc 	bl	80004d0 <__aeabi_f2iz>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fd2c 	bl	8001998 <setTimer1>
	}
	if(timer2_flag == 1){
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <todoMODE4+0xd4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <todoMODE4+0x80>
		ledOFF();
 8001f48:	f7fe fc1a 	bl	8000780 <ledOFF>
	}
	if(isButton2PRESS() == 1){
 8001f4c:	f7fe fb10 	bl	8000570 <isButton2PRESS>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d10b      	bne.n	8001f6e <todoMODE4+0xa2>
		temp ++;
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <todoMODE4+0xc0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <todoMODE4+0xc0>)
 8001f5e:	6013      	str	r3, [r2, #0]
		if(temp >= 100){
 8001f60:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <todoMODE4+0xc0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b63      	cmp	r3, #99	; 0x63
 8001f66:	dd02      	ble.n	8001f6e <todoMODE4+0xa2>
			temp = 1;
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <todoMODE4+0xc0>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
		}
	}
	if(isButton3PRESS() == 1){
 8001f6e:	f7fe fb1d 	bl	80005ac <isButton3PRESS>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d107      	bne.n	8001f88 <todoMODE4+0xbc>
		value = temp;
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <todoMODE4+0xc0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fa53 	bl	8000428 <__aeabi_i2f>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <todoMODE4+0xcc>)
 8001f86:	6013      	str	r3, [r2, #0]
	}
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000080 	.word	0x20000080
 8001f90:	66666667 	.word	0x66666667
 8001f94:	20000070 	.word	0x20000070
 8001f98:	20000038 	.word	0x20000038
 8001f9c:	447a0000 	.word	0x447a0000
 8001fa0:	20000078 	.word	0x20000078

08001fa4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa4:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fa6:	490d      	ldr	r1, [pc, #52]	; (8001fdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	; (8001fe0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fac:	e002      	b.n	8001fb4 <LoopCopyDataInit>

08001fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb2:	3304      	adds	r3, #4

08001fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb8:	d3f9      	bcc.n	8001fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fbc:	4c0a      	ldr	r4, [pc, #40]	; (8001fe8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc0:	e001      	b.n	8001fc6 <LoopFillZerobss>

08001fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc4:	3204      	adds	r2, #4

08001fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc8:	d3fb      	bcc.n	8001fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fca:	f7ff fdcb 	bl	8001b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fce:	f001 faf5 	bl	80035bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fd2:	f7ff fbbd 	bl	8001750 <main>
  bx lr
 8001fd6:	4770      	bx	lr
  ldr r0, =_sdata
 8001fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fdc:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8001fe0:	08003654 	.word	0x08003654
  ldr r2, =_sbss
 8001fe4:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8001fe8:	200000d8 	.word	0x200000d8

08001fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fec:	e7fe      	b.n	8001fec <ADC1_2_IRQHandler>
	...

08001ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <HAL_Init+0x28>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a07      	ldr	r2, [pc, #28]	; (8002018 <HAL_Init+0x28>)
 8001ffa:	f043 0310 	orr.w	r3, r3, #16
 8001ffe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002000:	2003      	movs	r0, #3
 8002002:	f000 f923 	bl	800224c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002006:	200f      	movs	r0, #15
 8002008:	f000 f808 	bl	800201c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800200c:	f7ff fd22 	bl	8001a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40022000 	.word	0x40022000

0800201c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_InitTick+0x54>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_InitTick+0x58>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	4619      	mov	r1, r3
 800202e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002032:	fbb3 f3f1 	udiv	r3, r3, r1
 8002036:	fbb2 f3f3 	udiv	r3, r2, r3
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f93b 	bl	80022b6 <HAL_SYSTICK_Config>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e00e      	b.n	8002068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b0f      	cmp	r3, #15
 800204e:	d80a      	bhi.n	8002066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002050:	2200      	movs	r2, #0
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
 8002058:	f000 f903 	bl	8002262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800205c:	4a06      	ldr	r2, [pc, #24]	; (8002078 <HAL_InitTick+0x5c>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	e000      	b.n	8002068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000034 	.word	0x20000034
 8002074:	20000040 	.word	0x20000040
 8002078:	2000003c 	.word	0x2000003c

0800207c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_IncTick+0x1c>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_IncTick+0x20>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4413      	add	r3, r2
 800208c:	4a03      	ldr	r2, [pc, #12]	; (800209c <HAL_IncTick+0x20>)
 800208e:	6013      	str	r3, [r2, #0]
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	20000040 	.word	0x20000040
 800209c:	200000d4 	.word	0x200000d4

080020a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return uwTick;
 80020a4:	4b02      	ldr	r3, [pc, #8]	; (80020b0 <HAL_GetTick+0x10>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	200000d4 	.word	0x200000d4

080020b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d0:	4013      	ands	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e6:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	60d3      	str	r3, [r2, #12]
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <__NVIC_GetPriorityGrouping+0x18>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	0a1b      	lsrs	r3, r3, #8
 8002106:	f003 0307 	and.w	r3, r3, #7
}
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	2b00      	cmp	r3, #0
 8002128:	db0b      	blt.n	8002142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	f003 021f 	and.w	r2, r3, #31
 8002130:	4906      	ldr	r1, [pc, #24]	; (800214c <__NVIC_EnableIRQ+0x34>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	2001      	movs	r0, #1
 800213a:	fa00 f202 	lsl.w	r2, r0, r2
 800213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	e000e100 	.word	0xe000e100

08002150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	490c      	ldr	r1, [pc, #48]	; (800219c <__NVIC_SetPriority+0x4c>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	440b      	add	r3, r1
 8002174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002178:	e00a      	b.n	8002190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4908      	ldr	r1, [pc, #32]	; (80021a0 <__NVIC_SetPriority+0x50>)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3b04      	subs	r3, #4
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	440b      	add	r3, r1
 800218e:	761a      	strb	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f1c3 0307 	rsb	r3, r3, #7
 80021be:	2b04      	cmp	r3, #4
 80021c0:	bf28      	it	cs
 80021c2:	2304      	movcs	r3, #4
 80021c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d902      	bls.n	80021d4 <NVIC_EncodePriority+0x30>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b03      	subs	r3, #3
 80021d2:	e000      	b.n	80021d6 <NVIC_EncodePriority+0x32>
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	4313      	orrs	r3, r2
         );
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002218:	d301      	bcc.n	800221e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221a:	2301      	movs	r3, #1
 800221c:	e00f      	b.n	800223e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <SysTick_Config+0x40>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002226:	210f      	movs	r1, #15
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f7ff ff90 	bl	8002150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <SysTick_Config+0x40>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002236:	4b04      	ldr	r3, [pc, #16]	; (8002248 <SysTick_Config+0x40>)
 8002238:	2207      	movs	r2, #7
 800223a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	e000e010 	.word	0xe000e010

0800224c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff2d 	bl	80020b4 <__NVIC_SetPriorityGrouping>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002274:	f7ff ff42 	bl	80020fc <__NVIC_GetPriorityGrouping>
 8002278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	6978      	ldr	r0, [r7, #20]
 8002280:	f7ff ff90 	bl	80021a4 <NVIC_EncodePriority>
 8002284:	4602      	mov	r2, r0
 8002286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff5f 	bl	8002150 <__NVIC_SetPriority>
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff35 	bl	8002118 <__NVIC_EnableIRQ>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ffa2 	bl	8002208 <SysTick_Config>
 80022c4:	4603      	mov	r3, r0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b08b      	sub	sp, #44	; 0x2c
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e2:	e148      	b.n	8002576 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022e4:	2201      	movs	r2, #1
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	f040 8137 	bne.w	8002570 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4aa3      	ldr	r2, [pc, #652]	; (8002594 <HAL_GPIO_Init+0x2c4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d05e      	beq.n	80023ca <HAL_GPIO_Init+0xfa>
 800230c:	4aa1      	ldr	r2, [pc, #644]	; (8002594 <HAL_GPIO_Init+0x2c4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d875      	bhi.n	80023fe <HAL_GPIO_Init+0x12e>
 8002312:	4aa1      	ldr	r2, [pc, #644]	; (8002598 <HAL_GPIO_Init+0x2c8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d058      	beq.n	80023ca <HAL_GPIO_Init+0xfa>
 8002318:	4a9f      	ldr	r2, [pc, #636]	; (8002598 <HAL_GPIO_Init+0x2c8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d86f      	bhi.n	80023fe <HAL_GPIO_Init+0x12e>
 800231e:	4a9f      	ldr	r2, [pc, #636]	; (800259c <HAL_GPIO_Init+0x2cc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d052      	beq.n	80023ca <HAL_GPIO_Init+0xfa>
 8002324:	4a9d      	ldr	r2, [pc, #628]	; (800259c <HAL_GPIO_Init+0x2cc>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d869      	bhi.n	80023fe <HAL_GPIO_Init+0x12e>
 800232a:	4a9d      	ldr	r2, [pc, #628]	; (80025a0 <HAL_GPIO_Init+0x2d0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d04c      	beq.n	80023ca <HAL_GPIO_Init+0xfa>
 8002330:	4a9b      	ldr	r2, [pc, #620]	; (80025a0 <HAL_GPIO_Init+0x2d0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d863      	bhi.n	80023fe <HAL_GPIO_Init+0x12e>
 8002336:	4a9b      	ldr	r2, [pc, #620]	; (80025a4 <HAL_GPIO_Init+0x2d4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d046      	beq.n	80023ca <HAL_GPIO_Init+0xfa>
 800233c:	4a99      	ldr	r2, [pc, #612]	; (80025a4 <HAL_GPIO_Init+0x2d4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d85d      	bhi.n	80023fe <HAL_GPIO_Init+0x12e>
 8002342:	2b12      	cmp	r3, #18
 8002344:	d82a      	bhi.n	800239c <HAL_GPIO_Init+0xcc>
 8002346:	2b12      	cmp	r3, #18
 8002348:	d859      	bhi.n	80023fe <HAL_GPIO_Init+0x12e>
 800234a:	a201      	add	r2, pc, #4	; (adr r2, 8002350 <HAL_GPIO_Init+0x80>)
 800234c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002350:	080023cb 	.word	0x080023cb
 8002354:	080023a5 	.word	0x080023a5
 8002358:	080023b7 	.word	0x080023b7
 800235c:	080023f9 	.word	0x080023f9
 8002360:	080023ff 	.word	0x080023ff
 8002364:	080023ff 	.word	0x080023ff
 8002368:	080023ff 	.word	0x080023ff
 800236c:	080023ff 	.word	0x080023ff
 8002370:	080023ff 	.word	0x080023ff
 8002374:	080023ff 	.word	0x080023ff
 8002378:	080023ff 	.word	0x080023ff
 800237c:	080023ff 	.word	0x080023ff
 8002380:	080023ff 	.word	0x080023ff
 8002384:	080023ff 	.word	0x080023ff
 8002388:	080023ff 	.word	0x080023ff
 800238c:	080023ff 	.word	0x080023ff
 8002390:	080023ff 	.word	0x080023ff
 8002394:	080023ad 	.word	0x080023ad
 8002398:	080023c1 	.word	0x080023c1
 800239c:	4a82      	ldr	r2, [pc, #520]	; (80025a8 <HAL_GPIO_Init+0x2d8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d013      	beq.n	80023ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023a2:	e02c      	b.n	80023fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	623b      	str	r3, [r7, #32]
          break;
 80023aa:	e029      	b.n	8002400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	3304      	adds	r3, #4
 80023b2:	623b      	str	r3, [r7, #32]
          break;
 80023b4:	e024      	b.n	8002400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	3308      	adds	r3, #8
 80023bc:	623b      	str	r3, [r7, #32]
          break;
 80023be:	e01f      	b.n	8002400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	330c      	adds	r3, #12
 80023c6:	623b      	str	r3, [r7, #32]
          break;
 80023c8:	e01a      	b.n	8002400 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d102      	bne.n	80023d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023d2:	2304      	movs	r3, #4
 80023d4:	623b      	str	r3, [r7, #32]
          break;
 80023d6:	e013      	b.n	8002400 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023e0:	2308      	movs	r3, #8
 80023e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	611a      	str	r2, [r3, #16]
          break;
 80023ea:	e009      	b.n	8002400 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023ec:	2308      	movs	r3, #8
 80023ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69fa      	ldr	r2, [r7, #28]
 80023f4:	615a      	str	r2, [r3, #20]
          break;
 80023f6:	e003      	b.n	8002400 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023f8:	2300      	movs	r3, #0
 80023fa:	623b      	str	r3, [r7, #32]
          break;
 80023fc:	e000      	b.n	8002400 <HAL_GPIO_Init+0x130>
          break;
 80023fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2bff      	cmp	r3, #255	; 0xff
 8002404:	d801      	bhi.n	800240a <HAL_GPIO_Init+0x13a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	e001      	b.n	800240e <HAL_GPIO_Init+0x13e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3304      	adds	r3, #4
 800240e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2bff      	cmp	r3, #255	; 0xff
 8002414:	d802      	bhi.n	800241c <HAL_GPIO_Init+0x14c>
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	e002      	b.n	8002422 <HAL_GPIO_Init+0x152>
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	3b08      	subs	r3, #8
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	210f      	movs	r1, #15
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	fa01 f303 	lsl.w	r3, r1, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	401a      	ands	r2, r3
 8002434:	6a39      	ldr	r1, [r7, #32]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	431a      	orrs	r2, r3
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8090 	beq.w	8002570 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002450:	4b56      	ldr	r3, [pc, #344]	; (80025ac <HAL_GPIO_Init+0x2dc>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	4a55      	ldr	r2, [pc, #340]	; (80025ac <HAL_GPIO_Init+0x2dc>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6193      	str	r3, [r2, #24]
 800245c:	4b53      	ldr	r3, [pc, #332]	; (80025ac <HAL_GPIO_Init+0x2dc>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002468:	4a51      	ldr	r2, [pc, #324]	; (80025b0 <HAL_GPIO_Init+0x2e0>)
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3302      	adds	r3, #2
 8002470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002474:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	220f      	movs	r2, #15
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	4013      	ands	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a49      	ldr	r2, [pc, #292]	; (80025b4 <HAL_GPIO_Init+0x2e4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d00d      	beq.n	80024b0 <HAL_GPIO_Init+0x1e0>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a48      	ldr	r2, [pc, #288]	; (80025b8 <HAL_GPIO_Init+0x2e8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d007      	beq.n	80024ac <HAL_GPIO_Init+0x1dc>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a47      	ldr	r2, [pc, #284]	; (80025bc <HAL_GPIO_Init+0x2ec>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d101      	bne.n	80024a8 <HAL_GPIO_Init+0x1d8>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e004      	b.n	80024b2 <HAL_GPIO_Init+0x1e2>
 80024a8:	2303      	movs	r3, #3
 80024aa:	e002      	b.n	80024b2 <HAL_GPIO_Init+0x1e2>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_GPIO_Init+0x1e2>
 80024b0:	2300      	movs	r3, #0
 80024b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b4:	f002 0203 	and.w	r2, r2, #3
 80024b8:	0092      	lsls	r2, r2, #2
 80024ba:	4093      	lsls	r3, r2
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024c2:	493b      	ldr	r1, [pc, #236]	; (80025b0 <HAL_GPIO_Init+0x2e0>)
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	3302      	adds	r3, #2
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d006      	beq.n	80024ea <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024dc:	4b38      	ldr	r3, [pc, #224]	; (80025c0 <HAL_GPIO_Init+0x2f0>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4937      	ldr	r1, [pc, #220]	; (80025c0 <HAL_GPIO_Init+0x2f0>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e006      	b.n	80024f8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024ea:	4b35      	ldr	r3, [pc, #212]	; (80025c0 <HAL_GPIO_Init+0x2f0>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	4933      	ldr	r1, [pc, #204]	; (80025c0 <HAL_GPIO_Init+0x2f0>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d006      	beq.n	8002512 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002504:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <HAL_GPIO_Init+0x2f0>)
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	492d      	ldr	r1, [pc, #180]	; (80025c0 <HAL_GPIO_Init+0x2f0>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
 8002510:	e006      	b.n	8002520 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002512:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <HAL_GPIO_Init+0x2f0>)
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	43db      	mvns	r3, r3
 800251a:	4929      	ldr	r1, [pc, #164]	; (80025c0 <HAL_GPIO_Init+0x2f0>)
 800251c:	4013      	ands	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d006      	beq.n	800253a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800252c:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <HAL_GPIO_Init+0x2f0>)
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	4923      	ldr	r1, [pc, #140]	; (80025c0 <HAL_GPIO_Init+0x2f0>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	608b      	str	r3, [r1, #8]
 8002538:	e006      	b.n	8002548 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800253a:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <HAL_GPIO_Init+0x2f0>)
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	43db      	mvns	r3, r3
 8002542:	491f      	ldr	r1, [pc, #124]	; (80025c0 <HAL_GPIO_Init+0x2f0>)
 8002544:	4013      	ands	r3, r2
 8002546:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d006      	beq.n	8002562 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002554:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <HAL_GPIO_Init+0x2f0>)
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	4919      	ldr	r1, [pc, #100]	; (80025c0 <HAL_GPIO_Init+0x2f0>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	60cb      	str	r3, [r1, #12]
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002562:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <HAL_GPIO_Init+0x2f0>)
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	43db      	mvns	r3, r3
 800256a:	4915      	ldr	r1, [pc, #84]	; (80025c0 <HAL_GPIO_Init+0x2f0>)
 800256c:	4013      	ands	r3, r2
 800256e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	3301      	adds	r3, #1
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	f47f aeaf 	bne.w	80022e4 <HAL_GPIO_Init+0x14>
  }
}
 8002586:	bf00      	nop
 8002588:	bf00      	nop
 800258a:	372c      	adds	r7, #44	; 0x2c
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	10320000 	.word	0x10320000
 8002598:	10310000 	.word	0x10310000
 800259c:	10220000 	.word	0x10220000
 80025a0:	10210000 	.word	0x10210000
 80025a4:	10120000 	.word	0x10120000
 80025a8:	10110000 	.word	0x10110000
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40010000 	.word	0x40010000
 80025b4:	40010800 	.word	0x40010800
 80025b8:	40010c00 	.word	0x40010c00
 80025bc:	40011000 	.word	0x40011000
 80025c0:	40010400 	.word	0x40010400

080025c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	887b      	ldrh	r3, [r7, #2]
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
 80025e0:	e001      	b.n	80025e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025e2:	2300      	movs	r3, #0
 80025e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	460b      	mov	r3, r1
 80025fc:	807b      	strh	r3, [r7, #2]
 80025fe:	4613      	mov	r3, r2
 8002600:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002602:	787b      	ldrb	r3, [r7, #1]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002608:	887a      	ldrh	r2, [r7, #2]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800260e:	e003      	b.n	8002618 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002610:	887b      	ldrh	r3, [r7, #2]
 8002612:	041a      	lsls	r2, r3, #16
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	611a      	str	r2, [r3, #16]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
	...

08002624 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e26c      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 8087 	beq.w	8002752 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002644:	4b92      	ldr	r3, [pc, #584]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b04      	cmp	r3, #4
 800264e:	d00c      	beq.n	800266a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002650:	4b8f      	ldr	r3, [pc, #572]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	2b08      	cmp	r3, #8
 800265a:	d112      	bne.n	8002682 <HAL_RCC_OscConfig+0x5e>
 800265c:	4b8c      	ldr	r3, [pc, #560]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002668:	d10b      	bne.n	8002682 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266a:	4b89      	ldr	r3, [pc, #548]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d06c      	beq.n	8002750 <HAL_RCC_OscConfig+0x12c>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d168      	bne.n	8002750 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e246      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268a:	d106      	bne.n	800269a <HAL_RCC_OscConfig+0x76>
 800268c:	4b80      	ldr	r3, [pc, #512]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a7f      	ldr	r2, [pc, #508]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	e02e      	b.n	80026f8 <HAL_RCC_OscConfig+0xd4>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10c      	bne.n	80026bc <HAL_RCC_OscConfig+0x98>
 80026a2:	4b7b      	ldr	r3, [pc, #492]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a7a      	ldr	r2, [pc, #488]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	4b78      	ldr	r3, [pc, #480]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a77      	ldr	r2, [pc, #476]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e01d      	b.n	80026f8 <HAL_RCC_OscConfig+0xd4>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0xbc>
 80026c6:	4b72      	ldr	r3, [pc, #456]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a71      	ldr	r2, [pc, #452]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b6f      	ldr	r3, [pc, #444]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a6e      	ldr	r2, [pc, #440]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e00b      	b.n	80026f8 <HAL_RCC_OscConfig+0xd4>
 80026e0:	4b6b      	ldr	r3, [pc, #428]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a6a      	ldr	r2, [pc, #424]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b68      	ldr	r3, [pc, #416]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a67      	ldr	r2, [pc, #412]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7ff fcce 	bl	80020a0 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002708:	f7ff fcca 	bl	80020a0 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e1fa      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	4b5d      	ldr	r3, [pc, #372]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0xe4>
 8002726:	e014      	b.n	8002752 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7ff fcba 	bl	80020a0 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002730:	f7ff fcb6 	bl	80020a0 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e1e6      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	4b53      	ldr	r3, [pc, #332]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x10c>
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d063      	beq.n	8002826 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800275e:	4b4c      	ldr	r3, [pc, #304]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00b      	beq.n	8002782 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800276a:	4b49      	ldr	r3, [pc, #292]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b08      	cmp	r3, #8
 8002774:	d11c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x18c>
 8002776:	4b46      	ldr	r3, [pc, #280]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d116      	bne.n	80027b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002782:	4b43      	ldr	r3, [pc, #268]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_RCC_OscConfig+0x176>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d001      	beq.n	800279a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e1ba      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279a:	4b3d      	ldr	r3, [pc, #244]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4939      	ldr	r1, [pc, #228]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ae:	e03a      	b.n	8002826 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d020      	beq.n	80027fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b8:	4b36      	ldr	r3, [pc, #216]	; (8002894 <HAL_RCC_OscConfig+0x270>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7ff fc6f 	bl	80020a0 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c6:	f7ff fc6b 	bl	80020a0 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e19b      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	4b2d      	ldr	r3, [pc, #180]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e4:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4927      	ldr	r1, [pc, #156]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]
 80027f8:	e015      	b.n	8002826 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fa:	4b26      	ldr	r3, [pc, #152]	; (8002894 <HAL_RCC_OscConfig+0x270>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7ff fc4e 	bl	80020a0 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002808:	f7ff fc4a 	bl	80020a0 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e17a      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d03a      	beq.n	80028a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d019      	beq.n	800286e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283a:	4b17      	ldr	r3, [pc, #92]	; (8002898 <HAL_RCC_OscConfig+0x274>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002840:	f7ff fc2e 	bl	80020a0 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002848:	f7ff fc2a 	bl	80020a0 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e15a      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285a:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002866:	2001      	movs	r0, #1
 8002868:	f000 faa6 	bl	8002db8 <RCC_Delay>
 800286c:	e01c      	b.n	80028a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <HAL_RCC_OscConfig+0x274>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002874:	f7ff fc14 	bl	80020a0 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287a:	e00f      	b.n	800289c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800287c:	f7ff fc10 	bl	80020a0 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d908      	bls.n	800289c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e140      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
 8002894:	42420000 	.word	0x42420000
 8002898:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289c:	4b9e      	ldr	r3, [pc, #632]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1e9      	bne.n	800287c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80a6 	beq.w	8002a02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ba:	4b97      	ldr	r3, [pc, #604]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10d      	bne.n	80028e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	4b94      	ldr	r3, [pc, #592]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	4a93      	ldr	r2, [pc, #588]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 80028cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d0:	61d3      	str	r3, [r2, #28]
 80028d2:	4b91      	ldr	r3, [pc, #580]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028de:	2301      	movs	r3, #1
 80028e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e2:	4b8e      	ldr	r3, [pc, #568]	; (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d118      	bne.n	8002920 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ee:	4b8b      	ldr	r3, [pc, #556]	; (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a8a      	ldr	r2, [pc, #552]	; (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 80028f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fa:	f7ff fbd1 	bl	80020a0 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002902:	f7ff fbcd 	bl	80020a0 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b64      	cmp	r3, #100	; 0x64
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e0fd      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002914:	4b81      	ldr	r3, [pc, #516]	; (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d106      	bne.n	8002936 <HAL_RCC_OscConfig+0x312>
 8002928:	4b7b      	ldr	r3, [pc, #492]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	4a7a      	ldr	r2, [pc, #488]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6213      	str	r3, [r2, #32]
 8002934:	e02d      	b.n	8002992 <HAL_RCC_OscConfig+0x36e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10c      	bne.n	8002958 <HAL_RCC_OscConfig+0x334>
 800293e:	4b76      	ldr	r3, [pc, #472]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	4a75      	ldr	r2, [pc, #468]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	6213      	str	r3, [r2, #32]
 800294a:	4b73      	ldr	r3, [pc, #460]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	4a72      	ldr	r2, [pc, #456]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002950:	f023 0304 	bic.w	r3, r3, #4
 8002954:	6213      	str	r3, [r2, #32]
 8002956:	e01c      	b.n	8002992 <HAL_RCC_OscConfig+0x36e>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2b05      	cmp	r3, #5
 800295e:	d10c      	bne.n	800297a <HAL_RCC_OscConfig+0x356>
 8002960:	4b6d      	ldr	r3, [pc, #436]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4a6c      	ldr	r2, [pc, #432]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002966:	f043 0304 	orr.w	r3, r3, #4
 800296a:	6213      	str	r3, [r2, #32]
 800296c:	4b6a      	ldr	r3, [pc, #424]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	4a69      	ldr	r2, [pc, #420]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6213      	str	r3, [r2, #32]
 8002978:	e00b      	b.n	8002992 <HAL_RCC_OscConfig+0x36e>
 800297a:	4b67      	ldr	r3, [pc, #412]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4a66      	ldr	r2, [pc, #408]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	6213      	str	r3, [r2, #32]
 8002986:	4b64      	ldr	r3, [pc, #400]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4a63      	ldr	r2, [pc, #396]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 800298c:	f023 0304 	bic.w	r3, r3, #4
 8002990:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d015      	beq.n	80029c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299a:	f7ff fb81 	bl	80020a0 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a0:	e00a      	b.n	80029b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a2:	f7ff fb7d 	bl	80020a0 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e0ab      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b8:	4b57      	ldr	r3, [pc, #348]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0ee      	beq.n	80029a2 <HAL_RCC_OscConfig+0x37e>
 80029c4:	e014      	b.n	80029f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c6:	f7ff fb6b 	bl	80020a0 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029cc:	e00a      	b.n	80029e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ce:	f7ff fb67 	bl	80020a0 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029dc:	4293      	cmp	r3, r2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e095      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e4:	4b4c      	ldr	r3, [pc, #304]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1ee      	bne.n	80029ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029f0:	7dfb      	ldrb	r3, [r7, #23]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d105      	bne.n	8002a02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f6:	4b48      	ldr	r3, [pc, #288]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	4a47      	ldr	r2, [pc, #284]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 80029fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8081 	beq.w	8002b0e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a0c:	4b42      	ldr	r3, [pc, #264]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d061      	beq.n	8002adc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d146      	bne.n	8002aae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a20:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <HAL_RCC_OscConfig+0x4fc>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a26:	f7ff fb3b 	bl	80020a0 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2e:	f7ff fb37 	bl	80020a0 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e067      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a40:	4b35      	ldr	r3, [pc, #212]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f0      	bne.n	8002a2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a54:	d108      	bne.n	8002a68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a56:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	492d      	ldr	r1, [pc, #180]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a68:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a19      	ldr	r1, [r3, #32]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	4927      	ldr	r1, [pc, #156]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_RCC_OscConfig+0x4fc>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7ff fb0b 	bl	80020a0 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8e:	f7ff fb07 	bl	80020a0 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e037      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x46a>
 8002aac:	e02f      	b.n	8002b0e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aae:	4b1c      	ldr	r3, [pc, #112]	; (8002b20 <HAL_RCC_OscConfig+0x4fc>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7ff faf4 	bl	80020a0 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abc:	f7ff faf0 	bl	80020a0 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e020      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x498>
 8002ada:	e018      	b.n	8002b0e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e013      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d106      	bne.n	8002b0a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	42420060 	.word	0x42420060

08002b24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0d0      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b38:	4b6a      	ldr	r3, [pc, #424]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d910      	bls.n	8002b68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b67      	ldr	r3, [pc, #412]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 0207 	bic.w	r2, r3, #7
 8002b4e:	4965      	ldr	r1, [pc, #404]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b63      	ldr	r3, [pc, #396]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0b8      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d020      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b80:	4b59      	ldr	r3, [pc, #356]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	4a58      	ldr	r2, [pc, #352]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b98:	4b53      	ldr	r3, [pc, #332]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	4a52      	ldr	r2, [pc, #328]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ba2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba4:	4b50      	ldr	r3, [pc, #320]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	494d      	ldr	r1, [pc, #308]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d040      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d115      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e07f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be2:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d109      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e073      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf2:	4b3d      	ldr	r3, [pc, #244]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e06b      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c02:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f023 0203 	bic.w	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4936      	ldr	r1, [pc, #216]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c14:	f7ff fa44 	bl	80020a0 <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1c:	f7ff fa40 	bl	80020a0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e053      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c32:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f003 020c 	and.w	r2, r3, #12
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d1eb      	bne.n	8002c1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c44:	4b27      	ldr	r3, [pc, #156]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d210      	bcs.n	8002c74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c52:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 0207 	bic.w	r2, r3, #7
 8002c5a:	4922      	ldr	r1, [pc, #136]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c62:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e032      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4916      	ldr	r1, [pc, #88]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	490e      	ldr	r1, [pc, #56]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cb2:	f000 f821 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	490a      	ldr	r1, [pc, #40]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002cc4:	5ccb      	ldrb	r3, [r1, r3]
 8002cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cca:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <HAL_RCC_ClockConfig+0x1cc>)
 8002ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <HAL_RCC_ClockConfig+0x1d0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff f9a2 	bl	800201c <HAL_InitTick>

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40022000 	.word	0x40022000
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	0800363c 	.word	0x0800363c
 8002cf0:	20000034 	.word	0x20000034
 8002cf4:	2000003c 	.word	0x2000003c

08002cf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf8:	b490      	push	{r4, r7}
 8002cfa:	b08a      	sub	sp, #40	; 0x28
 8002cfc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cfe:	4b2a      	ldr	r3, [pc, #168]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d00:	1d3c      	adds	r4, r7, #4
 8002d02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d08:	f240 2301 	movw	r3, #513	; 0x201
 8002d0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	2300      	movs	r3, #0
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	2300      	movs	r3, #0
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d22:	4b22      	ldr	r3, [pc, #136]	; (8002dac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d002      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0x40>
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d003      	beq.n	8002d3e <HAL_RCC_GetSysClockFreq+0x46>
 8002d36:	e02d      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d38:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d3a:	623b      	str	r3, [r7, #32]
      break;
 8002d3c:	e02d      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	0c9b      	lsrs	r3, r3, #18
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d013      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d5c:	4b13      	ldr	r3, [pc, #76]	; (8002dac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	0c5b      	lsrs	r3, r3, #17
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	4a0e      	ldr	r2, [pc, #56]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d76:	fb02 f203 	mul.w	r2, r2, r3
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
 8002d82:	e004      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	4a0b      	ldr	r2, [pc, #44]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d88:	fb02 f303 	mul.w	r3, r2, r3
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	623b      	str	r3, [r7, #32]
      break;
 8002d92:	e002      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d96:	623b      	str	r3, [r7, #32]
      break;
 8002d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3728      	adds	r7, #40	; 0x28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc90      	pop	{r4, r7}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	0800362c 	.word	0x0800362c
 8002dac:	40021000 	.word	0x40021000
 8002db0:	007a1200 	.word	0x007a1200
 8002db4:	003d0900 	.word	0x003d0900

08002db8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <RCC_Delay+0x34>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <RCC_Delay+0x38>)
 8002dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dca:	0a5b      	lsrs	r3, r3, #9
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	fb02 f303 	mul.w	r3, r2, r3
 8002dd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dd4:	bf00      	nop
  }
  while (Delay --);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1e5a      	subs	r2, r3, #1
 8002dda:	60fa      	str	r2, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1f9      	bne.n	8002dd4 <RCC_Delay+0x1c>
}
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	20000034 	.word	0x20000034
 8002df0:	10624dd3 	.word	0x10624dd3

08002df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e041      	b.n	8002e8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fe fe4c 	bl	8001ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3304      	adds	r3, #4
 8002e30:	4619      	mov	r1, r3
 8002e32:	4610      	mov	r0, r2
 8002e34:	f000 fa6a 	bl	800330c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d001      	beq.n	8002eac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e035      	b.n	8002f18 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a16      	ldr	r2, [pc, #88]	; (8002f24 <HAL_TIM_Base_Start_IT+0x90>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d009      	beq.n	8002ee2 <HAL_TIM_Base_Start_IT+0x4e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed6:	d004      	beq.n	8002ee2 <HAL_TIM_Base_Start_IT+0x4e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <HAL_TIM_Base_Start_IT+0x94>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d111      	bne.n	8002f06 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2b06      	cmp	r3, #6
 8002ef2:	d010      	beq.n	8002f16 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f04:	e007      	b.n	8002f16 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0201 	orr.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40012c00 	.word	0x40012c00
 8002f28:	40000400 	.word	0x40000400

08002f2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d122      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d11b      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0202 	mvn.w	r2, #2
 8002f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f9b1 	bl	80032d6 <HAL_TIM_IC_CaptureCallback>
 8002f74:	e005      	b.n	8002f82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f9a4 	bl	80032c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f9b3 	bl	80032e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d122      	bne.n	8002fdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d11b      	bne.n	8002fdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0204 	mvn.w	r2, #4
 8002fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f987 	bl	80032d6 <HAL_TIM_IC_CaptureCallback>
 8002fc8:	e005      	b.n	8002fd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f97a 	bl	80032c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f989 	bl	80032e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d122      	bne.n	8003030 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d11b      	bne.n	8003030 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0208 	mvn.w	r2, #8
 8003000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2204      	movs	r2, #4
 8003006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f95d 	bl	80032d6 <HAL_TIM_IC_CaptureCallback>
 800301c:	e005      	b.n	800302a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f950 	bl	80032c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f95f 	bl	80032e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0310 	and.w	r3, r3, #16
 800303a:	2b10      	cmp	r3, #16
 800303c:	d122      	bne.n	8003084 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b10      	cmp	r3, #16
 800304a:	d11b      	bne.n	8003084 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0210 	mvn.w	r2, #16
 8003054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2208      	movs	r2, #8
 800305a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f933 	bl	80032d6 <HAL_TIM_IC_CaptureCallback>
 8003070:	e005      	b.n	800307e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f926 	bl	80032c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f935 	bl	80032e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b01      	cmp	r3, #1
 8003090:	d10e      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b01      	cmp	r3, #1
 800309e:	d107      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0201 	mvn.w	r2, #1
 80030a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fe fc62 	bl	8001974 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ba:	2b80      	cmp	r3, #128	; 0x80
 80030bc:	d10e      	bne.n	80030dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c8:	2b80      	cmp	r3, #128	; 0x80
 80030ca:	d107      	bne.n	80030dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fa67 	bl	80035aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e6:	2b40      	cmp	r3, #64	; 0x40
 80030e8:	d10e      	bne.n	8003108 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f4:	2b40      	cmp	r3, #64	; 0x40
 80030f6:	d107      	bne.n	8003108 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f8f9 	bl	80032fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b20      	cmp	r3, #32
 8003114:	d10e      	bne.n	8003134 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b20      	cmp	r3, #32
 8003122:	d107      	bne.n	8003134 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f06f 0220 	mvn.w	r2, #32
 800312c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fa32 	bl	8003598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_TIM_ConfigClockSource+0x18>
 8003150:	2302      	movs	r3, #2
 8003152:	e0b3      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x180>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003172:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800317a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800318c:	d03e      	beq.n	800320c <HAL_TIM_ConfigClockSource+0xd0>
 800318e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003192:	f200 8087 	bhi.w	80032a4 <HAL_TIM_ConfigClockSource+0x168>
 8003196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800319a:	f000 8085 	beq.w	80032a8 <HAL_TIM_ConfigClockSource+0x16c>
 800319e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a2:	d87f      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x168>
 80031a4:	2b70      	cmp	r3, #112	; 0x70
 80031a6:	d01a      	beq.n	80031de <HAL_TIM_ConfigClockSource+0xa2>
 80031a8:	2b70      	cmp	r3, #112	; 0x70
 80031aa:	d87b      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x168>
 80031ac:	2b60      	cmp	r3, #96	; 0x60
 80031ae:	d050      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0x116>
 80031b0:	2b60      	cmp	r3, #96	; 0x60
 80031b2:	d877      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x168>
 80031b4:	2b50      	cmp	r3, #80	; 0x50
 80031b6:	d03c      	beq.n	8003232 <HAL_TIM_ConfigClockSource+0xf6>
 80031b8:	2b50      	cmp	r3, #80	; 0x50
 80031ba:	d873      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x168>
 80031bc:	2b40      	cmp	r3, #64	; 0x40
 80031be:	d058      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0x136>
 80031c0:	2b40      	cmp	r3, #64	; 0x40
 80031c2:	d86f      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x168>
 80031c4:	2b30      	cmp	r3, #48	; 0x30
 80031c6:	d064      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x156>
 80031c8:	2b30      	cmp	r3, #48	; 0x30
 80031ca:	d86b      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x168>
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d060      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x156>
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d867      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x168>
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d05c      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x156>
 80031d8:	2b10      	cmp	r3, #16
 80031da:	d05a      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80031dc:	e062      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6899      	ldr	r1, [r3, #8]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f000 f95c 	bl	80034aa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003200:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	609a      	str	r2, [r3, #8]
      break;
 800320a:	e04e      	b.n	80032aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	6899      	ldr	r1, [r3, #8]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f000 f945 	bl	80034aa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800322e:	609a      	str	r2, [r3, #8]
      break;
 8003230:	e03b      	b.n	80032aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	461a      	mov	r2, r3
 8003240:	f000 f8bc 	bl	80033bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2150      	movs	r1, #80	; 0x50
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f913 	bl	8003476 <TIM_ITRx_SetConfig>
      break;
 8003250:	e02b      	b.n	80032aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6859      	ldr	r1, [r3, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	461a      	mov	r2, r3
 8003260:	f000 f8da 	bl	8003418 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2160      	movs	r1, #96	; 0x60
 800326a:	4618      	mov	r0, r3
 800326c:	f000 f903 	bl	8003476 <TIM_ITRx_SetConfig>
      break;
 8003270:	e01b      	b.n	80032aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	461a      	mov	r2, r3
 8003280:	f000 f89c 	bl	80033bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2140      	movs	r1, #64	; 0x40
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f8f3 	bl	8003476 <TIM_ITRx_SetConfig>
      break;
 8003290:	e00b      	b.n	80032aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4619      	mov	r1, r3
 800329c:	4610      	mov	r0, r2
 800329e:	f000 f8ea 	bl	8003476 <TIM_ITRx_SetConfig>
        break;
 80032a2:	e002      	b.n	80032aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032a4:	bf00      	nop
 80032a6:	e000      	b.n	80032aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr

080032d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr

080032e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr

080032fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a25      	ldr	r2, [pc, #148]	; (80033b4 <TIM_Base_SetConfig+0xa8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d007      	beq.n	8003334 <TIM_Base_SetConfig+0x28>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332a:	d003      	beq.n	8003334 <TIM_Base_SetConfig+0x28>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a22      	ldr	r2, [pc, #136]	; (80033b8 <TIM_Base_SetConfig+0xac>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d108      	bne.n	8003346 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a1a      	ldr	r2, [pc, #104]	; (80033b4 <TIM_Base_SetConfig+0xa8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d007      	beq.n	800335e <TIM_Base_SetConfig+0x52>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003354:	d003      	beq.n	800335e <TIM_Base_SetConfig+0x52>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a17      	ldr	r2, [pc, #92]	; (80033b8 <TIM_Base_SetConfig+0xac>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d108      	bne.n	8003370 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a07      	ldr	r2, [pc, #28]	; (80033b4 <TIM_Base_SetConfig+0xa8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d103      	bne.n	80033a4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	615a      	str	r2, [r3, #20]
}
 80033aa:	bf00      	nop
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr
 80033b4:	40012c00 	.word	0x40012c00
 80033b8:	40000400 	.word	0x40000400

080033bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	f023 0201 	bic.w	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f023 030a 	bic.w	r3, r3, #10
 80033f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	621a      	str	r2, [r3, #32]
}
 800340e:	bf00      	nop
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f023 0210 	bic.w	r2, r3, #16
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003442:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	031b      	lsls	r3, r3, #12
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003454:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	621a      	str	r2, [r3, #32]
}
 800346c:	bf00      	nop
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr

08003476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003476:	b480      	push	{r7}
 8003478:	b085      	sub	sp, #20
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	f043 0307 	orr.w	r3, r3, #7
 8003498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	609a      	str	r2, [r3, #8]
}
 80034a0:	bf00      	nop
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b087      	sub	sp, #28
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	021a      	lsls	r2, r3, #8
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	431a      	orrs	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	609a      	str	r2, [r3, #8]
}
 80034de:	bf00      	nop
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e041      	b.n	8003584 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a14      	ldr	r2, [pc, #80]	; (8003590 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d009      	beq.n	8003558 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354c:	d004      	beq.n	8003558 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a10      	ldr	r2, [pc, #64]	; (8003594 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d10c      	bne.n	8003572 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800355e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	4313      	orrs	r3, r2
 8003568:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40012c00 	.word	0x40012c00
 8003594:	40000400 	.word	0x40000400

08003598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <__libc_init_array>:
 80035bc:	b570      	push	{r4, r5, r6, lr}
 80035be:	2600      	movs	r6, #0
 80035c0:	4d0c      	ldr	r5, [pc, #48]	; (80035f4 <__libc_init_array+0x38>)
 80035c2:	4c0d      	ldr	r4, [pc, #52]	; (80035f8 <__libc_init_array+0x3c>)
 80035c4:	1b64      	subs	r4, r4, r5
 80035c6:	10a4      	asrs	r4, r4, #2
 80035c8:	42a6      	cmp	r6, r4
 80035ca:	d109      	bne.n	80035e0 <__libc_init_array+0x24>
 80035cc:	f000 f822 	bl	8003614 <_init>
 80035d0:	2600      	movs	r6, #0
 80035d2:	4d0a      	ldr	r5, [pc, #40]	; (80035fc <__libc_init_array+0x40>)
 80035d4:	4c0a      	ldr	r4, [pc, #40]	; (8003600 <__libc_init_array+0x44>)
 80035d6:	1b64      	subs	r4, r4, r5
 80035d8:	10a4      	asrs	r4, r4, #2
 80035da:	42a6      	cmp	r6, r4
 80035dc:	d105      	bne.n	80035ea <__libc_init_array+0x2e>
 80035de:	bd70      	pop	{r4, r5, r6, pc}
 80035e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e4:	4798      	blx	r3
 80035e6:	3601      	adds	r6, #1
 80035e8:	e7ee      	b.n	80035c8 <__libc_init_array+0xc>
 80035ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ee:	4798      	blx	r3
 80035f0:	3601      	adds	r6, #1
 80035f2:	e7f2      	b.n	80035da <__libc_init_array+0x1e>
 80035f4:	0800364c 	.word	0x0800364c
 80035f8:	0800364c 	.word	0x0800364c
 80035fc:	0800364c 	.word	0x0800364c
 8003600:	08003650 	.word	0x08003650

08003604 <memset>:
 8003604:	4603      	mov	r3, r0
 8003606:	4402      	add	r2, r0
 8003608:	4293      	cmp	r3, r2
 800360a:	d100      	bne.n	800360e <memset+0xa>
 800360c:	4770      	bx	lr
 800360e:	f803 1b01 	strb.w	r1, [r3], #1
 8003612:	e7f9      	b.n	8003608 <memset+0x4>

08003614 <_init>:
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003616:	bf00      	nop
 8003618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800361a:	bc08      	pop	{r3}
 800361c:	469e      	mov	lr, r3
 800361e:	4770      	bx	lr

08003620 <_fini>:
 8003620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003622:	bf00      	nop
 8003624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003626:	bc08      	pop	{r3}
 8003628:	469e      	mov	lr, r3
 800362a:	4770      	bx	lr
